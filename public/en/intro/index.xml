<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Krustlet – </title>
    <link>https://docs.krustlet.dev/en/intro/</link>
    <description>Recent content on Krustlet</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    
	  <atom:link href="https://docs.krustlet.dev/en/intro/index.xml" rel="self" type="application/rss+xml" />
    
    
      
        
      
    
    
    <item>
      <title>En: </title>
      <link>https://docs.krustlet.dev/en/intro/install/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://docs.krustlet.dev/en/intro/install/</guid>
      <description>
        
        
        &lt;h1 id=&#34;install-krustlet&#34;&gt;Install Krustlet&lt;/h1&gt;
&lt;p&gt;This guide shows how to install Krustlet.&lt;/p&gt;
&lt;h2 id=&#34;from-the-binary-releases&#34;&gt;From the Binary Releases&lt;/h2&gt;
&lt;p&gt;Every release of Krustlet provides compiled releases for a variety of Operating
Systems. These compiled releases can be manually downloaded and installed.
Please note these instructions will work on Linux, MacOS, and Windows (in
PowerShell)&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Download your desired version from &lt;a href=&#34;https://github.com/deislabs/krustlet/releases&#34;&gt;the releases
page&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Unpack it (&lt;code&gt;tar -xzf krustlet-v0.6.0-linux-amd64.tar.gz&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;Find the desired Krustlet provider in the unpacked directory, and move it to
its desired destination somewhere in your &lt;code&gt;$PATH&lt;/code&gt; (e.g. &lt;code&gt;mv krustlet-wasi /usr/local/bin/&lt;/code&gt; on unix-like systems or &lt;code&gt;mv krustlet-wasi.exe C:\Windows\system32\&lt;/code&gt; on Windows)&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;From there, you should be able to run the client in your terminal emulator. If
your terminal cannot find Krustlet, check to make sure that your &lt;code&gt;$PATH&lt;/code&gt;
environment variable is set correctly.&lt;/p&gt;
&lt;h3 id=&#34;validating&#34;&gt;Validating&lt;/h3&gt;
&lt;p&gt;If you&amp;rsquo;d like to validate the download, checksums can be downloaded from
&lt;a href=&#34;https://krustlet.blob.core.windows.net/releases/checksums-v0.6.0.txt&#34;&gt;https://krustlet.blob.core.windows.net/releases/checksums-v0.6.0.txt&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;windows&#34;&gt;Windows&lt;/h3&gt;
&lt;p&gt;As of Krustlet 0.4, there are now Windows builds available. However, there are
some caveats. The underlying dependencies used to support Windows do not support
certs with IP SANs (subject alternate names). Because of this, the serving certs
requested during bootstrap will not work for local development options like
minikube or KinD as they do not have an FQDN. So these builds can only be used
in environments with an actual hostname/FQDN accessible to the Kubernetes
cluster.&lt;/p&gt;
&lt;h2 id=&#34;from-canary-builds&#34;&gt;From Canary Builds&lt;/h2&gt;
&lt;p&gt;“Canary” builds are versions of Krustlet that are built from &lt;code&gt;master&lt;/code&gt;. They are
not official releases, and may not be stable. However, they offer the
opportunity to test the cutting edge features before they are released.&lt;/p&gt;
&lt;p&gt;Here are links to the common builds:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://krustlet.blob.core.windows.net/releases/checksums-canary.txt&#34;&gt;checksum
file&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://krustlet.blob.core.windows.net/releases/krustlet-canary-linux-amd64.tar.gz&#34;&gt;64-bit Linux (AMD
architecture)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://krustlet.blob.core.windows.net/releases/krustlet-canary-linux-aarch64.tar.gz&#34;&gt;64-bit Linux (ARM
architecture)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://krustlet.blob.core.windows.net/releases/krustlet-canary-macos-amd64.tar.gz&#34;&gt;64-bit macOS (AMD
architecture)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://krustlet.blob.core.windows.net/releases/krustlet-canary-windows-amd64.tar.gz&#34;&gt;64-bit
Windows&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;compiling-from-source&#34;&gt;Compiling from Source&lt;/h2&gt;
&lt;p&gt;If you want to compile Krustlet from source, you will need to follow the
&lt;a href=&#34;../community/developers.md&#34;&gt;developer guide&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&#34;next-steps&#34;&gt;Next Steps&lt;/h2&gt;
&lt;p&gt;After installing Krustlet, if you&amp;rsquo;d like to get started and see something
running, go checkout any one of the &lt;a href=&#34;../../demos&#34;&gt;demos&lt;/a&gt;. Each of them has a
prebuilt WebAssembly module stored in a registry and a Kubernetes manifest that
you can &lt;code&gt;kubectl apply&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;If you&amp;rsquo;d like to learn how to write your own simple module in Rust and deploy
it, &lt;a href=&#34;tutorial01.md&#34;&gt;follow through the tutorial&lt;/a&gt; to deploy your first
application.&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>En: </title>
      <link>https://docs.krustlet.dev/en/intro/intro/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://docs.krustlet.dev/en/intro/intro/</guid>
      <description>
        
        
        &lt;h1 id=&#34;introduction&#34;&gt;Introduction&lt;/h1&gt;
&lt;p&gt;Krustlet is a tool to run WebAssembly workloads natively on Kubernetes. Krustlet
acts like a node in your Kubernetes cluster. When a user schedules a Pod with
certain node tolerations, the Kubernetes API will schedule that workload to a
Krustlet node, which will then fetch the module and run it.&lt;/p&gt;
&lt;p&gt;Krustlet implements the &lt;a href=&#34;../topics/glossary.md#kubelet&#34;&gt;kubelet&lt;/a&gt; API, and it
will respond to common API requests like &lt;code&gt;kubectl logs&lt;/code&gt; or &lt;code&gt;kubectl delete&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;If you&amp;rsquo;d like to learn how to deploy Krustlet on your own cluster (or if you&amp;rsquo;re
just getting started), follow the &lt;a href=&#34;quickstart.md&#34;&gt;quickstart guide&lt;/a&gt; for
instructions on deploying your first Kubernetes cluster.&lt;/p&gt;
&lt;p&gt;In order for your application to run on a Kruslet node, the application must be
compiled to WebAssembly and pushed to a container registry. If you&amp;rsquo;d like to
learn more about how to write your own WebAssembly module in Rust and deploy it,
&lt;a href=&#34;tutorial01.md&#34;&gt;follow through the tutorial&lt;/a&gt; to deploy your first application.&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>En: </title>
      <link>https://docs.krustlet.dev/en/intro/quickstart/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://docs.krustlet.dev/en/intro/quickstart/</guid>
      <description>
        
        
        &lt;h1 id=&#34;quick-start&#34;&gt;Quick Start&lt;/h1&gt;
&lt;p&gt;Get started with Krustlet in three easy steps:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Boot a Kubernetes cluster&lt;/li&gt;
&lt;li&gt;Boot a Krustlet node&lt;/li&gt;
&lt;li&gt;Deploy your first application&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;As Krustlet is under active development, this guide will help you set up a
cluster suitable for evaluation, development, and testing purposes.&lt;/p&gt;
&lt;h2 id=&#34;step-1-boot-a-kubernetes-cluster&#34;&gt;Step 1: Boot a Kubernetes Cluster&lt;/h2&gt;
&lt;p&gt;There are many ways to boot up a Kubernetes cluster. You may choose to get up
and running in cloud environments or locally on your laptop.&lt;/p&gt;
&lt;p&gt;If you have already created a Kubernetes cluster, proceed to the next step to
install Krustlet on your own Kubernetes cluster.&lt;/p&gt;
&lt;p&gt;For production use:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;../howto/krustlet-on-azure.md&#34;&gt;Azure&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;../howto/kubernetes-on-eks.md&#34;&gt;Amazon Elastic Kubernetes Service (EKS)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;For development and evaluation purposes, it may make sense to use a VM-based
Kubernetes cluster for quick and easy setup and teardown:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;../howto/kubernetes-on-kind.md&#34;&gt;Kubernetes-in-Docker (KinD)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;../howto/kubernetes-on-minikube.md&#34;&gt;Minikube&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;step-2-boot-a-krustlet-node&#34;&gt;Step 2: Boot a Krustlet Node&lt;/h2&gt;
&lt;p&gt;Depending on whatever provider you chose in step 1, you now have a few options
to boot and register Krustlet with your Kubernetes cluster.&lt;/p&gt;
&lt;p&gt;If you have your own Kubernetes cluster, you may want to follow the steps in the
cloud-based option guides to determine how to set up Krustlet for your own
infrastructure.&lt;/p&gt;
&lt;p&gt;For production use, you&amp;rsquo;ll want to boot Krustlet on a device that can start a
web server on an IP accessible from the Kubernetes control plane.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;../howto/krustlet-on-eks.md&#34;&gt;Amazon Elastic Kubernetes Service (EKS)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;For testing/development environments:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;../howto/krustlet-on-kind.md&#34;&gt;Kubernetes-in-Docker (KinD)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;../howto/krustlet-on-microk8s.md&#34;&gt;MicroK8s&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;../howto/krustlet-on-minikube.md&#34;&gt;Minikube&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;../howto/krustlet-on-wsl2.md&#34;&gt;Windows Subsystem for Linux (WSL2)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;step-3-deploy-your-first-application&#34;&gt;Step 3: Deploy your First Application&lt;/h2&gt;
&lt;p&gt;If you just want to get started and see something running, go checkout any one
of the &lt;a href=&#34;../../demos&#34;&gt;demos&lt;/a&gt;. Each of them has a prebuilt WebAssembly module
stored in a registry and a Kubernetes manifest that you can &lt;code&gt;kubectl apply&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;If you&amp;rsquo;d like to learn how to write your own simple module in Rust and deploy
it, &lt;a href=&#34;tutorial01.md&#34;&gt;follow through the tutorial&lt;/a&gt; to deploy your first
application.&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>En: </title>
      <link>https://docs.krustlet.dev/en/intro/readnext/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://docs.krustlet.dev/en/intro/readnext/</guid>
      <description>
        
        
        &lt;h1 id=&#34;what-to-read-next&#34;&gt;What to read next&lt;/h1&gt;
&lt;p&gt;So you’ve read all the introductory material and have decided you’d like to keep
using Krustlet to run your WebAssembly applications. We’ve only just scratched
the surface.&lt;/p&gt;
&lt;p&gt;So what’s next?&lt;/p&gt;
&lt;p&gt;Well, we’ve always been big fans of learning by doing. At this point you should
know enough to start a project of your own and start fooling around. As you need
to learn new tricks, come back to the documentation.&lt;/p&gt;
&lt;p&gt;We’ve put a lot of effort into making Krustlet&amp;rsquo;s documentation useful, easy to
read and as complete as possible. The rest of this document explains more about
how the documentation works so that you can get the most out of it.&lt;/p&gt;
&lt;p&gt;(Yes, this is documentation about documentation. Rest assured we have no plans
to write a document about how to read the document about documentation.)&lt;/p&gt;
&lt;h2 id=&#34;how-the-documentation-is-organized&#34;&gt;How the documentation is organized&lt;/h2&gt;
&lt;p&gt;Krustlet&amp;rsquo;s main documentation is broken up into “chunks” designed to fill
different needs:&lt;/p&gt;
&lt;p&gt;The [introductory material][intro] is designed for people new to Krustlet – or
to WebAssembly on Kubernetes in general. It doesn’t cover anything in depth, but
instead gives a high-level overview of how running apps on Kubernetes“feels”.&lt;/p&gt;
&lt;p&gt;The [topic guides][topics], on the other hand, dive deep into individual parts
of Krustlet. There are complete guides to the internals of Krustlet&amp;rsquo;s
architecture. This is probably where you’ll want to spend most of your time; if
you work your way through these guides you should come out knowing pretty much
everything there is to know about Krustlet.&lt;/p&gt;
&lt;p&gt;[intro]: README.md [topics]: ../topics/README.md&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>En: </title>
      <link>https://docs.krustlet.dev/en/intro/tutorial01/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://docs.krustlet.dev/en/intro/tutorial01/</guid>
      <description>
        
        
        &lt;h1 id=&#34;writing-your-first-app-part-1&#34;&gt;Writing your first app, part 1&lt;/h1&gt;
&lt;p&gt;Let’s learn by example.&lt;/p&gt;
&lt;p&gt;Throughout this tutorial, we’ll walk you through the creation of a basic WASI
application. Once ready, we will package that application and install it onto
the Kubernetes cluster using krustlet.&lt;/p&gt;
&lt;p&gt;The tutorial will consist of three parts:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Building the application&lt;/li&gt;
&lt;li&gt;Publishing the application to a registry&lt;/li&gt;
&lt;li&gt;Running the application with Krustlet&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;prerequisites&#34;&gt;Prerequisites&lt;/h2&gt;
&lt;p&gt;We’ll assume you have Cargo (a package management system for Rust) installed
already.&lt;/p&gt;
&lt;p&gt;If you&amp;rsquo;re compiling the application written in C, you&amp;rsquo;ll want to install the
&lt;a href=&#34;https://github.com/WebAssembly/wasi-sdk&#34;&gt;WASI SDK&lt;/a&gt;, though if you&amp;rsquo;re following
the tutorial with the Rust example, this step is optional.&lt;/p&gt;
&lt;p&gt;In part 2 of this tutorial, we will be publishing our application to a registry
hosted on Microsoft Azure. The steps assume you have an Azure account and the
&lt;code&gt;az&lt;/code&gt; CLI installed. However, there are other cloud providers available with
their own solutions, and if you&amp;rsquo;re feeling particularly brave, you can &lt;a href=&#34;https://github.com/docker/distribution&#34;&gt;run your
own registry on your own
infrastructure&lt;/a&gt;. You&amp;rsquo;ll also need
&lt;a href=&#34;https://github.com/engineerd/wasm-to-oci&#34;&gt;wasm-to-oci&lt;/a&gt; (a tool for publishing
WebAssembly modules to a registry).&lt;/p&gt;
&lt;p&gt;We’ll assume you have Krustlet installed already. See &lt;a href=&#34;quickstart.md&#34;&gt;the quickstart
guide&lt;/a&gt; for advice on how to boot a Kubernetes cluster and install
Krustlet.&lt;/p&gt;
&lt;p&gt;If you&amp;rsquo;re having trouble going through this tutorial, please post an issue to
&lt;a href=&#34;https://github.com/deislabs/krustlet&#34;&gt;deislabs/krustlet&lt;/a&gt; to chat with other
Krustlet users who might be able to help.&lt;/p&gt;
&lt;h2 id=&#34;creating-your-first-application&#34;&gt;Creating your first application&lt;/h2&gt;
&lt;p&gt;For this tutorial, we&amp;rsquo;ll be creating an example application written either in C
or in Rust.&lt;/p&gt;
&lt;p&gt;The application a very simple &amp;ldquo;hello world&amp;rdquo; application, running forever and
printing &amp;ldquo;hello world!&amp;rdquo; every 5 seconds to standard output.&lt;/p&gt;
&lt;h3 id=&#34;option-1-from-c&#34;&gt;Option 1: From C&lt;/h3&gt;
&lt;p&gt;First, let&amp;rsquo;s write the application in C. To create your app, type this command:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-console&#34; data-lang=&#34;console&#34;&gt;$ mkdir demo
$ cd demo
$ touch main.c
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The C code here uses standard POSIX APIs, and doesn&amp;rsquo;t have any knowledge of WASI
internals.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;&amp;lt;unistd.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;main&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;while&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color:#000&#34;&gt;printf&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;Hello, World!&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;);&lt;/span&gt;
        &lt;span style=&#34;color:#000&#34;&gt;sleep&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;5&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;);&lt;/span&gt;
    &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;
    &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;;&lt;/span&gt;
&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The wasi-sdk provides a clang which is configured to target WASI. We can compile
our program like so:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-console&#34; data-lang=&#34;console&#34;&gt;$ clang main.c -o demo.wasm
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;This is just regular clang, configured to use a WebAssembly target and sysroot.
The output of clang here is a standard WebAssembly module:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-console&#34; data-lang=&#34;console&#34;&gt;$ file demo.wasm
demo.wasm: WebAssembly (wasm) binary module version 0x1 (MVP)
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;option-2-from-rust&#34;&gt;Option 2: From Rust&lt;/h3&gt;
&lt;p&gt;The same application can be written in Rust. First, go ahead and start a new
project:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-console&#34; data-lang=&#34;console&#34;&gt;$ cargo new --bin demo
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Now, let&amp;rsquo;s port the C program defined earlier to Rust. In &lt;code&gt;src/main.rs&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-rust&#34; data-lang=&#34;rust&#34;&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;use&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;std&lt;/span&gt;::&lt;span style=&#34;color:#000&#34;&gt;time&lt;/span&gt;::&lt;span style=&#34;color:#000&#34;&gt;Duration&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;;&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;use&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;std&lt;/span&gt;::&lt;span style=&#34;color:#000&#34;&gt;thread&lt;/span&gt;::&lt;span style=&#34;color:#000&#34;&gt;sleep&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;;&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;fn&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;main&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;()&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;loop&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;        &lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;println&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;!&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;Hello, World!&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;);&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;        &lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;sleep&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;Duration&lt;/span&gt;::&lt;span style=&#34;color:#000&#34;&gt;from_secs&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;5&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;));&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;In order to build it, we first need to install a WASI-enabled Rust toolchain:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-console&#34; data-lang=&#34;console&#34;&gt;$ rustup target add wasm32-wasi
$ cargo build --release --target wasm32-wasi
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;We should now have the WebAssembly module created in &lt;code&gt;target/wasm32-wasi/release&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-console&#34; data-lang=&#34;console&#34;&gt;$ file target/wasm32-wasi/release/demo.wasm
demo.wasm: WebAssembly (wasm) binary module version 0x1 (MVP)
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;optional-executing-with-wasmtime&#34;&gt;Optional: executing with wasmtime&lt;/h2&gt;
&lt;p&gt;The WebAssembly module &lt;code&gt;demo.wasm&lt;/code&gt; we just compiled either from C or Rust is
simply a single file containing a self-contained WASM module.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;wasmtime&lt;/code&gt; is a standalone JIT-style runtime for WebAssembly and WASI. It runs
WebAssembly code outside of the web, and can be used both as a command-line
utility or as a library embedded in a larger application.&lt;/p&gt;
&lt;p&gt;We can execute our application with &lt;code&gt;wasmtime&lt;/code&gt; directly, like so:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-console&#34; data-lang=&#34;console&#34;&gt;$ wasmtime demo.wasm
Hello, World!
Hello, World!
Hello, World!
^C
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;To exit the program, enter CTRL+C with your keyboard.&lt;/p&gt;
&lt;p&gt;Great! Our program runs as expected!&lt;/p&gt;
&lt;p&gt;When you’re comfortable with the application, read &lt;a href=&#34;tutorial02.md&#34;&gt;part 2&lt;/a&gt; of
this tutorial to learn about publishing our application to a registry, where
Krustlet will be able to find it and run it.&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>En: </title>
      <link>https://docs.krustlet.dev/en/intro/tutorial02/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://docs.krustlet.dev/en/intro/tutorial02/</guid>
      <description>
        
        
        &lt;h1 id=&#34;writing-your-first-app-part-2&#34;&gt;Writing your first app, part 2&lt;/h1&gt;
&lt;p&gt;This tutorial begins where &lt;a href=&#34;tutorial01.md&#34;&gt;Tutorial 1&lt;/a&gt; left off. We’ll walk
through the process to set up your personal registry and publish your
application to that registry.&lt;/p&gt;
&lt;p&gt;For this tutorial, we will be creating a registry hosted on Microsoft Azure, but
there are other cloud providers that provide their own solutions, and you can
&lt;a href=&#34;https://github.com/docker/distribution&#34;&gt;run one on your own infrastructure&lt;/a&gt;,
too!&lt;/p&gt;
&lt;h2 id=&#34;what-is-a-registry-and-what-is-wasm-to-oci&#34;&gt;What is a registry, and what is wasm-to-oci?&lt;/h2&gt;
&lt;p&gt;A registry allows you to store your local WebAssembly modules in the cloud. With
a registry, you can backup your personal modules, share your projects, and
collaborate with others.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/engineerd/wasm-to-oci&#34;&gt;wasm-to-oci&lt;/a&gt; is an open source project that understands how to communicate
with a registry. It takes a module you&amp;rsquo;ve built locally on your computer and
publishes it to the registry, making it publicly available for others to access.&lt;/p&gt;
&lt;h2 id=&#34;create-a-registry&#34;&gt;Create a registry&lt;/h2&gt;
&lt;p&gt;This tutorial uses the Azure CLI to create an Azure Container Registry. We will
be using this registry to publish our modules and provide Krustlet the URL for
fetching these modules.&lt;/p&gt;
&lt;p&gt;The steps here assume you have an Azure account and the &lt;code&gt;az&lt;/code&gt; CLI installed.
However, there are other cloud providers available with their own solutions, and
if you&amp;rsquo;re feeling particularly brave, you can &lt;a href=&#34;https://github.com/docker/distribution&#34;&gt;run your own registry on your own
infrastructure&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id=&#34;create-a-resource-group&#34;&gt;Create a resource group&lt;/h3&gt;
&lt;p&gt;An Azure resource group is a logical container into which Azure resources are
deployed and managed.&lt;/p&gt;
&lt;p&gt;The following example creates a resource group named &lt;code&gt;myResourceGroup&lt;/code&gt; in the
&lt;code&gt;eastus&lt;/code&gt; region. You may want to change it to a region closer to you. You can
find out what regions are available with &lt;code&gt;az account list-locations&lt;/code&gt;, and you
can set your default region with &lt;code&gt;az configure --defaults location=&amp;lt;location&amp;gt;&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Create a resource group with the &lt;code&gt;az group create&lt;/code&gt; command.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-console&#34; data-lang=&#34;console&#34;&gt;$ az group create --name myResourceGroup --location eastus
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;create-a-container-registry&#34;&gt;Create a container registry&lt;/h3&gt;
&lt;p&gt;In this tutorial, we will be creating a basic registry, which is cost-optimized
for developers learning about Azure Container Registry. For details on available
service tiers, see &lt;a href=&#34;https://docs.microsoft.com/en-us/azure/container-registry/container-registry-skus&#34;&gt;Container registry
SKUs&lt;/a&gt;
in the Azure documentation.&lt;/p&gt;
&lt;p&gt;Create an ACR instance using the &lt;code&gt;az acr create command&lt;/code&gt;. The registry name must
be unique within Azure, and contain 5-50 alphanumeric characters.&lt;/p&gt;
&lt;p&gt;In the following example, &lt;code&gt;mycontainerregistry007&lt;/code&gt; is used as the name. Update
this to a unique value.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-console&#34; data-lang=&#34;console&#34;&gt;$ az acr create --sku Basic --resource-group myResourceGroup --name mycontainerregistry007
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;When the registry is created, the output is similar to the following:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
  &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;&amp;#34;adminUserEnabled&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;false&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt;
  &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;&amp;#34;creationDate&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;2019-01-08T22:32:13.175925+00:00&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt;
  &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;&amp;#34;id&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.ContainerRegistry/registries/mycontainerregistry007&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt;
  &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;&amp;#34;location&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;eastus&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt;
  &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;&amp;#34;loginServer&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;mycontainerregistry007.azurecr.io&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt;
  &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;&amp;#34;name&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;mycontainerregistry007&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt;
  &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;&amp;#34;provisioningState&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;Succeeded&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt;
  &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;&amp;#34;resourceGroup&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;myResourceGroup&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt;
  &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;&amp;#34;sku&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;&amp;#34;name&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;Basic&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt;
    &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;&amp;#34;tier&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;Basic&amp;#34;&lt;/span&gt;
  &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;},&lt;/span&gt;
  &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;&amp;#34;status&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;null&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt;
  &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;&amp;#34;storageAccount&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;null&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt;
  &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;&amp;#34;tags&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{},&lt;/span&gt;
  &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;&amp;#34;type&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;Microsoft.ContainerRegistry/registries&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Take note of the &lt;code&gt;loginServer&lt;/code&gt; field. That is the URL for our registry. We&amp;rsquo;ll
need to know that when we publish our application in a bit.&lt;/p&gt;
&lt;h3 id=&#34;log-in&#34;&gt;Log in&lt;/h3&gt;
&lt;p&gt;Now that our registry was created, we can go ahead and authenticate with this
registry to publish our application:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-console&#34; data-lang=&#34;console&#34;&gt;$ az acr login --name mycontainerregistry007
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;publish-your-app&#34;&gt;Publish your app&lt;/h2&gt;
&lt;p&gt;Now that we&amp;rsquo;ve created our registry and are logged in, we can publish our
application using &lt;a href=&#34;https://github.com/engineerd/wasm-to-oci&#34;&gt;wasm-to-oci&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;wasm-to-oci is a tool for publishing WebAssembly modules to a registry. It
packages the module and uploads it to the registry. Krustlet understands the
registry API and will fetch the module based on the URL you uploaded it to.&lt;/p&gt;
&lt;p&gt;To publish our application, we need to come up with a name and a version number.
Our &lt;code&gt;loginServer&lt;/code&gt; field from earlier was &lt;code&gt;mycontainerregistry007.azurecr.io&lt;/code&gt;,
and we want to name our application &lt;code&gt;krustlet-tutorial&lt;/code&gt;, version &lt;code&gt;v1.0.0&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The pattern for a registry URL is:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;&amp;lt;URL&amp;gt;/&amp;lt;NAME&amp;gt;:&amp;lt;VERSION&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;In our case, our application URL will look like
&lt;code&gt;mycontainerregistry007.azurecr.io/krustlet-tutorial:v1.0.0&lt;/code&gt;. Great!&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s publish that now:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-console&#34; data-lang=&#34;console&#34;&gt;$ wasm-to-oci push demo.wasm mycontainerregistry007.azurecr.io/krustlet-tutorial:v1.0.0
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;code&gt;demo.wasm&lt;/code&gt; is the filename of the WebAssembly module we compiled during &lt;a href=&#34;tutorial01.md&#34;&gt;part
1&lt;/a&gt; of this tutorial. If you are publishing the Rust example, use
&lt;code&gt;target/wasm32-wasi/debug/demo.wasm&lt;/code&gt; instead.&lt;/p&gt;
&lt;h2 id=&#34;create-a-container-registry-pull-secret&#34;&gt;Create a container registry pull secret&lt;/h2&gt;
&lt;p&gt;Unless your container registry is enabled with anonymous access, you need to
authenticate krustlet to pull images from it. At the moment, there is no flag
in the Azure portal to make a registry public, but you can
&lt;a href=&#34;https://docs.microsoft.com/en-us/azure/container-registry/container-registry-faq#how-do-i-enable-anonymous-pull-access&#34;&gt;create a support ticket&lt;/a&gt;
to have it enabled manually.&lt;/p&gt;
&lt;p&gt;Without public access to the container registry, you need to create a
&lt;em&gt;Kubernetes pull secret&lt;/em&gt;. The steps below for Azure are
&lt;a href=&#34;https://docs.microsoft.com/en-us/azure/container-registry/container-registry-auth-kubernetes&#34;&gt;extracted from the Azure documentation&lt;/a&gt;,
and repeated here for convenience.&lt;/p&gt;
&lt;h3 id=&#34;create-a-service-principal-and-assign-a-role-in-azure&#34;&gt;Create a service principal and assign a role in Azure&lt;/h3&gt;
&lt;p&gt;Below is a bash script that will create a service principal for pulling images
for the registry. Replace &lt;code&gt;&amp;lt;container-registry-name&amp;gt;&lt;/code&gt; with
&lt;code&gt;mycontainerregistry007&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;#!/bin/bash
&lt;/span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;# Modify for your environment.&lt;/span&gt;
&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;# ACR_NAME: The name of your Azure Container Registry&lt;/span&gt;
&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;# SERVICE_PRINCIPAL_NAME: Must be unique within your AD tenant&lt;/span&gt;
&lt;span style=&#34;color:#000&#34;&gt;ACR_NAME&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt;&amp;lt;container-registry-name&amp;gt;
&lt;span style=&#34;color:#000&#34;&gt;SERVICE_PRINCIPAL_NAME&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt;acr-service-principal

&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;# Obtain the full registry ID for subsequent command args&lt;/span&gt;
&lt;span style=&#34;color:#000&#34;&gt;ACR_REGISTRY_ID&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;$(&lt;/span&gt;az acr show --name &lt;span style=&#34;color:#000&#34;&gt;$ACR_NAME&lt;/span&gt; --query id --output tsv&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;)&lt;/span&gt;

&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;# Create the service principal with rights scoped to the registry.&lt;/span&gt;
&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;# Default permissions are for docker pull access. Modify the &amp;#39;--role&amp;#39;&lt;/span&gt;
&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;# argument value as desired:&lt;/span&gt;
&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;# acrpull:     pull only&lt;/span&gt;
&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;# acrpush:     push and pull&lt;/span&gt;
&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;# owner:       push, pull, and assign roles&lt;/span&gt;
&lt;span style=&#34;color:#000&#34;&gt;SP_PASSWD&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;$(&lt;/span&gt;az ad sp create-for-rbac --name http://&lt;span style=&#34;color:#000&#34;&gt;$SERVICE_PRINCIPAL_NAME&lt;/span&gt; --scopes &lt;span style=&#34;color:#000&#34;&gt;$ACR_REGISTRY_ID&lt;/span&gt; --role acrpull --query password --output tsv&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;)&lt;/span&gt;
&lt;span style=&#34;color:#000&#34;&gt;SP_APP_ID&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;$(&lt;/span&gt;az ad sp show --id http://&lt;span style=&#34;color:#000&#34;&gt;$SERVICE_PRINCIPAL_NAME&lt;/span&gt; --query appId --output tsv&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;)&lt;/span&gt;

&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;# Output the service principal&amp;#39;s credentials; use these in your services and&lt;/span&gt;
&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;# applications to authenticate to the container registry.&lt;/span&gt;
&lt;span style=&#34;color:#204a87&#34;&gt;echo&lt;/span&gt; &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;Service principal ID: &lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;$SP_APP_ID&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#204a87&#34;&gt;echo&lt;/span&gt; &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;Service principal password: &lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;$SP_PASSWD&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;If you do not want to create a service principal in Azure, you can also use the
registry &lt;code&gt;Admin&lt;/code&gt; username and password which gives full access to the registry
and is not generally recommended. This is not enabled by default. Go to the
Azure portal and the settings for your registry and the &lt;code&gt;Access keys&lt;/code&gt; menu.
There you can enable &lt;code&gt;Admin&lt;/code&gt; access and use the associated username instead of
the service principal ID and the password when creating the pull secret below.&lt;/p&gt;
&lt;h3 id=&#34;use-the-service-principal&#34;&gt;Use the service principal&lt;/h3&gt;
&lt;p&gt;Create an image pull secret in Kubernetes:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-console&#34; data-lang=&#34;console&#34;&gt;kubectl create secret docker-registry &amp;lt;acr-secret-name&amp;gt; \
    --namespace &amp;lt;namespace&amp;gt; \
    --docker-server=mycontainerregistry007.azurecr.io \
    --docker-username=&amp;lt;service-principal-ID&amp;gt; \
    --docker-password=&amp;lt;service-principal-password&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;where &lt;code&gt;&amp;lt;acr-secret-name&amp;gt;&lt;/code&gt; is a name you give this secret,
&lt;code&gt;&amp;lt;service-principal-ID&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;service-principal-password&amp;gt;&lt;/code&gt; are taken from the
output of the bash script above. The &lt;code&gt;--namespace&lt;/code&gt; can be omitted if you are
using the default Kubernetes namespace.&lt;/p&gt;
&lt;h2 id=&#34;next-steps&#34;&gt;Next steps&lt;/h2&gt;
&lt;p&gt;When you’re comfortable with publishing your application with wasm-to-oci, read
&lt;a href=&#34;tutorial03.md&#34;&gt;part 3 of this tutorial&lt;/a&gt; to install your application.&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>En: </title>
      <link>https://docs.krustlet.dev/en/intro/tutorial03/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://docs.krustlet.dev/en/intro/tutorial03/</guid>
      <description>
        
        
        &lt;h1 id=&#34;writing-your-first-app-part-3&#34;&gt;Writing your first app, part 3&lt;/h1&gt;
&lt;p&gt;This tutorial begins where &lt;a href=&#34;tutorial02.md&#34;&gt;Tutorial 2&lt;/a&gt; left off. We’ll walk
through the process for installing your first application written in WebAssembly
into your Kubernetes cluster, then test our application using &lt;code&gt;kubectl&lt;/code&gt;.&lt;/p&gt;
&lt;h2 id=&#34;scheduling-pods-on-the-krustlet&#34;&gt;Scheduling pods on the Krustlet&lt;/h2&gt;
&lt;p&gt;In Kubernetes, Pods are the smallest deployable units of compute that can be
created and managed in Kubernetes. In other words, your application runs inside
a Pod, and we can inspect the status of the application by inspecting the Pod.&lt;/p&gt;
&lt;p&gt;Krustlet listens for pods requesting a node with the &lt;code&gt;wasm32-wasi&lt;/code&gt; architecture.
To schedule a Pod that Krustlet understands, we need to provide Kubernetes with
a YAML file describing our Pod.&lt;/p&gt;
&lt;p&gt;Create a new file and call it &lt;code&gt;krustlet-tutorial.yaml&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;apiVersion&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;v1&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;kind&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;Pod&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;metadata&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;name&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;krustlet-tutorial&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;spec&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;containers&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;    &lt;/span&gt;- &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;name&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;krustlet-tutorial&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;      &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;image&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;mycontainerregistry007.azurecr.io/krustlet-tutorial:v1.0.0&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;imagePullSecrets&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;    &lt;/span&gt;- &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;name&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;&amp;lt;acr-secret&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;tolerations&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;    &lt;/span&gt;- &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;key&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;kubernetes.io/arch&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;      &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;operator&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;Equal&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;      &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;value&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;wasm32-wasi&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;      &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;effect&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;NoExecute&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;    &lt;/span&gt;- &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;key&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;kubernetes.io/arch&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;      &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;operator&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;Equal&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;      &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;value&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;wasm32-wasi&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;      &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;effect&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;NoSchedule&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Let&amp;rsquo;s break this file down:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;apiVersion&lt;/code&gt;: which version of the Kubernetes API are we targeting?&lt;/li&gt;
&lt;li&gt;&lt;code&gt;kind&lt;/code&gt;: what type of workload are we deploying?&lt;/li&gt;
&lt;li&gt;&lt;code&gt;metadata.name&lt;/code&gt;: what is the name of our workload?&lt;/li&gt;
&lt;li&gt;&lt;code&gt;spec.containers[0].name&lt;/code&gt;: what should I name this module?&lt;/li&gt;
&lt;li&gt;&lt;code&gt;spec.containers[0].image&lt;/code&gt;: where can I find the module?&lt;/li&gt;
&lt;li&gt;&lt;code&gt;spec.imagePullSecrets[0].name&lt;/code&gt;: which name has the  image pull secret?&lt;/li&gt;
&lt;li&gt;&lt;code&gt;spec.tolerations&lt;/code&gt;: what kind of node am I allowed to run on?&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;To deploy this workload to Kubernetes, we use &lt;code&gt;kubectl&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-console&#34; data-lang=&#34;console&#34;&gt;$ kubectl create -f krustlet-tutorial.yaml
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Now that the workload has been scheduled, Krustlet should start spewing out some
logs in its terminal window, reporting updates on the workload that was
scheduled.&lt;/p&gt;
&lt;p&gt;We can check the status of our pod:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-console&#34; data-lang=&#34;console&#34;&gt;$ kubectl get pods
NAME                READY   STATUS    RESTARTS   AGE
krustlet-tutorial   1/1     Running   0          18s
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;We can also inspect the logs, too:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-console&#34; data-lang=&#34;console&#34;&gt;$ kubectl logs krustlet-tutorial
Hello, World!
Hello, World!
Hello, World!
Hello, World!
Hello, World!
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;cleanup&#34;&gt;Cleanup&lt;/h2&gt;
&lt;p&gt;Once you&amp;rsquo;re finished with this tutorial, you can destroy the cluster and the
registry.&lt;/p&gt;
&lt;p&gt;Destroying the cluster can be accomplished with:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-console&#34; data-lang=&#34;console&#34;&gt;$ kind delete cluster
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;And destroying the registry can be accomplished by removing the resource group.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-console&#34; data-lang=&#34;console&#34;&gt;$ az group delete --name myResourceGroup
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;This concludes the basic tutorial. Congratulations!&lt;/p&gt;
&lt;p&gt;If you are familiar with Krustlet and are interested in more in-depth topics,
check out the &lt;a href=&#34;../topics/README.md&#34;&gt;Topic Guides&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;You might also be scratching your head on what to &lt;a href=&#34;readnext.md&#34;&gt;read next&lt;/a&gt;.&lt;/p&gt;

      </description>
    </item>
    
  </channel>
</rss>
