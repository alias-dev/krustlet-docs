<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Krustlet – </title>
    <link>https://docs.krustlet.dev/en/</link>
    <description>Recent content on Krustlet</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    
	  <atom:link href="https://docs.krustlet.dev/en/index.xml" rel="self" type="application/rss+xml" />
    
    
      
        
      
    
    
    <item>
      <title>En: </title>
      <link>https://docs.krustlet.dev/en/community/code-of-conduct/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://docs.krustlet.dev/en/community/code-of-conduct/</guid>
      <description>
        
        
        &lt;h1 id=&#34;code-of-conduct&#34;&gt;Code of Conduct&lt;/h1&gt;
&lt;p&gt;This project has adopted the &lt;a href=&#34;https://opensource.microsoft.com/codeofconduct/&#34;&gt;Microsoft Open Source Code of
Conduct&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;For more information see the &lt;a href=&#34;https://opensource.microsoft.com/codeofconduct/faq/&#34;&gt;Code of Conduct
FAQ&lt;/a&gt; or contact
&lt;a href=&#34;mailto:opencode@microsoft.com&#34;&gt;opencode@microsoft.com&lt;/a&gt; with any additional
questions or comments.&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>En: </title>
      <link>https://docs.krustlet.dev/en/community/developers/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://docs.krustlet.dev/en/community/developers/</guid>
      <description>
        
        
        &lt;h1 id=&#34;developer-guide&#34;&gt;Developer guide&lt;/h1&gt;
&lt;p&gt;This guide explains how to set up your environment for developing Krustlet.&lt;/p&gt;
&lt;h2 id=&#34;prerequisites&#34;&gt;Prerequisites&lt;/h2&gt;
&lt;p&gt;To build krustlet, you will need&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The latest stable version of Rust&lt;/li&gt;
&lt;li&gt;The latest version of &lt;a href=&#34;https://github.com/casey/just&#34;&gt;just&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;openssl (Or use the &lt;a href=&#34;#building-without-openssl&#34;&gt;&lt;code&gt;rustls-tls&lt;/code&gt;&lt;/a&gt; feature)&lt;/li&gt;
&lt;li&gt;git&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you want to test krustlet, you will also require&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;A Kubernetes cluster&lt;/li&gt;
&lt;li&gt;The latest version of
&lt;a href=&#34;https://kubernetes.io/docs/tasks/tools/install-kubectl/&#34;&gt;kubectl&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you want to compile your own WebAssembly modules and upload them to a
registry, you&amp;rsquo;ll need &lt;a href=&#34;https://github.com/engineerd/wasm-to-oci&#34;&gt;wasm-to-oci&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;If you want to build the Docker image, you&amp;rsquo;ll need
&lt;a href=&#34;https://docs.docker.com/install/&#34;&gt;Docker&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&#34;building&#34;&gt;Building&lt;/h2&gt;
&lt;p&gt;We use &lt;code&gt;just&lt;/code&gt; to build our programs, but you can use &lt;code&gt;cargo&lt;/code&gt; if you want:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-console&#34; data-lang=&#34;console&#34;&gt;$ just build
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;building-without-openssl&#34;&gt;Building without openssl&lt;/h3&gt;
&lt;p&gt;If you are on a system that doesn&amp;rsquo;t have OpenSSL (or has the incorrect version),
you have the option to build Krustlet using the Rustls project (Rust native TLS
implementation):&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-console&#34; data-lang=&#34;console&#34;&gt;$ just build --no-default-features --features rustls-tls
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The same flags can be passed to &lt;code&gt;just run&lt;/code&gt; if you want to just &lt;a href=&#34;#running&#34;&gt;run&lt;/a&gt;
the project instead.&lt;/p&gt;
&lt;h4 id=&#34;caveats&#34;&gt;Caveats&lt;/h4&gt;
&lt;p&gt;The underlying dependencies for Rustls do not support certs with IP SANs
(subject alternate names). Because of this, the serving certs requested during
bootstrap will not work for local development options like minikube or KinD as
they do not have an FQDN&lt;/p&gt;
&lt;h3 id=&#34;building-on-wsl-windows-subsystem-for-linux&#34;&gt;Building on WSL (Windows Subsystem for Linux)&lt;/h3&gt;
&lt;p&gt;You can build Krustlet on WSL but will need a few prerequisites that aren&amp;rsquo;t
included in the Ubuntu distro in the Microsoft Store:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-console&#34; data-lang=&#34;console&#34;&gt;$ sudo apt install build-essential libssl-dev pkg-config
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; We&amp;rsquo;ve had mixed success developing Krustlet on WSL.  It has been
successfully run on WSL2 using the WSL2-enabled Docker Kubernetes or Azure
Kubernetes.  If you&amp;rsquo;re on WSL1 you may be better off running in a full Linux VM
under Hyper-V.&lt;/p&gt;
&lt;h3 id=&#34;building-on-windows&#34;&gt;Building on Windows&lt;/h3&gt;
&lt;p&gt;As of version 0.4, we have support for building on Windows. For convenience
sake, there is a windows version of the justfile called &lt;code&gt;justfile-windows&lt;/code&gt;. This
justfile uses PowerShell and has the proper flags set for Windows builds. To use
it, you&amp;rsquo;ll have to specify the justfile using the &lt;code&gt;--justfile&lt;/code&gt; flag like so:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-console&#34; data-lang=&#34;console&#34;&gt;$ just --justfile justfile-windows build
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;It has all the same targets as the normal justfile, however, the &lt;code&gt;test&lt;/code&gt; target
runs a little differently than the normal target due to how we use feature
flags. This means there will be some spurious warning output from &lt;code&gt;clippy&lt;/code&gt;, but
the tests will run.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; Windows builds use the &lt;code&gt;rustls&lt;/code&gt; library, which means there are some
things to be aware of. See the &lt;a href=&#34;#caveats&#34;&gt;caveats&lt;/a&gt; section for more details&lt;/p&gt;
&lt;h2 id=&#34;running&#34;&gt;Running&lt;/h2&gt;
&lt;p&gt;The default included runtime with Krustlet is &lt;code&gt;wasi&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;wasi&lt;/code&gt; runtime uses a project called
&lt;a href=&#34;https://github.com/bytecodealliance/wasmtime&#34;&gt;&lt;code&gt;wasmtime&lt;/code&gt;&lt;/a&gt;. wasmtime is a
standalone JIT-style host runtime for WebAssembly modules. It is focused
primarily on standards compliance with the WASM specification as it relates to
&lt;a href=&#34;https://wasi.dev/&#34;&gt;WASI&lt;/a&gt;. If your WebAssembly module complies with the
&lt;a href=&#34;https://github.com/WebAssembly/spec&#34;&gt;WebAssembly specification&lt;/a&gt;, wasmtime can
run it.&lt;/p&gt;
&lt;p&gt;Before startup, this command will delete any nodes in your Kubernetes cluster
named with your hostname, so make sure you&amp;rsquo;re running this in a test
environment.&lt;/p&gt;
&lt;p&gt;If you want to interact with the kubelet (for things like &lt;code&gt;kubectl logs&lt;/code&gt; and
&lt;code&gt;kubectl exec&lt;/code&gt;), you&amp;rsquo;ll likely need to set a specific KRUSTLET_NODE_IP that
krustlet will be available at. Otherwise, calls to the kubelet will result in
errors. This may differ from machine to machine. For example, with Minikube on a
Mac, you&amp;rsquo;ll have an interface called &lt;code&gt;bridge0&lt;/code&gt; which the cluster can talk to. So
your node IP should be that IP address.&lt;/p&gt;
&lt;p&gt;To set the node IP, run:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-console&#34; data-lang=&#34;console&#34;&gt;$ export KRUSTLET_NODE_IP=&amp;lt;the ip address&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;testing&#34;&gt;Testing&lt;/h2&gt;
&lt;p&gt;Krustlet contains both integration and unit tests. For convenience, there are
&lt;code&gt;just&lt;/code&gt; targets for running one or the other.&lt;/p&gt;
&lt;p&gt;For unit tests:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-console&#34; data-lang=&#34;console&#34;&gt;$ just test
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;For the integration tests, start a WASI node in a separate terminal before
running the tests.&lt;/p&gt;
&lt;p&gt;In terminal 1:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-console&#34; data-lang=&#34;console&#34;&gt;$ just run-wasi
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;And in terminal 2:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-console&#34; data-lang=&#34;console&#34;&gt;$ just test-e2e
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;You can run the integration tests without creating additional terminals or
manually running the kubelets by running:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-console&#34; data-lang=&#34;console&#34;&gt;$ just test-e2e-standalone
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;This:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Bootstraps and approves certificates if necessary&lt;/li&gt;
&lt;li&gt;Runs the WASI kubelet in the background&lt;/li&gt;
&lt;li&gt;Runs the integration tests&lt;/li&gt;
&lt;li&gt;Terminates the kubelets when the integration tests complete&lt;/li&gt;
&lt;li&gt;Reports test failures, and saves the kubelet logs if any tests failed&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;You &lt;strong&gt;will&lt;/strong&gt; still need to set &lt;code&gt;KRUSTLET_NODE_IP&lt;/code&gt; because the tester doesn&amp;rsquo;t
know what kind of Kubernetes cluster you&amp;rsquo;re using and so doesn&amp;rsquo;t know how to
infer a node IP.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;WARNING:&lt;/em&gt; The standalone integration tester has not been, er, tested on
Windows. Hashtag irony.&lt;/p&gt;
&lt;h3 id=&#34;integration-test-debris&#34;&gt;Integration test debris&lt;/h3&gt;
&lt;p&gt;There are some failure modes - for example image pull timeout - where the
integration tests are not able to complete cleanup of their resources.
Specifically you can sometimes get pods stuck in &lt;code&gt;Terminating&lt;/code&gt;, which prevents
namespace cleanup and causes the next test run to break.&lt;/p&gt;
&lt;p&gt;You can forcibly clean up such debris by running &lt;code&gt;cargo run --bin podsmiter&lt;/code&gt;.
You may need to wait a couple of minutes after pod deletion for the namespaces
to be collected.&lt;/p&gt;
&lt;h2 id=&#34;creating-your-own-kubelets-with-krustlet&#34;&gt;Creating your own Kubelets with Krustlet&lt;/h2&gt;
&lt;p&gt;If you want to create your own Kubelet based on Krustlet, all you need to do is
implement a &lt;code&gt;Provider&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;See &lt;code&gt;src/krustlet-wasi.rs&lt;/code&gt; and its corresponding provider implementation in
&lt;code&gt;crates/wasi-provider&lt;/code&gt; to get started.&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>En: </title>
      <link>https://docs.krustlet.dev/en/community/release-checklist/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://docs.krustlet.dev/en/community/release-checklist/</guid>
      <description>
        
        
        &lt;h1 id=&#34;release-checklist&#34;&gt;Release Checklist&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;If your experience deviates from this document, please document the changes to
keep it up-to-date.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;This guide will guide you (redundancy added for purposes of punnery) on your
journey to release a new version of Krustlet.&lt;/p&gt;
&lt;p&gt;All releases will be of the form &lt;code&gt;vX.Y.Z&lt;/code&gt; where &lt;code&gt;X&lt;/code&gt; is the major version number,
&lt;code&gt;Y&lt;/code&gt; is the minor version number and &lt;code&gt;Z&lt;/code&gt; is the patch release number. This
project strictly follows &lt;a href=&#34;https://semver.org/&#34;&gt;semantic versioning&lt;/a&gt; so following
this step is critical.&lt;/p&gt;
&lt;p&gt;It is important to note that this document assumes that the git remote in your
repository that corresponds to &lt;a href=&#34;https://github.com/deislabs/krustlet&#34;&gt;https://github.com/deislabs/krustlet&lt;/a&gt; is named
&lt;code&gt;upstream&lt;/code&gt;. If yours is not (for example, if you&amp;rsquo;ve chosen to name it &lt;code&gt;origin&lt;/code&gt;
or something similar instead), be sure to adjust the listed snippets for your
local environment accordingly.&lt;/p&gt;
&lt;p&gt;If you are not sure what your upstream remote is named, use a command like &lt;code&gt;git remote -v&lt;/code&gt; to find out.&lt;/p&gt;
&lt;p&gt;If you don&amp;rsquo;t have an upstream remote, you can add one easily using the following
command:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-console&#34; data-lang=&#34;console&#34;&gt;git remote add upstream git@github.com:deislabs/krustlet
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;We are also going to be adding security and verification of the release process
by providing signature files. We perform this using &lt;a href=&#34;https://help.github.com/en/github/authenticating-to-github/about-commit-signature-verification&#34;&gt;GitHub and
GPG&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;If you do not have GPG already setup you can follow these steps:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;https://gnupg.org&#34;&gt;Install the GNU privacy Guard (GPG)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://help.github.com/en/github/authenticating-to-github/generating-a-new-gpg-key&#34;&gt;Generate a new GPG
key&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://help.github.com/en/github/authenticating-to-github/adding-a-new-gpg-key-to-your-github-account&#34;&gt;Add your key to your GitHub
account&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://help.github.com/en/github/authenticating-to-github/telling-git-about-your-signing-key&#34;&gt;Set your signing key in
Git&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;step-0-determine-what-type-of-release-you-are-cutting&#34;&gt;Step 0: determine what type of release you are cutting&lt;/h2&gt;
&lt;p&gt;Major releases are for new feature additions and behavioral changes that break
backwards compatibility. Minor releases are for new feature additions that do
not break backwards compatibility. Patch releases are for bug fixes that do not
introduce any new features.&lt;/p&gt;
&lt;p&gt;There are two versions of the checklist: one for patch releases, and one for
major/minor releases. Follow the checklist that best applies below.&lt;/p&gt;
&lt;h2 id=&#34;checklist-for-major-and-minor-releases&#34;&gt;Checklist for major and minor releases&lt;/h2&gt;
&lt;p&gt;Follow this checklist if you are cutting a major release (vX.0.0) or a minor
release (vX.Y.0):&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;set up your environment&lt;/li&gt;
&lt;li&gt;increment the version number&lt;/li&gt;
&lt;li&gt;finalize the release and write the release notes&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;In this checklist, we are going to reference a few environment variables which
you will want to set for convenience.&lt;/p&gt;
&lt;p&gt;For major and minor releases, set the following environment variables, changing
the values of &lt;code&gt;$MAJOR_RELEASE_NUMBER&lt;/code&gt;, &lt;code&gt;$MINOR_RELEASE_NUMBER&lt;/code&gt;, and
&lt;code&gt;$RELEASE_CANDIDATE_NUMBER&lt;/code&gt; accordingly:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-console&#34; data-lang=&#34;console&#34;&gt;export MAJOR_RELEASE_NUMBER=&amp;quot;0&amp;quot;
export MINOR_RELEASE_NUMBER=&amp;quot;1&amp;quot;
export RELEASE_NAME=&amp;quot;v${MAJOR_RELEASE_NUMBER}.${MINOR_RELEASE_NUMBER}.0&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Now that we know we are going to cut a major or a minor release, we will need to
bump the project&amp;rsquo;s Cargo.toml as well as any crates that have been updated this
release.&lt;/p&gt;
&lt;p&gt;Open a new pull request against krustlet, bumping the version fields in
Cargo.toml:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/deislabs/krustlet/blob/master/Cargo.toml#L3&#34;&gt;https://github.com/deislabs/krustlet/blob/master/Cargo.toml#L3&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If applicable, in that same pull request, bump the version fields for the
&lt;code&gt;kubelet&lt;/code&gt; and &lt;code&gt;oci-distribution&lt;/code&gt; crates:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/deislabs/krustlet/blob/master/crates/kubelet/Cargo.toml#L3&#34;&gt;https://github.com/deislabs/krustlet/blob/master/crates/kubelet/Cargo.toml#L3&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/deislabs/krustlet/blob/master/crates/oci-distribution/Cargo.toml#L3&#34;&gt;https://github.com/deislabs/krustlet/blob/master/crates/oci-distribution/Cargo.toml#L3&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Use the following commands to create the commit:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-console&#34; data-lang=&#34;console&#34;&gt;git add .
git commit --gpg-sign -m &amp;quot;bump version to $RELEASE_NAME&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Wait until the pull request has been merged into master before proceeding.&lt;/p&gt;
&lt;p&gt;After the pull request has been merged, create a new tag from upstream&amp;rsquo;s
&lt;code&gt;master&lt;/code&gt; branch.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-console&#34; data-lang=&#34;console&#34;&gt;git fetch upstream master
git checkout upstream/master
git tag --sign --annotate &amp;quot;${RELEASE_NAME}&amp;quot; --message &amp;quot;Krustlet release ${RELEASE_NAME}&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Double-check one last time to make sure everything is in order, then finally
push the release tag.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-console&#34; data-lang=&#34;console&#34;&gt;git push upstream $RELEASE_NAME
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;It is usually more beneficial to the end-user if the release notes are
hand-written by a human being/marketing team/dog, so we&amp;rsquo;ll go ahead and write up
the release notes.&lt;/p&gt;
&lt;p&gt;If you&amp;rsquo;re releasing a major/minor release, listing notable user-facing features
is usually sufficient. For patch releases, do the same, but make note of the
symptoms causing the original issue, who may be affected, and how the patch
mitigates the issue.&lt;/p&gt;
&lt;p&gt;it should look like this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-markdown&#34; data-lang=&#34;markdown&#34;&gt;&lt;span style=&#34;color:#800080;font-weight:bold&#34;&gt;## Krustlet vX.Y.Z
&lt;/span&gt;&lt;span style=&#34;color:#800080;font-weight:bold&#34;&gt;&lt;/span&gt;
Krustlet vX.Y.Z is a feature release. This release, we focused on &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;insert&lt;/span&gt; &lt;span style=&#34;color:#c4a000&#34;&gt;focal&lt;/span&gt; &lt;span style=&#34;color:#c4a000&#34;&gt;point&lt;/span&gt; &lt;span style=&#34;color:#c4a000&#34;&gt;here&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;&amp;gt;&lt;/span&gt;. Users are encouraged to upgrade for the best experience.

&lt;span style=&#34;color:#800080;font-weight:bold&#34;&gt;## Notable features/changes
&lt;/span&gt;&lt;span style=&#34;color:#800080;font-weight:bold&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;-&lt;/span&gt; TLS bootstrapping support has been added
&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;-&lt;/span&gt; Improved error handling for the Kubelet API

&lt;span style=&#34;color:#800080;font-weight:bold&#34;&gt;## Breaking changes
&lt;/span&gt;&lt;span style=&#34;color:#800080;font-weight:bold&#34;&gt;&lt;/span&gt;
No known breaking changes were introduced this release.

&lt;span style=&#34;color:#800080;font-weight:bold&#34;&gt;## Known issues/missing features
&lt;/span&gt;&lt;span style=&#34;color:#800080;font-weight:bold&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;-&lt;/span&gt; Needs more cowbell
&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;-&lt;/span&gt; I gotta have more cowbell!

&lt;span style=&#34;color:#800080;font-weight:bold&#34;&gt;## Installation
&lt;/span&gt;&lt;span style=&#34;color:#800080;font-weight:bold&#34;&gt;&lt;/span&gt;
Download Krustlet vX.Y.Z:

&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;-&lt;/span&gt; [&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;checksums-vX.Y.Z.txt&lt;/span&gt;](&lt;span style=&#34;color:#c4a000&#34;&gt;https://krustlet.blob.core.windows.net/releases/checksums-vX.Y.Z.txt&lt;/span&gt;)
&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;-&lt;/span&gt; [&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;krustlet-vX.Y.Z-linux-amd64.tar.gz&lt;/span&gt;](&lt;span style=&#34;color:#c4a000&#34;&gt;https://krustlet.blob.core.windows.net/releases/krustlet-vX.Y.Z-linux-amd64.tar.gz&lt;/span&gt;)
&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;-&lt;/span&gt; [&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;krustlet-vX.Y.Z-macos-amd64.tar.gz&lt;/span&gt;](&lt;span style=&#34;color:#c4a000&#34;&gt;https://krustlet.blob.core.windows.net/releases/krustlet-vX.Y.Z-macos-amd64.tar.gz&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Feel free to bring in your own personality into the release notes; it&amp;rsquo;s nice for
people to think we&amp;rsquo;re not all robots. :)&lt;/p&gt;
&lt;p&gt;Double check the URLs are correct. Once finished, go into GitHub and edit the
release notes for the tagged release with the notes written here.&lt;/p&gt;
&lt;p&gt;It is now worth getting other people to take a look at the release notes before
the release is published. It is always beneficial as it can be easy to miss
something.&lt;/p&gt;
&lt;p&gt;For pre-v1.0 releases, make sure to check the checkbox that says &amp;ldquo;This is a
pre-release&amp;rdquo; to notify users that this release is identified as non-production
ready.&lt;/p&gt;
&lt;p&gt;When you are ready to go, hit &lt;code&gt;publish&lt;/code&gt;, and you&amp;rsquo;re done.&lt;/p&gt;
&lt;h2 id=&#34;checklist-for-patch-releases&#34;&gt;Checklist for patch releases&lt;/h2&gt;
&lt;p&gt;Follow this checklist if you are cutting a patch release (vX.Y.Z). The process
is largely the same as cutting a major/minor release, but with a few
differences.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;set up your environment&lt;/li&gt;
&lt;li&gt;increment the version number&lt;/li&gt;
&lt;li&gt;cherry-pick fixes&lt;/li&gt;
&lt;li&gt;finalize the release and write the release notes&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;In this checklist, we are going to reference a few environment variables which
you will want to set for convenience.&lt;/p&gt;
&lt;p&gt;For patch releases, set the following environment variables:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-console&#34; data-lang=&#34;console&#34;&gt;export MAJOR_RELEASE_NUMBER=&amp;quot;0&amp;quot;
export MINOR_RELEASE_NUMBER=&amp;quot;1&amp;quot;
export PATCH_RELEASE_NUMBER=&amp;quot;1&amp;quot;
export PREVIOUS_PATCH_RELEASE_NUMBER=&amp;quot;0&amp;quot;
export RELEASE_NAME=&amp;quot;v${MAJOR_RELEASE_NUMBER}.${MINOR_RELEASE_NUMBER}.${PATCH_RELEASE_NUMBER}&amp;quot;
export PREVIOUS_RELEASE_NAME=&amp;quot;v${MAJOR_RELEASE_NUMBER}.${MINOR_RELEASE_NUMBER}.${PREVIOUS_PATCH_RELEASE_NUMBER}&amp;quot;
export RELEASE_BRANCH_NAME=&amp;quot;release-${MAJOR_RELEASE_NUMBER}.${MINOR_RELEASE_NUMBER}.${PATCH_RELEASE_NUMBER}&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Now that we know we are going to cut a patch release, we will need to bump the
project&amp;rsquo;s Cargo.toml as well as any crates that have been updated this release.&lt;/p&gt;
&lt;p&gt;Open a new pull request against krustlet, bumping the version fields in
Cargo.toml:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/deislabs/krustlet/blob/master/Cargo.toml#L3&#34;&gt;https://github.com/deislabs/krustlet/blob/master/Cargo.toml#L3&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If applicable, in that same pull request, bump the version fields for the
&lt;code&gt;kubelet&lt;/code&gt; and &lt;code&gt;oci-distribution&lt;/code&gt; crates:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/deislabs/krustlet/blob/master/crates/kubelet/Cargo.toml#L3&#34;&gt;https://github.com/deislabs/krustlet/blob/master/crates/kubelet/Cargo.toml#L3&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/deislabs/krustlet/blob/master/crates/oci-distribution/Cargo.toml#L3&#34;&gt;https://github.com/deislabs/krustlet/blob/master/crates/oci-distribution/Cargo.toml#L3&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Use the following commands to create the commit:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-console&#34; data-lang=&#34;console&#34;&gt;git add .
git commit --gpg-sign -m &amp;quot;bump version to $RELEASE_NAME&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Wait until the pull request has been merged into &lt;code&gt;master&lt;/code&gt; before proceeding.&lt;/p&gt;
&lt;p&gt;After the pull request has been merged, checkout the previous tag from upstream
and use it to create a new branch:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-console&#34; data-lang=&#34;console&#34;&gt;git fetch upstream --tags
git checkout $PREVIOUS_RELEASE_NAME
git checkout -b $RELEASE_BRANCH_NAME
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Once that&amp;rsquo;s done, make sure to cherry-pick the fixes as well as the version bump
from the previous step into this branch:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-console&#34; data-lang=&#34;console&#34;&gt;git cherry-pick -x &amp;lt;commit_id&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;If anyone is available, let others peer-review the branch before continuing to
ensure that all the proper fixes have been merged into the release branch.&lt;/p&gt;
&lt;p&gt;When you&amp;rsquo;re finally happy with the quality of the release branch, you can move
on and create the tag. Double-check one last time to make sure everything is in
order, then finally push the release tag.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-console&#34; data-lang=&#34;console&#34;&gt;git tag --sign --annotate &amp;quot;${RELEASE_NAME}&amp;quot; --message &amp;quot;Krustlet release ${RELEASE_NAME}&amp;quot;
git push upstream $RELEASE_NAME
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;It is usually more beneficial to the end-user if the release notes are
hand-written by a human being/marketing team/dog, so we&amp;rsquo;ll go ahead and write up
the release notes.&lt;/p&gt;
&lt;p&gt;For patch releases, make note of the symptoms causing the original issue(s), who
may be affected, and how the patch(es) mitigate the issue(s).&lt;/p&gt;
&lt;p&gt;it should look like this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-markdown&#34; data-lang=&#34;markdown&#34;&gt;&lt;span style=&#34;color:#800080;font-weight:bold&#34;&gt;## Krustlet vX.Y.Z
&lt;/span&gt;&lt;span style=&#34;color:#800080;font-weight:bold&#34;&gt;&lt;/span&gt;
Krustlet vX.Y.Z is a patch release, fixing an issue where &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;insert&lt;/span&gt; &lt;span style=&#34;color:#c4a000&#34;&gt;disagnosis&lt;/span&gt; &lt;span style=&#34;color:#c4a000&#34;&gt;of&lt;/span&gt; &lt;span style=&#34;color:#c4a000&#34;&gt;issue&lt;/span&gt; &lt;span style=&#34;color:#c4a000&#34;&gt;here&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;&amp;gt;&lt;/span&gt;.

This patch fixes this issue by &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;insert&lt;/span&gt; &lt;span style=&#34;color:#c4a000&#34;&gt;remedy&lt;/span&gt; &lt;span style=&#34;color:#c4a000&#34;&gt;here&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;&amp;gt;&lt;/span&gt;.

Users are encouraged to upgrade for the best experience.

&lt;span style=&#34;color:#800080;font-weight:bold&#34;&gt;## Breaking changes
&lt;/span&gt;&lt;span style=&#34;color:#800080;font-weight:bold&#34;&gt;&lt;/span&gt;
No known breaking changes were introduced this release.

&lt;span style=&#34;color:#800080;font-weight:bold&#34;&gt;## Installation
&lt;/span&gt;&lt;span style=&#34;color:#800080;font-weight:bold&#34;&gt;&lt;/span&gt;
Download Krustlet vX.Y.Z:

&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;-&lt;/span&gt; [&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;checksums-vX.Y.Z.txt&lt;/span&gt;](&lt;span style=&#34;color:#c4a000&#34;&gt;https://krustlet.blob.core.windows.net/releases/checksums-vX.Y.Z.txt&lt;/span&gt;)
&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;-&lt;/span&gt; [&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;krustlet-vX.Y.Z-linux-amd64.tar.gz&lt;/span&gt;](&lt;span style=&#34;color:#c4a000&#34;&gt;https://krustlet.blob.core.windows.net/releases/krustlet-vX.Y.Z-linux-amd64.tar.gz&lt;/span&gt;)
&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;-&lt;/span&gt; [&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;krustlet-vX.Y.Z-macos-amd64.tar.gz&lt;/span&gt;](&lt;span style=&#34;color:#c4a000&#34;&gt;https://krustlet.blob.core.windows.net/releases/krustlet-vX.Y.Z-macos-amd64.tar.gz&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Double check the URLs are correct. Once finished, go into GitHub and edit the
release notes for the tagged release with the notes written here.&lt;/p&gt;
&lt;p&gt;It is now worth getting other people to take a look at the release notes before
the release is published. It is always beneficial as it can be easy to miss
something.&lt;/p&gt;
&lt;p&gt;For pre-v1.0 releases, make sure to check the checkbox that says &amp;ldquo;This is a
pre-release&amp;rdquo; to notify users that this release is identified as non-production
ready.&lt;/p&gt;
&lt;p&gt;When you are ready to go, hit &lt;code&gt;publish&lt;/code&gt;, and you&amp;rsquo;re done.&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>En: </title>
      <link>https://docs.krustlet.dev/en/howto/bootstrapping/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://docs.krustlet.dev/en/howto/bootstrapping/</guid>
      <description>
        
        
        &lt;h1 id=&#34;bootstrapping-krustlet&#34;&gt;Bootstrapping Krustlet&lt;/h1&gt;
&lt;p&gt;As of version 0.3.0, Krustlet supports automatic bootstrapping of its
authorization and serving certificates. This document describes how the
functionality works.&lt;/p&gt;
&lt;h2 id=&#34;initialization&#34;&gt;Initialization&lt;/h2&gt;
&lt;p&gt;Krustlet follows the same &lt;a href=&#34;https://kubernetes.io/docs/reference/command-line-tools-reference/kubelet-tls-bootstrapping/#initialization-process&#34;&gt;initialization
flow&lt;/a&gt;
as Kubelet (with the exception of automatic renewal of certs that are close to
expiry).&lt;/p&gt;
&lt;h2 id=&#34;instructions&#34;&gt;Instructions&lt;/h2&gt;
&lt;p&gt;In order to join a cluster with the proper permissions, Krustlet requires a
valid bootstrap config with a valid bootstrap token. This token can be generated
with
&lt;a href=&#34;https://kubernetes.io/docs/setup/production-environment/tools/kubeadm/install-kubeadm/&#34;&gt;&lt;code&gt;kubeadm&lt;/code&gt;&lt;/a&gt;
or may already exist depending on your provider. However, in this case, we will
be using an easier method for creating a join token. Either way, the examples
here should be useful for figuring out how to do it differently depending on
your setup.&lt;/p&gt;
&lt;h3 id=&#34;prerequisites&#34;&gt;Prerequisites&lt;/h3&gt;
&lt;p&gt;You will need &lt;code&gt;kubectl&lt;/code&gt;
&lt;a href=&#34;https://kubernetes.io/docs/tasks/tools/install-kubectl/&#34;&gt;installed&lt;/a&gt; and a
kubeconfig that has access to create &lt;code&gt;Secrets&lt;/code&gt; in the &lt;code&gt;kube-system&lt;/code&gt; namespace
and can approve &lt;code&gt;CertificateSigningRequests&lt;/code&gt;.&lt;/p&gt;
&lt;h3 id=&#34;generating-a-token-and-kubeconfig&#34;&gt;Generating a token and kubeconfig&lt;/h3&gt;
&lt;p&gt;We have a useful bootstrapping &lt;a href=&#34;./assets/bootstrap.sh&#34;&gt;bash script&lt;/a&gt; or
&lt;a href=&#34;./assets/bootstrap.sh&#34;&gt;Powershell script&lt;/a&gt; that can be used for generating a
token and creating a bootstrap kubeconfig file. If you have cloned the repo, you
can run:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-console&#34; data-lang=&#34;console&#34;&gt;$ ./docs/howto/assets/bootstrap.sh
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;OR&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-console&#34; data-lang=&#34;console&#34;&gt;$ .\docs\howto\assets\bootstrap.ps1
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;If you are the trusting sort, you can pipe it in from the internet:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-console&#34; data-lang=&#34;console&#34;&gt;$ bash &amp;lt;(curl https://raw.githubusercontent.com/deislabs/krustlet/master/docs/howto/assets/bootstrap.sh)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;OR&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-powershell&#34; data-lang=&#34;powershell&#34;&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#204a87&#34;&gt;Invoke-WebRequest&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;-UseBasicParsing&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;https&lt;/span&gt;&lt;span style=&#34;color:#a40000&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;//&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;raw&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;githubusercontent&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;com&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;deislabs&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;krustlet&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;master&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;docs&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;howto&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;assets&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;bootstrap&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;ps1&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;).&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;Content&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#204a87&#34;&gt;Invoke-Expression&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This will output a ready-to-use bootstrap config to
&lt;code&gt;$HOME/.krustlet/config/bootstrap.conf&lt;/code&gt;&lt;/p&gt;
&lt;h4 id=&#34;script-configuration&#34;&gt;Script configuration&lt;/h4&gt;
&lt;p&gt;The script also exposes a few configuration options by means of environment
variables. These are detailed in the table below:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Name&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;th&gt;Default&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;CONFIG_DIR&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;The location of your configuration directory for Krustlet. Should be the same as &lt;code&gt;$KRUSTLET_DATA_DIR/config&lt;/code&gt; where the &lt;code&gt;KRUSTLET_DATA_DIR&lt;/code&gt; setting is the same one you use for configuring Krustlet&lt;/td&gt;
&lt;td&gt;&lt;code&gt;$HOME/.krustlet/config&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;FILE_NAME&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;The name of the file the bootstrap config should be saved to&lt;/td&gt;
&lt;td&gt;&lt;code&gt;bootstrap.conf&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h4 id=&#34;nitty-gritty-details&#34;&gt;Nitty-gritty details&lt;/h4&gt;
&lt;p&gt;This section contains an overview of the nitty-gritty details for those who may
be constructing their own bootstrapping setup. Feel free to skip this section if
it doesn&amp;rsquo;t pertain to you.&lt;/p&gt;
&lt;h5 id=&#34;bootstrap-tokens&#34;&gt;Bootstrap tokens&lt;/h5&gt;
&lt;p&gt;A bootstrap token has the format of &lt;code&gt;[a-z0-9]{6}.[a-z0-9]{16}&lt;/code&gt; where the first
part is a randomly generated token id and the second part after the &lt;code&gt;.&lt;/code&gt; needs to
be a cryptographically secure random string. The token will look something like
this: &lt;code&gt;ke3uxh.vhxb3ttj1nquno5t&lt;/code&gt;. That means you can generate a token with a
simple bash command like so:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-console&#34; data-lang=&#34;console&#34;&gt;$ echo &amp;quot;$(&amp;lt; /dev/urandom tr -dc a-z0-9 | head -c${1:-6};echo;).$(&amp;lt; /dev/urandom tr -dc a-z0-9 | head -c${1:-16};echo;)&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;h5 id=&#34;creating-the-secret&#34;&gt;Creating the secret&lt;/h5&gt;
&lt;p&gt;To actually &amp;ldquo;create&amp;rdquo; the bootstrap token, it needs to be placed in a &lt;code&gt;Secret&lt;/code&gt; in
the &lt;code&gt;kube-system&lt;/code&gt; namespace. The name of the secret should be
&lt;code&gt;bootstrap-token-&amp;lt;token_id&amp;gt;&lt;/code&gt;. Specifically, the secret should look something
like this when you send it to the API:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;apiVersion&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;v1&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;kind&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;Secret&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;metadata&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;name&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;bootstrap-token-&amp;lt;token_id&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;namespace&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;kube-system&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;type&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;bootstrap.kubernetes.io/token&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;stringData&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;auth-extra-groups&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;system:bootstrappers:kubeadm:default-node-token&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;expiration&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;2020-06-04T20:07:24Z&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;token-id&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;&amp;lt;token_id&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;token-secret&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;&amp;lt;token_secret&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;usage-bootstrap-authentication&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;true&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;usage-bootstrap-signing&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;true&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The main fields you need to set are &lt;code&gt;token-id&lt;/code&gt;, &lt;code&gt;token-secret&lt;/code&gt;, and
&lt;code&gt;expiration&lt;/code&gt;.&lt;/p&gt;
&lt;h5 id=&#34;generating-the-kubeconfig&#34;&gt;Generating the Kubeconfig&lt;/h5&gt;
&lt;p&gt;Once you have a &lt;code&gt;Secret&lt;/code&gt; created, you then have to generate the Kubeconfig. To
do so, you&amp;rsquo;ll need several pieces of information:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The CA cert for your Kubernetes API. This should be available from the
kubeconfig you are currently using&lt;/li&gt;
&lt;li&gt;The server hostname or IP address&lt;/li&gt;
&lt;li&gt;The generated bootstrap token&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;You can either assemble a kubeconfig by hand or use similar steps to what is
found in the &lt;a href=&#34;./assets/bootstrap.sh&#34;&gt;bootstrap script&lt;/a&gt;&lt;/p&gt;
&lt;h5 id=&#34;an-example-bootstrap-config&#34;&gt;An example bootstrap config&lt;/h5&gt;
&lt;p&gt;This is an example of a bootstrap config file for reference if creating your own
workflow&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;apiVersion&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;v1&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;clusters&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;&lt;/span&gt;- &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;cluster&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;certificate-authority-data&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUM1ekNDQWMrZ0F3SUJBZ0lCQVRBTkJna3Foa2lHOXcwQkFRc0ZBREFWTVJNd0VRWURWUVFERXdwdGFXNXAKYTNWaVpVTkJNQjRYRFRFNE1EUXlOREF3TVRVME9Wb1hEVEk0TURReU1UQXdNVFUwT1Zvd0ZURVRNQkVHQTFVRQpBeE1LYldsdWFXdDFZbVZEUVRDQ0FTSXdEUVlKS29aSWh2Y05BUUVCQlFBRGdnRVBBRENDQVFvQ2dnRUJBS1lxCnhzMllBNzRETlFQTVZkbFJ3aXZFWnIwd0lTUHlQZjkzR3ZsUVNKMDQrbFgxSEF3Yi9GM3dqcDVEckVOSDAraTUKbjhZUy9QK3JlNUpqVU9tV1VmMXNtMmVLNHNRNHpNS01kMHc5by9ERlozTHc3K1h6RzMveTdvMkF4SWVlYjBPdgpzbzhwWUVOMklzRUcrRFhpa0l0MjhPZ1RtZGRhTVg1OWJQTXhGL0l6T1FPVmFEYmtnMk5ScWtjYW9CR0FTT2JkCkVId2hrVGdMYXZCNzVnVmRTVVlWUFU1M2dXc3hDQWVBYzNCaW9NekNLNmFFUXIrMDB4V3dEWkR4amxLYU02V3gKTWFQN0JmY0Y5K2U3OUt0Tkc3TXZMWG9xdFJ3cCtPdWREaTlKWHRLS1NNbVo3TFNubEY4UDdHUlhKL2IzNS9NVQpvQklkK1ZKNHpoak5zT2xKM3g4Q0F3RUFBYU5DTUVBd0RnWURWUjBQQVFIL0JBUURBZ0trTUIwR0ExVWRKUVFXCk1CUUdDQ3NHQVFVRkJ3TUNCZ2dyQmdFRkJRY0RBVEFQQmdOVkhSTUJBZjhFQlRBREFRSC9NQTBHQ1NxR1NJYjMKRFFFQkN3VUFBNElCQVFDWmM0SVpST3pnNS91eDdNa0Y3NmVja3dZekY4OUJiejRhRENVS3ByWUMxTDFvZVBVawpXdFc3VENWditDMDJRc2tGRnpTbGhlQUpYeXp5Q2xKMVE5VmUyUmR2bGtiZHVPTXpJeXZTS0xaZHVDT2pvVWNZCjkrMTN1UEFpaXJjNUpRZlBOTGdJcUdhbTB2ZXpqZEtROHNUK0o0WmRyNHdFOUZKQnhOeUhob0xQdjBLRENBbkcKWFlPZW5lTHdjcnJCcTVDTERRN2dIelZGbEFKVU1nSWF3ZzdtcG1HVi9KRlVlYnRpam1Cd1p1WDBNMTFpVHBqYQpNaUhDRkJOREd5a2locDBoSHdDV1ZId0ZXNHVLUWxUZjRBK2hieC9OTUkzbHhBYXozMFZKN3U1Mm1GR3pCQ0dvCmt3VjdKS2RJMEd1MGJQQmlUSDRMTmE4bWxqYmZkRnhsc2k4cAotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg==&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;server&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;https://192.168.64.19:8443&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;name&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;minikube&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;contexts&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;&lt;/span&gt;- &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;context&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;cluster&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;minikube&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;namespace&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;kube-system&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;user&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;tls-bootstrap-token-user&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;name&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;tls-bootstrap-token-user@kubernetes&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;current-context&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;tls-bootstrap-token-user@kubernetes&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;kind&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;Config&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;preferences&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;{}&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;users&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;&lt;/span&gt;- &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;name&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;tls-bootstrap-token-user&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;user&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;token&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;ke3uxh.vhxb3ttj1nquno5t&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;running-krustlet&#34;&gt;Running Krustlet&lt;/h3&gt;
&lt;p&gt;Once you have the bootstrap config in place, you can run Krustlet:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-console&#34; data-lang=&#34;console&#34;&gt;$ KUBECONFIG=~/.krustlet/config/kubeconfig krustlet-wasi --port 3000 --bootstrap-file /path/to/your/bootstrap.conf
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Krustlet will begin the bootstrapping process, and then &lt;strong&gt;await manual
certificate approval&lt;/strong&gt; (described below) before launching.&lt;/p&gt;
&lt;p&gt;A couple important notes here. &lt;code&gt;KUBECONFIG&lt;/code&gt; should almost always be set,
especially in developer/local machine situations. During the bootstrap process,
Krustlet will generate a kubeconfig with the credentials it obtains during the
bootstrapping process and write it out to the specified location in
&lt;code&gt;KUBECONFIG&lt;/code&gt;. If a kubeconfig already exists there, it will be loaded and skip
the bootstrapping process. A similar process occurs during the bootstrapping of
the serving certificates, they will be written out to the paths specified by
&lt;code&gt;--cert-file&lt;/code&gt; (default &lt;code&gt;$KRUSTLET_DATA_DIR/config/krustlet.crt&lt;/code&gt;) and
&lt;code&gt;--private-key-file&lt;/code&gt; (default &lt;code&gt;$KRUSTLET_DATA_DIR/config/krustlet.key&lt;/code&gt;). If they
already exist, then they will be loaded and bootstrapping skipped.&lt;/p&gt;
&lt;h3 id=&#34;approving-the-serving-csr&#34;&gt;Approving the serving CSR&lt;/h3&gt;
&lt;p&gt;Once you have started Krustlet, there is one more manual step (though this could
be automated depending on your setup). The client certs Krustlet needs are
generally approved automatically by the API. However, the serving certs require
manual approval. To do this, you&amp;rsquo;ll need the hostname you specified for the
&lt;code&gt;--hostname&lt;/code&gt; flag or the output of &lt;code&gt;hostname&lt;/code&gt; if you didn&amp;rsquo;t specify anything.
Then run:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-console&#34; data-lang=&#34;console&#34;&gt;$ kubectl certificate approve &amp;lt;hostname&amp;gt;-tls
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Once you do this, Krustlet will automatically grab the new certs and start
running.&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>En: </title>
      <link>https://docs.krustlet.dev/en/howto/csi/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://docs.krustlet.dev/en/howto/csi/</guid>
      <description>
        
        
        &lt;h1 id=&#34;registering-a-csi-driver&#34;&gt;Registering a CSI Driver&lt;/h1&gt;
&lt;p&gt;For more information on what is the Container Storage Interface and how it
relates to a CSI driver, see the &lt;a href=&#34;../topics/csi.md&#34;&gt;topic guide&lt;/a&gt; for more
information.&lt;/p&gt;
&lt;p&gt;A Krustlet Provider with CSI support will check for new drivers registered to
the &lt;code&gt;plugins/&lt;/code&gt; directory (by default, this is &lt;code&gt;$HOME/.krustlet/plugins&lt;/code&gt;). You
will need to inform your CSI driver to bind its socket at that location in order
for a Provider to recognize and register the driver.&lt;/p&gt;
&lt;p&gt;You will also need to install and run the following projects so that the
PersistentVolumeClaim&amp;rsquo;s volume will be provisioned and readily available for
use:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/kubernetes-csi/node-driver-registrar&#34;&gt;node-driver-registrar&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/kubernetes-csi/external-provisioner&#34;&gt;external-provisioner&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Do keep in mind that some CSI drivers rely on linux-specific command line
tooling like &lt;code&gt;mount&lt;/code&gt;, so these tools may only work on Linux. Cross-platform
support is not guaranteed. Refer to the driver&amp;rsquo;s documentation for more
information.&lt;/p&gt;
&lt;h2 id=&#34;how-do-i-use-a-csi-volume&#34;&gt;How do I use a CSI Volume?&lt;/h2&gt;
&lt;p&gt;Assuming a CSI storage plugin is already deployed on your cluster, you can use
it through familiar Kubernetes storage primitives: PersistentVolumeClaims,
PersistentVolumes, and StorageClasses.&lt;/p&gt;
&lt;p&gt;A basic example to start with would be the &lt;a href=&#34;https://github.com/kubernetes-csi/csi-driver-host-path&#34;&gt;host-path CSI
driver&lt;/a&gt;. This project is
not recommended for use in production, but will work as an example.&lt;/p&gt;
&lt;p&gt;To start, we&amp;rsquo;ll need to create a StorageClass. A StorageClass provides a way for
administrators to describe the &amp;ldquo;classes&amp;rdquo; of storage they offer. Different
classes might map to quality-of-service levels, or to backup policies, or to
arbitrary policies determined by the cluster administrators. Kubernetes itself
is unopinionated about what classes represent. This concept is sometimes called
&amp;ldquo;profiles&amp;rdquo; in other storage systems.&lt;/p&gt;
&lt;p&gt;The following StorageClass enables dynamic creation of &amp;ldquo;csi-hostpath-sc&amp;rdquo; volumes
by a CSI volume plugin called &amp;ldquo;hostpath.csi.k8s.io&amp;rdquo;. This storage class will
also allow for &lt;a href=&#34;https://github.com/kubernetes-csi/external-resizer&#34;&gt;volume
expansion&lt;/a&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;apiVersion&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;storage.k8s.io/v1&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;kind&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;StorageClass&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;metadata&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;name&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;csi-hostpath-sc&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;provisioner&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;hostpath.csi.k8s.io&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;reclaimPolicy&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;Delete&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;volumeBindingMode&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;Immediate&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;allowVolumeExpansion&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;true&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;After installing a StorageClass, we can start creating PersistentVolumeClaims to
provision and prepare volumes. These will be mounted to Kubernetes Pods that
request it as a volume. Note how the PVC requests the same StorageClass we
created earlier.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;apiVersion&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;v1&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;kind&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;PersistentVolumeClaim&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;metadata&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;name&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;csi-pvc&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;spec&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;accessModes&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;  &lt;/span&gt;- &lt;span style=&#34;color:#000&#34;&gt;ReadWriteOnce&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;resources&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;requests&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;      &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;storage&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;1Gi&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;storageClassName&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;csi-hostpath-sc&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;A Pod can then request that volume to be mounted by using the &lt;code&gt;volumes&lt;/code&gt; API.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;kind&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;Pod&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;apiVersion&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;v1&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;metadata&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;name&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;my-frontend&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;spec&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;containers&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;    &lt;/span&gt;- &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;name&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;my-frontend&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;      &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;image&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;example.com/my-frontend:v1.0.0&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;      &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;volumeMounts&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;      &lt;/span&gt;- &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;mountPath&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;/data&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;        &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;name&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;my-csi-volume&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;volumes&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;    &lt;/span&gt;- &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;name&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;my-csi-volume&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;      &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;persistentVolumeClaim&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;        &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;claimName&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;csi-pvc&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;When the pod referencing a CSI volume is scheduled, Krustlet will trigger the
appropriate operations against the external CSI plugin (ControllerPublishVolume,
NodePublishVolume, etc.) to ensure the specified volume is attached, mounted,
and ready to use by the containers in the pod.&lt;/p&gt;
&lt;h2 id=&#34;addendum-role-based-access-control&#34;&gt;Addendum: Role-based Access Control&lt;/h2&gt;
&lt;p&gt;In the event that the Pod is erroring saying that the kubelet doesn&amp;rsquo;t have the
correct admission controls to access storage classes, you&amp;rsquo;ll have to create the
following cluster role and role binding to allow the &lt;code&gt;system:nodes&lt;/code&gt; group to
access them:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;apiVersion&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;rbac.authorization.k8s.io/v1&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;kind&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;ClusterRole&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;metadata&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;name&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;storageclass-reader&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;rules&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;  &lt;/span&gt;- &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;apiGroups&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;storage.k8s.io&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;]&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;resources&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;storageclasses&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;]&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;verbs&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;get&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;watch&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;list&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;]&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;---&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;apiVersion&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;rbac.authorization.k8s.io/v1&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;kind&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;ClusterRoleBinding&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;metadata&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;name&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;node-storageclass-reader&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;subjects&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;  &lt;/span&gt;- &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;kind&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;Group&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;name&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;system:nodes&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;apiGroup&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;rbac.authorization.k8s.io&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;roleRef&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;apiGroup&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;rbac.authorization.k8s.io&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;kind&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;ClusterRole&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;name&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;storageclass-reader&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
      </description>
    </item>
    
    <item>
      <title>En: </title>
      <link>https://docs.krustlet.dev/en/howto/krustlet-on-azure/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://docs.krustlet.dev/en/howto/krustlet-on-azure/</guid>
      <description>
        
        
        &lt;h1 id=&#34;running-krustlet-on-azure&#34;&gt;Running Krustlet on Azure&lt;/h1&gt;
&lt;p&gt;This guide demonstrates how to run Krustlet on Azure.&lt;/p&gt;
&lt;h2 id=&#34;prerequisites&#34;&gt;Prerequisites&lt;/h2&gt;
&lt;p&gt;This guide will require both &lt;a href=&#34;https://docs.microsoft.com/en-us/cli/azure/install-azure-cli&#34;&gt;the Azure
CLI&lt;/a&gt; as well as
&lt;code&gt;kubectl&lt;/code&gt; to connect to the cluster after it has been provisioned.&lt;/p&gt;
&lt;p&gt;This specific tutorial will run Krustlet on another Azure Virtual Machine within
the same Virtual Network as the Kubernetes cluster.&lt;/p&gt;
&lt;h2 id=&#34;step-1-creating-a-service-principal&#34;&gt;Step 1: Creating a Service Principal&lt;/h2&gt;
&lt;p&gt;Prior to deploying Krustlet, a Service Principal needs to exist.&lt;/p&gt;
&lt;p&gt;The following Azure CLI command can be used to create a Service Principal. Make
sure to change &lt;code&gt;ServicePrincipalName&lt;/code&gt; with your own unique name for a Service
Principal.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;$ az ad sp create-for-rbac --name ServicePrincipalName --skip-assignment
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The output for a service principal with password authentication includes the
password key. Make sure you copy this value - it can&amp;rsquo;t be retrieved. If you
forget the password, &lt;a href=&#34;https://docs.microsoft.com/en-us/cli/azure/create-an-azure-service-principal-azure-cli#reset-credentials&#34;&gt;reset the service principal
credentials&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The ID and password appears in the output of &lt;code&gt;az ad sp create-for-rbac&lt;/code&gt; and are
used in the ARM template&amp;rsquo;s parameters. Make sure to record their values for
later use.&lt;/p&gt;
&lt;h2 id=&#34;step-2-generate-an-ssh-key&#34;&gt;Step 2: Generate an SSH Key&lt;/h2&gt;
&lt;p&gt;You will also need to generate an SSH key. This will be used to SSH into the
machines for debugging purposes&amp;hellip; Or if you&amp;rsquo;re just curious and want to see
&lt;a href=&#34;https://en.wiktionary.org/wiki/how_the_sausage_gets_made&#34;&gt;how the sausage is
made&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Follow the guide on Github to &lt;a href=&#34;https://docs.github.com/en/free-pro-team@latest/github/authenticating-to-github/generating-a-new-ssh-key-and-adding-it-to-the-ssh-agent&#34;&gt;generate a new SSH
key&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&#34;step-3-click-the-button&#34;&gt;Step 3: Click the Button&lt;/h2&gt;
&lt;p&gt;Go ahead. Click the button.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://portal.azure.com/#create/Microsoft.Template/uri/https%3A%2F%2Fraw.githubusercontent.com%2Fdeislabs%2Fkrustlet%2Fmaster%2Fcontrib%2Fazure%2Fazuredeploy.json&#34;&gt;&lt;img src=&#34;https://aka.ms/deploytoazurebutton&#34; alt=&#34;Deploy ToAzure&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Copy the content of your public key and paste it into the &amp;ldquo;SSH Public Key&amp;rdquo;
parameter. Also make sure to copy and paste the content of your Service
Principal&amp;rsquo;s client ID (&lt;code&gt;appID&lt;/code&gt;) and password into the parameters.&lt;/p&gt;
&lt;h2 id=&#34;step-3b-troubleshooting&#34;&gt;Step 3(b): Troubleshooting&lt;/h2&gt;
&lt;p&gt;In case the deployment fails, inspect the raw error message Azure reports from
the failed deployment. The deployment could fail due to a name collision, and
the raw error logs could help determine what went wrong.&lt;/p&gt;
&lt;h2 id=&#34;step-4-test-that-things-work&#34;&gt;Step 4: Test that things work&lt;/h2&gt;
&lt;p&gt;Once the cluster has been deployed, now you can see things work! Connect to the
cluster and feel free to give any of the demos a try like so:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;$ az aks get-credentials --name krustlet --resource-group my-resource-group
$ kubectl apply -f demos/wasi/hello-world-rust/k8s.yaml
&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;# wait a few seconds for the pod to run&lt;/span&gt;
$ kubectl logs hello-world-wasi-rust
hello from stdout!
hello from stderr!
&lt;span style=&#34;color:#000&#34;&gt;CONFIG_MAP_VAL&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt;cool stuff
&lt;span style=&#34;color:#000&#34;&gt;FOO&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt;bar
&lt;span style=&#34;color:#000&#34;&gt;POD_NAME&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt;hello-world-wasi-rust
Args are: &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;[]&lt;/span&gt;

Bacon ipsum dolor amet chuck turducken porchetta, tri-tip spare ribs t-bone ham hock. Meatloaf
pork belly leberkas, ham beef pig corned beef boudin ground round meatball alcatra jerky.
Pancetta brisket pastrami, flank pork chop ball tip short loin burgdoggen. Tri-tip kevin
shoulder cow andouille. Prosciutto chislic cupim, short ribs venison jerky beef ribs ham hock
short loin fatback. Bresaola meatloaf capicola pancetta, prosciutto chicken landjaeger andouille
swine kielbasa drumstick cupim tenderloin chuck shank. Flank jowl leberkas turducken ham tongue
beef ribs shankle meatloaf drumstick pork t-bone frankfurter tri-tip.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;step-5-tear-it-down&#34;&gt;Step 5: Tear it down&lt;/h2&gt;
&lt;p&gt;After you&amp;rsquo;re done testing, delete the cluster with&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-console&#34; data-lang=&#34;console&#34;&gt;$ az group delete -n my-resource-group
&lt;/code&gt;&lt;/pre&gt;
      </description>
    </item>
    
    <item>
      <title>En: </title>
      <link>https://docs.krustlet.dev/en/howto/krustlet-on-do/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://docs.krustlet.dev/en/howto/krustlet-on-do/</guid>
      <description>
        
        
        &lt;h1 id=&#34;running-krustlet-on-managed-kubernetes-on-digitalocean&#34;&gt;Running Krustlet on Managed Kubernetes on DigitalOcean&lt;/h1&gt;
&lt;p&gt;These steps are for running a Krustlet node on a DigitalOcean Droplet in a
Managed Kubernetes DigitalOcean cluster.&lt;/p&gt;
&lt;h2 id=&#34;prerequisites&#34;&gt;Prerequisites&lt;/h2&gt;
&lt;p&gt;You will require a Managed Kubernetes on DigitalOcean cluster. See the &lt;a href=&#34;kubernetes-on-do.md&#34;&gt;how-to
guide for running Managed Kubernetes on DigitalOcean&lt;/a&gt; for
more information.&lt;/p&gt;
&lt;p&gt;This tutorial runs Krustlet on a DigitalOcean Droplet (VM); however you may
follow these steps from any device that can start a web server on an IP
accessible from the Kubernetes control plane.&lt;/p&gt;
&lt;p&gt;In the &lt;a href=&#34;kubernetes-on-do.md&#34;&gt;how-to guide for running Managed Kubernetes on DigitalOcean&lt;/a&gt;,
several environment variables were used to define the cluster. Let&amp;rsquo;s reuse
those values:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-console&#34; data-lang=&#34;console&#34;&gt;$ CLUSTER=[[YOUR-CLUSTER-NAME]]
$ VERSION=&amp;quot;1.19.3-do.3&amp;quot;
$ SIZE=&amp;quot;s-1vcpu-2gb&amp;quot;
$ REGION=&amp;quot;sfo3&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Let&amp;rsquo;s also confirm that the cluster exists:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-console&#34; data-lang=&#34;console&#34;&gt;$ doctl kubernetes cluster list
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;step-1-create-digitalocean-droplet-vm&#34;&gt;Step 1: Create DigitalOcean Droplet (VM)&lt;/h2&gt;
&lt;p&gt;As with the cluster, there are several values (size, region) that you will need
to determine before you create the Droplet. &lt;code&gt;doctl compute&lt;/code&gt; includes commands
to help you determine slugs for these values:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-console&#34; data-lang=&#34;console&#34;&gt;$ doctl compute size list
$ doctl compute region list
$ doctl compute image list --public
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;If you&amp;rsquo;d prefer, you may use the values below. However, it is strongly
recommended that you use SSH keys to authenticate with Droplets. DigitalOcean
provides &lt;a href=&#34;https://www.digitalocean.com/docs/droplets/how-to/add-ssh-keys/&#34;&gt;instructions&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;You may then list your SSH keys:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-console&#34; data-lang=&#34;console&#34;&gt;$ doctl compute ssh-key list
&lt;/code&gt;&lt;/pre&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;NOTE&lt;/strong&gt; In this case, you reference the key using an &lt;code&gt;ID&lt;/code&gt; value&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;We can create a new DigitalOcean Droplet using the following command:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-console&#34; data-lang=&#34;console&#34;&gt;$ INSTANCE=[[YOUR-INSTANCE-NAME]]
$ SIZE=&amp;quot;s-1vcpu-2gb&amp;quot;   # Need not be the same size as the cluster node(s)
$ REGION=&amp;quot;sfo3&amp;quot;        # Need not be the same region as the cluster
IMAGE=&amp;quot;debian-10-x64&amp;quot;
SSH_KEY=[[YOUR-SSH-KEY]]

doctl compute droplet create ${INSTANCE} \
--region ${REGION} \
--size ${SIZE} \
--ssh-keys ${SSH_KEY} \
--tag-names krustlet,wasm \
--image ${IMAGE}
&lt;/code&gt;&lt;/pre&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;NOTE&lt;/strong&gt; The service will response with an &lt;code&gt;ID&lt;/code&gt; value for the Droplet. As long
as the Droplet name (&lt;code&gt;INSTANCE&lt;/code&gt;) is unique, you may refer to the Droplet by its
name value too.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;You will need the Droplet&amp;rsquo;s IPv4 public address so make a note of it (&lt;code&gt;IP&lt;/code&gt;):&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-console&#34; data-lang=&#34;console&#34;&gt;$ doctl compute droplet get ${INSTANCE} \
  --format PublicIPv4 \
  --no-header
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;step-2-get-a-bootstrap-config-for-your-kustlet-node&#34;&gt;Step 2: Get a bootstrap config for your Kustlet node&lt;/h2&gt;
&lt;p&gt;Krustlet requires a bootstrap token and config the first time it runs. Follow
the guide &lt;a href=&#34;bootstrapping.md&#34;&gt;here&lt;/a&gt;, setting the &lt;code&gt;CONFIG_DIR&lt;/code&gt; variable to &lt;code&gt;./&lt;/code&gt;,
to generate a bootstrap config and then return to this document. If you already
have a kubeconfig available that you generated through another process, you can
proceed to the next step. However, the credentials Krustlet uses must be part of
the &lt;code&gt;system:nodes&lt;/code&gt; group in order for things to function properly.&lt;/p&gt;
&lt;p&gt;NOTE: You may be wondering why you can&amp;rsquo;t run this on the VM you just
provisioned. We need access to the Kubernetes API in order to create the
bootstrap token, so the script used to generate the bootstrap config needs to be
run on a machine with the proper Kubernetes credentials.&lt;/p&gt;
&lt;h2 id=&#34;step-3-copy-bootstrap-config-to-droplet&#34;&gt;Step 3: Copy bootstrap config to Droplet&lt;/h2&gt;
&lt;p&gt;The first thing we&amp;rsquo;ll need to do is copy up the assets we generated in steps 1
and 2. Copy them to the VM by typing:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-console&#34; data-lang=&#34;console&#34;&gt;scp -i ${PRIVATE_KEY} \
  ${HOME}/.krustlet/config/bootstrap.conf \
  root@${IP}:.
&lt;/code&gt;&lt;/pre&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;NOTE&lt;/strong&gt; &lt;code&gt;IP&lt;/code&gt; is the Droplet&amp;rsquo;s IPv4 address from step #1 and &lt;code&gt;PRIVATE_KEY&lt;/code&gt; is
the location of the file containing the private (!) key that corresponds to the
public key that you used when you created the Droplet.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;We can then SSH into the Droplet by typing:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-console&#34; data-lang=&#34;console&#34;&gt;$ doctl compute ssh ${INSTANCE} \
  --ssh-key-path ${PRIVATE_KEY}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;If you&amp;rsquo;d prefer, you may use &lt;code&gt;ssh&lt;/code&gt; directly:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-console&#34; data-lang=&#34;console&#34;&gt;$ ssh -i ${PRIVATE_KEY} root@${IP}
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;step-4-install-and-configure-kruslet&#34;&gt;Step 4: Install and configure Kruslet&lt;/h2&gt;
&lt;p&gt;Install the latest release of krustlet following &lt;a href=&#34;../intro/install.md&#34;&gt;the install
guide&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s use the built-in &lt;code&gt;krustlet-wasi&lt;/code&gt; provider:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-console&#34; data-lang=&#34;console&#34;&gt;$ KUBECONFIG=${PWD}/kubeconfig ${PWD}/krustlet-wasi \
  --node-ip=${IP} \
  --node-name=&amp;quot;krustlet&amp;quot; \
  --bootstrap-file=${PWD}/bootstrap.conf \
  --cert-file=${PWD}/krustlet.crt \
  --private-key-file=${PWD}/krustlet.key
&lt;/code&gt;&lt;/pre&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;NOTE&lt;/strong&gt; You&amp;rsquo;ll need the &lt;code&gt;IP&lt;/code&gt; of the Droplet from step 1.
&lt;strong&gt;NOTE&lt;/strong&gt; To increase the level of debugging, you may prefix the command with
&lt;code&gt;RUST_LOG=info&lt;/code&gt; or &lt;code&gt;RUST_LOG=debug&lt;/code&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;If you restart the Krustlet after successfully (!) bootstrapping, you may run:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-console&#34; data-lang=&#34;console&#34;&gt;$ KUBECONFIG=${PWD}/kubeconfig ${PWD}/krustlet-wasi \
  --node-ip=${IP} \
  --node-name=&amp;quot;krustlet&amp;quot; \
  --cert-file=${PWD}/krustlet.crt \
  --private-key-file=${PWD}/krustlet.key
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;If bootstrapping fails, you should delete the CSR and try to bootstrap again:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-console&#34; data-lang=&#34;console&#34;&gt;$ kubectl delete csr ${INSTANCE}-tls
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;step-4a-approving-the-serving-csr&#34;&gt;Step 4a: Approving the serving CSR&lt;/h2&gt;
&lt;p&gt;Once you have started Krustlet, there is one more manual step (though this could
be automated depending on your setup) to perform. The client certs Krustlet
needs are generally approved automatically by the API. However, the serving
certs require manual approval. To do this, you&amp;rsquo;ll need the hostname you
specified for the &lt;code&gt;--hostname&lt;/code&gt; flag or the output of &lt;code&gt;hostname&lt;/code&gt; if you didn&amp;rsquo;t
specify anything. From another terminal that&amp;rsquo;s configured to access the cluster,
run:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-console&#34; data-lang=&#34;console&#34;&gt;$ kubectl certificate approve ${INSTANCE}-tls
&lt;/code&gt;&lt;/pre&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;NOTE&lt;/strong&gt; You will only need to do this approval step the first time Krustlet
starts. It will generate and save all of the needed credentials to your machine.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;You should be able to enumerate the cluster&amp;rsquo;s nodes including the Krustlet by
typing:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-console&#34; data-lang=&#34;console&#34;&gt;$ kubectl get nodes
NAME                           STATUS   ROLES    AGE   VERSION
krustlet                       Ready    &amp;lt;none&amp;gt;   60s   0.5.0
${CLUSTER}-default-pool-39yh5  Ready    &amp;lt;none&amp;gt;   10m   v1.19.3
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;step-5-test-that-things-work&#34;&gt;Step 5: Test that things work&lt;/h2&gt;
&lt;p&gt;We may test that the Krustlet is working by running one of the demos:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-console&#34; data-lang=&#34;console&#34;&gt;$ kubectl apply --filename=https://raw.githubusercontent.com/deislabs/krustlet/master/demos/wasi/hello-world-rust/k8s.yaml
$ kubectl get pods
NAME                    READY   STATUS       RESTARTS   AGE
hello-world-wasi-rust   0/1     ExitCode:0   0          12s

$ kubectl logs pods/hello-world-wasi-rust
hello from stdout!
hello from stderr!
FOO=bar
CONFIG_MAP_VAL=cool stuff
POD_NAME=hello-world-wasi-rust
Args are: []

Bacon ipsum dolor amet chuck turducken porchetta, tri-tip spare ribs t-bone ham hock. Meatloaf
pork belly leberkas, ham beef pig corned beef boudin ground round meatball alcatra jerky.
Pancetta brisket pastrami, flank pork chop ball tip short loin burgdoggen. Tri-tip kevin
shoulder cow andouille. Prosciutto chislic cupim, short ribs venison jerky beef ribs ham hock
short loin fatback. Bresaola meatloaf capicola pancetta, prosciutto chicken landjaeger andouille
swine kielbasa drumstick cupim tenderloin chuck shank. Flank jowl leberkas turducken ham tongue
beef ribs shankle meatloaf drumstick pork t-bone frankfurter tri-tip.
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;step-6-run-krustlet-as-a-service&#34;&gt;Step 6: Run Krustlet as a service&lt;/h2&gt;
&lt;p&gt;Create &lt;code&gt;krustlet.service&lt;/code&gt; in &lt;code&gt;/etc/systemd/system/krustlet.service&lt;/code&gt; on the VM.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;[Unit]
Description=Krustlet, a kubelet implementation for running WASM

[Service]
Restart=on-failure
RestartSec=5s
Environment=KUBECONFIG=/etc/krustlet/config/kubeconfig
Environment=KRUSTLET_NODE_IP=[[REPLACE-WITH-IP]]
Environment=KRUSTLET_NODE_NAME=krustlet
Environment=KRUSTLET_CERT_FILE=/etc/krustlet/config/krustlet.crt
Environment=KRUSTLET_PRIVATE_KEY_FILE=/etc/krustlet/config/krustlet.key
Environment=KRUSTLET_DATA_DIR=/etc/krustlet
Environment=RUST_LOG=wasi_provider=info,main=info
ExecStart=/usr/local/bin/krustlet-wasi
User=root
Group=root

[Install]
WantedBy=multi-user.target
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Ensure that the &lt;code&gt;krustlet.service&lt;/code&gt; has the correct ownership and permissions
with:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-console&#34; data-lang=&#34;console&#34;&gt;$ sudo chown root:root /etc/systemd/system/krustlet.service
$ sudo chmod 644 /etc/systemd/system/krustlet.service
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Then:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-console&#34; data-lang=&#34;console&#34;&gt;$ sudo mkdir -p /etc/krustlet/config &amp;amp;&amp;amp; sudo chown -R root:root /etc/krustlet
$ sudo mv {krustlet.*,kubeconfig} /etc/krustlet/config &amp;amp;&amp;amp; chmod 600 /etc/krustlet/*
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Once you have done that, run the following commands to make sure the unit is
configured to start on boot:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-console&#34; data-lang=&#34;console&#34;&gt;$ sudo systemctl enable krustlet &amp;amp;&amp;amp; sudo systemctl start krustlet
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;You may confirm the status of the service and review logs using:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-console&#34; data-lang=&#34;console&#34;&gt;$ systemctl status krustlet.service
$ journalctl --unit=krustlet.service --follow

## Delete the VM

When you are finished with the VM, you can delete it by typing:

```console
$ doctl compute droplet delete ${INSTANCE}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;When you are finished with the cluster, you can delete it by typing:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-console&#34; data-lang=&#34;console&#34;&gt;$ doctl kubernetes cluster delete ${CLUSTER}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;code&gt;doctl kubernetes cluster delete&lt;/code&gt; will also attempt to delete the cluster&amp;rsquo;s
configuration (cluster, context, user) from the default Kubernetes config file
(Linux: &lt;code&gt;${HOME}/.kube/config&lt;/code&gt;). You will neeed to set a new default context.&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>En: </title>
      <link>https://docs.krustlet.dev/en/howto/krustlet-on-eks/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://docs.krustlet.dev/en/howto/krustlet-on-eks/</guid>
      <description>
        
        
        &lt;h1 id=&#34;running-krustlet-on-amazon-elastic-kubernetes-service-eks&#34;&gt;Running Krustlet on Amazon Elastic Kubernetes Service (EKS)&lt;/h1&gt;
&lt;p&gt;Currently, &lt;a href=&#34;https://github.com/aws/containers-roadmap/issues/741&#34;&gt;EKS does not
support&lt;/a&gt; running managed
node groups with custom Amazon Machine Images (AMI).&lt;/p&gt;
&lt;p&gt;However, it does appear the feature might be coming soon.&lt;/p&gt;
&lt;p&gt;Until that time, we can use &lt;a href=&#34;https://eksctl.io/&#34;&gt;eksctl&lt;/a&gt; to create and manage a
node group with a custom Krustlet-based AMI.&lt;/p&gt;
&lt;h2 id=&#34;prerequisites&#34;&gt;Prerequisites&lt;/h2&gt;
&lt;p&gt;The following tools are needed to complete this walkthrough:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://aws.amazon.com/cli/&#34;&gt;Amazon CLI&lt;/a&gt; - &lt;em&gt;use &lt;code&gt;aws configure&lt;/code&gt; to set your
access keys and default region&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://packer.io/&#34;&gt;Packer&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://eksctl.io/&#34;&gt;eksctl&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;building-the-krustlet-based-ami&#34;&gt;Building the Krustlet-based AMI&lt;/h2&gt;
&lt;p&gt;We will be using &lt;a href=&#34;https://packer.io/&#34;&gt;Packer&lt;/a&gt; to spin up an EC2 instance to
build the AMI.&lt;/p&gt;
&lt;p&gt;There is a Makefile in &lt;code&gt;docs/howto/assets/eks&lt;/code&gt; that will run &lt;code&gt;packer&lt;/code&gt; for you.
It will use a &lt;code&gt;c5.2xlarge&lt;/code&gt; EC2 instance to build the AMI with.  Use the
&lt;code&gt;instance_type&lt;/code&gt; variable to &lt;code&gt;make&lt;/code&gt; to change the type of the EC2 instance used.&lt;/p&gt;
&lt;p&gt;Run &lt;code&gt;make&lt;/code&gt; to build the AMI:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-console&#34; data-lang=&#34;console&#34;&gt;$ cd docs/howto/assets/eks
$ make
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;You can also build the AMI with a different version of Krustlet from a forked
repo. For example:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-console&#34; data-lang=&#34;console&#34;&gt;$ cd docs/howto/assets/eks
$ KRUSTLET_VERSION=$(git rev-parse --short HEAD) KRUSTLET_SRC=https://github.com/jingweno/krustlet/archive/$(git rev-parse --short HEAD).tar.gz make krustlet
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;This command will take a while to build Krustlet from source on the EC2
instance. In the future, a prebuilt binary for Amazon Linux 2 might be available
that would speed up the AMI creation process.&lt;/p&gt;
&lt;p&gt;If everything works correctly, you should see the command complete with output
similar to:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-console&#34; data-lang=&#34;console&#34;&gt;...
==&amp;gt; Builds finished. The artifacts of successful builds are:
--&amp;gt; amazon-ebs: AMIs were created:
us-west-2: ami-07adf9ce893885a3d

--&amp;gt; amazon-ebs:
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Make note of the AMI identifier (in the example output above it would be
&lt;code&gt;ami-07adf9ce893885a3d&lt;/code&gt;) as it will be used to create the EKS cluster.&lt;/p&gt;
&lt;h2 id=&#34;creating-the-eks-cluster&#34;&gt;Creating the EKS cluster&lt;/h2&gt;
&lt;p&gt;We will be using &lt;a href=&#34;https://eksctl.io/&#34;&gt;eksctl&lt;/a&gt; to deploy the EKS cluster.&lt;/p&gt;
&lt;p&gt;Create a file named &lt;code&gt;cluster.yaml&lt;/code&gt; with the following contents, replacing the
&lt;code&gt;region&lt;/code&gt; and &lt;code&gt;ami&lt;/code&gt; fields with your values:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;apiVersion&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;eksctl.io/v1alpha5&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;kind&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;ClusterConfig&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;metadata&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;name&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;krustlet-demo&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;region&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;&amp;lt;YOUR_AWS_REGION_HERE&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;version&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;1.15&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;nodeGroups&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;  &lt;/span&gt;- &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;name&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;krustlet&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;ami&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;&amp;lt;YOUR_AMI_HERE&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;instanceType&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;t3.small&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;minSize&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;maxSize&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;3&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;desiredCapacity&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;ssh&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;      &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;allow&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;true&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;overrideBootstrapCommand&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;/etc/eks/bootstrap.sh --krustlet-node-labels &amp;#34;alpha.eksctl.io/cluster-name=krustlet-demo,alpha.eksctl.io/nodegroup-name=krustlet&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This will create a EKS cluster named &lt;code&gt;krustlet-demo&lt;/code&gt; with a single unmanaged
node group named &lt;code&gt;krustlet&lt;/code&gt; with two &lt;code&gt;t3.small&lt;/code&gt; nodes.&lt;/p&gt;
&lt;p&gt;Be aware that the &lt;code&gt;overrideBootstrapCommand&lt;/code&gt; setting is required to properly
boot the nodes. Without it, the Krustlet service will not be started and the
nodes will not automatically join the cluster.&lt;/p&gt;
&lt;p&gt;Use &lt;code&gt;eksctl&lt;/code&gt; to create the cluster:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-console&#34; data-lang=&#34;console&#34;&gt;$ eksctl create cluster -f cluster.yaml
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;This command will take a long time to run as it provisions the EKS cluster and
nodes.&lt;/p&gt;
&lt;p&gt;Eventually, the command will be stuck on the following output:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;...
[ℹ]  waiting for at least 1 node(s) to become ready in &amp;#34;krustlet&amp;#34;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;With another shell, ensure the nodes have joined the cluster:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-console&#34; data-lang=&#34;console&#34;&gt;$ kubectl get nodes
NAME                                          STATUS   ROLES   AGE   VERSION
ip-192-168-24-34.us-west-2.compute.internal   Ready    agent   23s   v1.17.0
ip-192-168-44-27.us-west-2.compute.internal   Ready    agent   17s   v1.17.0
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;You should see two nodes with different names in the output.&lt;/p&gt;
&lt;h2 id=&#34;running-a-webassembly-application&#34;&gt;Running a WebAssembly application&lt;/h2&gt;
&lt;p&gt;Let&amp;rsquo;s deploy a demo WebAssembly application to the cluster:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-console&#34; data-lang=&#34;console&#34;&gt;$ kubectl apply -f demos/wasi/hello-world-rust/k8s.yaml
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Check that the pod ran to completion:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-console&#34; data-lang=&#34;console&#34;&gt;$ kubectl get pod hello-world-wasi-rust
NAME                    READY   STATUS       RESTARTS   AGE
hello-world-wasi-rust   0/1     ExitCode:0   0          7s
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;This output shows the pod completed with an exit code of 0.&lt;/p&gt;
&lt;p&gt;Take a look at the log to see the output of the application:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-console&#34; data-lang=&#34;console&#34;&gt;$ kubectl logs hello-world-wasi-rust
hello from stdout!
hello from stderr!
POD_NAME=hello-world-wasi-rust
FOO=bar
CONFIG_MAP_VAL=cool stuff
Args are: []
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Congratulations!  You&amp;rsquo;ve run a WebAssembly program on an EKS cluster!&lt;/p&gt;
&lt;h2 id=&#34;deleting-the-cluster&#34;&gt;Deleting the cluster&lt;/h2&gt;
&lt;p&gt;Use &lt;code&gt;eksctl&lt;/code&gt; to delete the cluster and the nodes:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-console&#34; data-lang=&#34;console&#34;&gt;$ eksctl delete cluster --name krustlet-demo
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;deleting-the-krustlet-ami&#34;&gt;Deleting the Krustlet AMI&lt;/h2&gt;
&lt;p&gt;Determine the snapshot identifier of the AMI, where &lt;code&gt;$AMI_ID&lt;/code&gt; is the identifier
of your Krustlet AMI:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-console&#34; data-lang=&#34;console&#34;&gt;$ aws ec2 describe-images --image-ids $AMI_ID | grep SnapshotId
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Use &lt;code&gt;aws&lt;/code&gt; to deregister the AMI, where &lt;code&gt;$AMI_ID&lt;/code&gt; is the identifier of your
Krustlet AMI:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-console&#34; data-lang=&#34;console&#34;&gt;$ aws ec2 deregister-image --image-id $AMI_ID
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Next, delete the snapshot, where &lt;code&gt;$SNAPSHOT_ID&lt;/code&gt; is the previously determined
snapshot identifier:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-console&#34; data-lang=&#34;console&#34;&gt;$ aws ec2 delete-snapshot --snapshot-id $SNAPSHOT_ID
&lt;/code&gt;&lt;/pre&gt;
      </description>
    </item>
    
    <item>
      <title>En: </title>
      <link>https://docs.krustlet.dev/en/howto/krustlet-on-gke/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://docs.krustlet.dev/en/howto/krustlet-on-gke/</guid>
      <description>
        
        
        &lt;h1 id=&#34;running-krustlet-on-google-kubernetes-engine-gke&#34;&gt;Running Krustlet on Google Kubernetes Engine (GKE)&lt;/h1&gt;
&lt;p&gt;These steps are for running a Krustlet node in a GKE cluster.&lt;/p&gt;
&lt;h2 id=&#34;prerequisites&#34;&gt;Prerequisites&lt;/h2&gt;
&lt;p&gt;You will require a GKE cluster. See the &lt;a href=&#34;kubernetes-on-gke.md&#34;&gt;how-to guide for running Kubernetes on
GKE&lt;/a&gt; for more information.&lt;/p&gt;
&lt;p&gt;This specific tutorial will be running Krustlet on a Compute Engine VM; however
you may follow these steps from any device that can start a web server on an IP
accessible from the Kubernetes control plane.&lt;/p&gt;
&lt;p&gt;In the &lt;a href=&#34;kubernetes-on-gke.md&#34;&gt;how-to guide for running Kubernetes on GKE&lt;/a&gt;,
several environment variables were used to define a Google Cloud Platform
project, region and Kubernetes Engine cluster. Let&amp;rsquo;s reuse those values:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-console&#34; data-lang=&#34;console&#34;&gt;$ PROJECT=[YOUR-PROJECT] # Perhaps $(whoami)-$(date +%y%m%d)-krustlet
$ REGION=&amp;quot;us-west1&amp;quot; # Use a region close to you `gcloud compute regions list --project=${PROJECT}`
$ CLUSTER=&amp;quot;cluster&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Let&amp;rsquo;s confirm that the cluster exists. We can do this using either &lt;code&gt;gcloud&lt;/code&gt; or
&lt;code&gt;kubectl&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-console&#34; data-lang=&#34;console&#34;&gt;$ gcloud container clusters describe ${CLUSTER} --project=${PROJECT} --region=${REGION}
$ gcloud container clusters describe ${CLUSTER} --project=${PROJECT} --region=${REGION} --format=&amp;quot;value(status)&amp;quot;
RUNNING
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Or:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-console&#34; data-lang=&#34;console&#34;&gt;$ kubectl get nodes
NAME                                     STATUS   ROLES    AGE     VERSION
gke-cluster-default-pool-1a3a5b85-scds   Ready    &amp;lt;none&amp;gt;   1m      v1.17.4-gke.10
gke-cluster-default-pool-3885c0e3-6zw2   Ready    &amp;lt;none&amp;gt;   1m      v1.17.4-gke.10
gke-cluster-default-pool-6d70a85d-19r8   Ready    &amp;lt;none&amp;gt;   1m      v1.17.4-gke.10
&lt;/code&gt;&lt;/pre&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;NOTE&lt;/strong&gt; If you chose to create a single-zone cluster, replace
&lt;code&gt;--region=${REGION}&lt;/code&gt; with &lt;code&gt;--zone=${ZONE}&lt;/code&gt; in the above &lt;code&gt;gcloud&lt;/code&gt; commands.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;step-1-create-compute-engine-vm&#34;&gt;Step 1: Create Compute Engine VM&lt;/h2&gt;
&lt;p&gt;We can create a new VM with the following command:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-console&#34; data-lang=&#34;console&#34;&gt;$ INSTANCE=&amp;quot;krustlet&amp;quot; # Name of this VM must matches the certificate&#39;s CN
$ # The cluster is distributed across the zones in the region
$ # For the VM, we&#39;ll pick one of the zones
$ ZONE=&amp;quot;${REGION}-a&amp;quot; # Pick one of the zones in this region
$ gcloud beta compute instances create ${INSTANCE} \
--project=${PROJECT} \
--zone=${ZONE} \
--machine-type &amp;quot;n1-standard-1&amp;quot; \
--image-family=&amp;quot;debian-10&amp;quot; \
--image-project=&amp;quot;debian-cloud&amp;quot;
NAME      ZONE        MACHINE_TYPE   PREEMPTIBLE  INTERNAL_IP  EXTERNAL_IP     STATUS
krustlet  us-west1-a  n1-standard-1               xx.xx.xx.xx  yy.yy.yy.yy     RUNNING
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;It should take less than 30-seconds to provision the VM.&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s determine the instance&amp;rsquo;s internal (!) IP to use when creating the
Kubernete certificate and subsequently running Krustlet. In step #4, you&amp;rsquo;ll need
to copy this value into the command that is used to run Krustlet on the VM:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-console&#34; data-lang=&#34;console&#34;&gt;$ IP=$(gcloud compute instances describe ${INSTANCE} \
--project=${PROJECT} \
--zone=${ZONE} \
--format=&amp;quot;value(networkInterfaces[0].networkIP)&amp;quot;) &amp;amp;&amp;amp; echo ${IP}
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;step-2-get-a-bootstrap-config-for-your-krustlet-node&#34;&gt;Step 2: Get a bootstrap config for your Krustlet node&lt;/h2&gt;
&lt;p&gt;Krustlet requires a bootstrap token and config the first time it runs. Follow
the guide &lt;a href=&#34;bootstrapping.md&#34;&gt;here&lt;/a&gt;, setting the &lt;code&gt;CONFIG_DIR&lt;/code&gt; variable to &lt;code&gt;./&lt;/code&gt;,
to generate a bootstrap config and then return to this document. If you already
have a kubeconfig available that you generated through another process, you can
proceed to the next step. However, the credentials Krustlet uses must be part of
the &lt;code&gt;system:nodes&lt;/code&gt; group in order for things to function properly.&lt;/p&gt;
&lt;p&gt;NOTE: You may be wondering why you can&amp;rsquo;t run this on the VM you just
provisioned. We need access to the Kubernetes API in order to create the
bootstrap token, so the script used to generate the bootstrap config needs to be
run on a machine with the proper Kubernetes credentials&lt;/p&gt;
&lt;h2 id=&#34;step-3-copy-bootstrap-config-to-vm&#34;&gt;Step 3: Copy bootstrap config to VM&lt;/h2&gt;
&lt;p&gt;The first thing we&amp;rsquo;ll need to do is copy up the assets we generated in steps 1
and 2. Copy them to the VM by typing:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-console&#34; data-lang=&#34;console&#34;&gt;$ gcloud compute scp bootstrap.conf ${INSTANCE}: --project=${PROJECT} --zone=${ZONE}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;We can then SSH into the instance by typing:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-console&#34; data-lang=&#34;console&#34;&gt;$ gcloud compute ssh ${INSTANCE} --project=${PROJECT} --zone=${ZONE}
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;step-4-install-and-configure-krustlet&#34;&gt;Step 4: Install and configure Krustlet&lt;/h2&gt;
&lt;p&gt;Install the latest release of krustlet following &lt;a href=&#34;../intro/install.md&#34;&gt;the install
guide&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s use the built-in &lt;code&gt;krustlet-wasi&lt;/code&gt; provider:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-console&#34; data-lang=&#34;console&#34;&gt;$ KUBECONFIG=${PWD}/kubeconfig krustlet-wasi \
--hostname=&amp;quot;krustlet&amp;quot; \
--node-ip=${IP} \
--node-name=&amp;quot;krustlet&amp;quot; \
--bootstrap-file=./bootstrap.conf
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;NOTE&lt;/strong&gt; To increase the level of debugging, you may prefix the command with
&lt;code&gt;RUST_LOG=info&lt;/code&gt; or &lt;code&gt;RUST_LOG=debug&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;NOTE&lt;/strong&gt; The value of &lt;code&gt;${IP}&lt;/code&gt; was determined in step #1.&lt;/p&gt;
&lt;h3 id=&#34;step-4a-approving-the-serving-csr&#34;&gt;Step 4a: Approving the serving CSR&lt;/h3&gt;
&lt;p&gt;Once you have started Krustlet, there is one more manual step (though this could
be automated depending on your setup) to perform. The client certs Krustlet
needs are generally approved automatically by the API. However, the serving
certs require manual approval. To do this, you&amp;rsquo;ll need the hostname you
specified for the &lt;code&gt;--hostname&lt;/code&gt; flag or the output of &lt;code&gt;hostname&lt;/code&gt; if you didn&amp;rsquo;t
specify anything. From another terminal that&amp;rsquo;s configured to access the cluster,
run:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-console&#34; data-lang=&#34;console&#34;&gt;$ kubectl certificate approve &amp;lt;hostname&amp;gt;-tls
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;NOTE: You will only need to do this approval step the first time Krustlet
starts. It will generate and save all of the needed credentials to your machine&lt;/p&gt;
&lt;p&gt;You should be able to enumerate the cluster&amp;rsquo;s nodes including the Krustlet by
typing:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-console&#34; data-lang=&#34;console&#34;&gt;$ kubectl get nodes
NAME                                     STATUS   ROLES    AGE   VERSION
gke-cluster-default-pool-1a3a5b85-scds   Ready    &amp;lt;none&amp;gt;   59m   v1.17.4-gke.10
gke-cluster-default-pool-3885c0e3-6zw2   Ready    &amp;lt;none&amp;gt;   36m   v1.17.4-gke.10
gke-cluster-default-pool-6d70a85d-19r8   Ready    &amp;lt;none&amp;gt;   59m   v1.17.4-gke.10
krustlet                                 Ready    agent    8s    v1.17.0
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;step-5-test-that-things-work&#34;&gt;Step 5: Test that things work&lt;/h2&gt;
&lt;p&gt;We may test that the Krustlet is working by running one of the demos:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-console&#34; data-lang=&#34;console&#34;&gt;$ kubectl apply --filename=https://raw.githubusercontent.com/deislabs/krustlet/master/demos/wasi/hello-world-rust/k8s.yaml
$ # wait a few seconds for the pod to run
$ kubectl logs pods/hello-world-wasi-rust
hello from stdout!
hello from stderr!
CONFIG_MAP_VAL=cool stuff
FOO=bar
POD_NAME=hello-world-wasi-rust
Args are: []
&lt;/code&gt;&lt;/pre&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;NOTE&lt;/strong&gt; you may receive an &lt;code&gt;ErrImagePull&lt;/code&gt; and &lt;code&gt;Failed to pull image&lt;/code&gt; and
&lt;code&gt;failed to generate container&lt;/code&gt;. This results if the taints do not apply
correctly. You should be able to resolve this issue, using the following YAML.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;apiVersion&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;v1&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;kind&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;ConfigMap&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;metadata&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;name&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;hello-world-wasi-rust&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;data&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;myval&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;cool stuff&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;---&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;apiVersion&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;v1&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;kind&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;Pod&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;metadata&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;name&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;hello-world-wasi-rust&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;spec&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;containers&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;    &lt;/span&gt;- &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;name&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;hello-world-wasi-rust&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;      &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;image&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;webassembly.azurecr.io/hello-world-wasi-rust:v0.1.0&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;      &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;env&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;        &lt;/span&gt;- &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;name&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;FOO&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;          &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;value&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;bar&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;        &lt;/span&gt;- &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;name&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;POD_NAME&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;          &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;valueFrom&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;            &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;fieldRef&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;              &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;fieldPath&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;metadata.name&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;        &lt;/span&gt;- &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;name&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;CONFIG_MAP_VAL&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;          &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;valueFrom&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;            &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;configMapKeyRef&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;              &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;key&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;myval&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;              &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;name&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;hello-world-wasi-rust&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;nodeSelector&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;kubernetes.io/arch&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;wasm32-wasi&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;tolerations&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;    &lt;/span&gt;- &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;key&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;kubernetes.io/arch&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;      &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;operator&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;Equal&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;      &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;value&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;wasm32-wasi&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;      &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;effect&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;NoExecute&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;    &lt;/span&gt;- &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;key&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;kubernetes.io/arch&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;      &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;operator&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;Equal&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;      &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;value&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;wasm32-wasi&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;      &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;effect&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;NoSchedule&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;    &lt;/span&gt;- &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;key&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;node.kubernetes.io/network-unavailable&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;      &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;operator&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;Exists&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;      &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;effect&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;NoSchedule&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;step-6-run-krustlet-as-a-service&#34;&gt;Step 6: Run Krustlet as a service&lt;/h2&gt;
&lt;p&gt;Create &lt;code&gt;krustlet.service&lt;/code&gt; in &lt;code&gt;/etc/systemd/system/krustlet.service&lt;/code&gt; on the VM.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;[Unit]
Description=Krustlet, a kubelet implementation for running WASM

[Service]
Restart=on-failure
RestartSec=5s
Environment=KUBECONFIG=/etc/krustlet/config/kubeconfig
Environment=NODE_NAME=krustlet
Environment=KRUSTLET_CERT_FILE=/etc/krustlet/config/krustlet.crt
Environment=KRUSTLET_PRIVATE_KEY_FILE=/etc/krustlet/config/krustlet.key
Environment=KRUSTLET_DATA_DIR=/etc/krustlet
Environment=RUST_LOG=wasi_provider=info,main=info
Environment=KRUSTLET_BOOTSTRAP_FILE=/etc/krustlet/config/bootstrap.conf
ExecStart=/usr/local/bin/krustlet-wasi
User=root
Group=root

[Install]
WantedBy=multi-user.target
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Ensure that the &lt;code&gt;krustlet.service&lt;/code&gt; has the correct ownership and permissions
with:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-console&#34; data-lang=&#34;console&#34;&gt;$ sudo chown root:root /etc/systemd/system/krustlet.service
$ sudo chmod 644 /etc/systemd/system/krustlet.service
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Then:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-console&#34; data-lang=&#34;console&#34;&gt;$ sudo mkdir -p /etc/krustlet/config &amp;amp;&amp;amp; sudo chown -R root:root /etc/krustlet
$ sudo mv {krustlet.*,kubeconfig} /etc/krustlet &amp;amp;&amp;amp; chmod 600 /etc/krustlet/*
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Once you have done that, run the following commands to make sure the unit is
configured to start on boot:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-console&#34; data-lang=&#34;console&#34;&gt;$ sudo systemctl enable krustlet &amp;amp;&amp;amp; sudo systemctl start krustlet
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;delete-the-vm&#34;&gt;Delete the VM&lt;/h2&gt;
&lt;p&gt;When you are finished with the VM, you can delete it by typing:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-console&#34; data-lang=&#34;console&#34;&gt;$ gcloud compute instances delete ${INSTANCE} --project=${PROJECT} --zone=${ZONE} --quiet
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;When you are finished with the cluster, you can delete it by typing:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-console&#34; data-lang=&#34;console&#34;&gt;$ # If you created a regional cluster
$ gcoud container clusters delete ${CLUSTER} --project=${PROJECT} --region=${REGION}
$ # If you created a zonal cluster
$ gcoud container clusters delete ${CLUSTER} --project=${PROJECT} --zone=${ZONE}
&lt;/code&gt;&lt;/pre&gt;
      </description>
    </item>
    
    <item>
      <title>En: </title>
      <link>https://docs.krustlet.dev/en/howto/krustlet-on-kind/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://docs.krustlet.dev/en/howto/krustlet-on-kind/</guid>
      <description>
        
        
        &lt;h1 id=&#34;running-krustlet-on-kubernetes-in-docker-kind&#34;&gt;Running Krustlet on Kubernetes in Docker (KinD)&lt;/h1&gt;
&lt;p&gt;This how-to guide demonstrates how to boot a Krustlet node in a KinD cluster.&lt;/p&gt;
&lt;h2 id=&#34;prerequisites&#34;&gt;Prerequisites&lt;/h2&gt;
&lt;p&gt;You will require a running KinD cluster for this how-to. &lt;code&gt;kubectl&lt;/code&gt; is also
required. See the &lt;a href=&#34;kubernetes-on-kind.md&#34;&gt;how-to guide for running Kubernetes on
KinD&lt;/a&gt; for more information.&lt;/p&gt;
&lt;p&gt;This specific tutorial will be running Krustlet on your host Operating System;
however, you can follow these steps from any device that can start a web server
on an IP accessible from the Kubernetes control plane, including KinD itself.&lt;/p&gt;
&lt;h2 id=&#34;step-1-get-a-bootstrap-config&#34;&gt;Step 1: Get a bootstrap config&lt;/h2&gt;
&lt;p&gt;Krustlet requires a bootstrap token and config the first time it runs. Follow
the guide &lt;a href=&#34;bootstrapping.md&#34;&gt;here&lt;/a&gt; to generate a bootstrap config and then
return to this document. If you already have a kubeconfig available that you
generated through another process, you can proceed to the next step. However,
the credentials Krustlet uses must be part of the &lt;code&gt;system:nodes&lt;/code&gt; group in order
for things to function properly.&lt;/p&gt;
&lt;h2 id=&#34;step-2-determine-the-default-gateway&#34;&gt;Step 2: Determine the default gateway&lt;/h2&gt;
&lt;p&gt;The default gateway for most Docker containers (including your KinD host) is
generally &lt;code&gt;172.17.0.1&lt;/code&gt;. We can use this IP address from the guest Operating
System (the KinD host) to connect to the host Operating System (where Krustlet
is running). If this was changed, check &lt;code&gt;ip addr show docker0&lt;/code&gt; from the host OS
to determine the default gateway.&lt;/p&gt;
&lt;h3 id=&#34;special-note-docker-desktop-for-mac&#34;&gt;Special note: Docker Desktop for Mac&lt;/h3&gt;
&lt;p&gt;For Docker Desktop for Mac users, &lt;a href=&#34;https://docs.docker.com/docker-for-mac/networking/#use-cases-and-workarounds&#34;&gt;the &lt;code&gt;docker0&lt;/code&gt; bridge network is unreachable
from the host
network&lt;/a&gt;
(and vice versa). However, the &lt;code&gt;en0&lt;/code&gt; host network is accessible from within the
container.&lt;/p&gt;
&lt;p&gt;Because the &lt;code&gt;en0&lt;/code&gt; network is the default network, Krustlet will bind to this IP
address automatically. You should not need to pass a &lt;code&gt;--node-ip&lt;/code&gt; flag to
Krustlet.&lt;/p&gt;
&lt;p&gt;In the event this does not appear to be the case (for example, when the hostname
cannot resolve to this address), check which IP address you have for the &lt;code&gt;en0&lt;/code&gt;
network:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-console&#34; data-lang=&#34;console&#34;&gt;$ ifconfig en0
en0: flags=8863&amp;lt;UP,BROADCAST,SMART,RUNNING,SIMPLEX,MULTICAST&amp;gt; mtu 1500
        options=400&amp;lt;CHANNEL_IO&amp;gt;
        ether 78:4f:43:8d:4f:55
        inet6 fe80::1c20:1e66:6322:6ae9%en0 prefixlen 64 secured scopeid 0x5
        inet 192.168.1.167 netmask 0xffffff00 broadcast 192.168.1.255
        nd6 options=201&amp;lt;PERFORMNUD,DAD&amp;gt;
        media: autoselect
        status: active
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;In this example, I should use &lt;code&gt;192.168.1.167&lt;/code&gt;.&lt;/p&gt;
&lt;h3 id=&#34;special-note-docker-on-hyper-v-linux-vms&#34;&gt;Special note: Docker on Hyper-V Linux VMs&lt;/h3&gt;
&lt;p&gt;For Docker running on a Linux VM on a Windows host under Hyper-V, the default
gateway is usually &lt;code&gt;172.18.0.1&lt;/code&gt;.&lt;/p&gt;
&lt;h2 id=&#34;step-3-install-and-run-krustlet&#34;&gt;Step 3: Install and run Krustlet&lt;/h2&gt;
&lt;p&gt;First, install the latest release of Krustlet following &lt;a href=&#34;../intro/install.md&#34;&gt;the install
guide&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Once you have done that, run the following commands to run Krustlet&amp;rsquo;s WASI
provider:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-console&#34; data-lang=&#34;console&#34;&gt;# Since you are running locally, this step is important. Otherwise krustlet will pick up on your
# local config and not be able to update the node status properly
$ export KUBECONFIG=~/.krustlet/config/kubeconfig
$ krustlet-wasi --node-ip 172.17.0.1 --bootstrap-file=~/.krustlet/config/bootstrap.conf
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;step-3a-approving-the-serving-csr&#34;&gt;Step 3a: Approving the serving CSR&lt;/h3&gt;
&lt;p&gt;Once you have started Krustlet, there is one more manual step (though this could
be automated depending on your setup) to perform. The client certs Krustlet
needs are generally approved automatically by the API. However, the serving
certs require manual approval. To do this, you&amp;rsquo;ll need the hostname you
specified for the &lt;code&gt;--hostname&lt;/code&gt; flag or the output of &lt;code&gt;hostname&lt;/code&gt; if you didn&amp;rsquo;t
specify anything. From another terminal that&amp;rsquo;s configured to access the cluster,
run:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-console&#34; data-lang=&#34;console&#34;&gt;$ kubectl certificate approve &amp;lt;hostname&amp;gt;-tls
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;NOTE: You will only need to do this approval step the first time Krustlet
starts. It will generate and save all of the needed credentials to your machine&lt;/p&gt;
&lt;p&gt;Then, run &lt;code&gt;kubectl get nodes -o wide&lt;/code&gt; and you should see output that looks
similar to below:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-console&#34; data-lang=&#34;console&#34;&gt;$ kubectl get nodes -o wide
NAME                 STATUS   ROLES    AGE     VERSION   INTERNAL-IP   EXTERNAL-IP   OS-IMAGE       KERNEL-VERSION     CONTAINER-RUNTIME
kind-control-plane   Ready    master   3m46s   v1.17.0   172.17.0.2    &amp;lt;none&amp;gt;        Ubuntu 19.10   5.3.0-42-generic   containerd://1.3.2
krustlet             Ready    agent    10s     v1.17.0   172.17.0.1    &amp;lt;none&amp;gt;        &amp;lt;unknown&amp;gt;      &amp;lt;unknown&amp;gt;          mvp
&lt;/code&gt;&lt;/pre&gt;
      </description>
    </item>
    
    <item>
      <title>En: </title>
      <link>https://docs.krustlet.dev/en/howto/krustlet-on-microk8s/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://docs.krustlet.dev/en/howto/krustlet-on-microk8s/</guid>
      <description>
        
        
        &lt;h1 id=&#34;running-krustlet-on-microk8shttpsmicrok8sio&#34;&gt;Running Krustlet on &lt;a href=&#34;https://microk8s.io&#34;&gt;MicroK8s&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;These are steps for running Krustlet node(s) and &lt;a href=&#34;https://microk8s.io&#34;&gt;MicroK8s&lt;/a&gt;
on the same machine.&lt;/p&gt;
&lt;h2 id=&#34;prerequisites&#34;&gt;Prerequisites&lt;/h2&gt;
&lt;p&gt;You will require a running MicroK8s cluster for this guide. The steps below
assume you will run MicroK8s and the Krustlet, on a single machine. &lt;code&gt;kubectl&lt;/code&gt; is
required but is installed with MicroK8s as &lt;code&gt;microk8s.kubectl&lt;/code&gt;. The following
instructions use &lt;code&gt;microk8s.kubectl&lt;/code&gt; for simplicity. You may use a standlone
&lt;code&gt;kubectl&lt;/code&gt; if you prefer.&lt;/p&gt;
&lt;p&gt;In order for the bootstrap authentication token to work, your kube-apiserver
needs to have the &lt;code&gt;--enable-bootstrap-token-auth&lt;/code&gt; feature flag enabled. See
&lt;a href=&#34;https://kubernetes.io/docs/reference/access-authn-authz/bootstrap-tokens/&#34;&gt;bootstrap-tokens&lt;/a&gt;
for more information.&lt;/p&gt;
&lt;p&gt;To verify you have the bootstrap authentication feature enabled, check the
process args:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-console&#34; data-lang=&#34;console&#34;&gt;$ ps -ef | grep kube-apiserver | grep &amp;quot;enable-bootstrap-token-auth&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;If it doesn&amp;rsquo;t show up and you installed using &lt;code&gt;snap&lt;/code&gt;, you can find the startup
args in &lt;code&gt;/var/snap/microk8s/current/args/kube-apiserver&lt;/code&gt; and add the flag.&lt;/p&gt;
&lt;p&gt;Now you need to &lt;a href=&#34;https://microk8s.io/docs/configuring-services&#34;&gt;restart&lt;/a&gt; the
kube-apiserver with the command:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-console&#34; data-lang=&#34;console&#34;&gt;$ systemctl restart snap.microk8s.daemon-apiserver
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;step-1-get-a-bootstrap-config&#34;&gt;Step 1: Get a bootstrap config&lt;/h2&gt;
&lt;p&gt;Krustlet requires a bootstrap token and config the first time it runs. Follow
the guide &lt;a href=&#34;bootstrapping.md&#34;&gt;here&lt;/a&gt; to generate a bootstrap config and then
return to this document. This will If you already have a kubeconfig available
that you generated through another process, you can proceed to the next step.
However, the credentials Krustlet uses must be part of the &lt;code&gt;system:nodes&lt;/code&gt; group
in order for things to function properly.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;NOTE&lt;/strong&gt; You should now have a file &lt;code&gt;bootstrap.conf&lt;/code&gt; in &lt;code&gt;${HOME}/.krustlet/config&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;step-2-install-and-configure-krustlet&#34;&gt;Step 2: Install and configure Krustlet&lt;/h2&gt;
&lt;p&gt;Install the latest release of Krustlet following &lt;a href=&#34;../intro/install.md&#34;&gt;the install
guide&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s use the built in &lt;code&gt;krustlet-wasi&lt;/code&gt; provider&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-console&#34; data-lang=&#34;console&#34;&gt;$ ./KUBECONFIG=${PWD}/krustlet-config \
  krustlet-wasi \
  --node-ip=127.0.0.1 \
  --node-name=krustlet \
  --bootstrap-file=${HOME}/.krustlet/config/bootstrap.conf
&lt;/code&gt;&lt;/pre&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;NOTE&lt;/strong&gt;: To avoid the Krustlet using your default Kubernetes credentials (&lt;code&gt;~/.kube/config&lt;/code&gt;),
it is a good idea to override the default value here using &lt;code&gt;KUBECONFIG&lt;/code&gt;. For bootstrapping,
&lt;code&gt;KUBECONFIG&lt;/code&gt; must point to a non-existent file (!). Bootstrapping will write a new
configuration file to this location for you.
&lt;strong&gt;NOTE&lt;/strong&gt;: If you receive an error that the CSR already exists, you may safely delete
the existing CSR (&lt;code&gt;kubectl delete csr &amp;lt;hostname&amp;gt;-tls&lt;/code&gt;) and try again.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;step-2a-approving-the-serving-csr&#34;&gt;Step 2a: Approving the serving CSR&lt;/h3&gt;
&lt;p&gt;Once you have started Krustlet, there is one more manual step (though this could
be automated depending on your setup) to perform. The client certs Krustlet
needs are generally approved automatically by the API. However, the serving
certs require manual approval. To do this, you&amp;rsquo;ll need the hostname you
specified for the &lt;code&gt;--hostname&lt;/code&gt; flag or the output of &lt;code&gt;hostname&lt;/code&gt; if you didn&amp;rsquo;t
specify anything. From another terminal that&amp;rsquo;s configured to access the cluster,
run:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-console&#34; data-lang=&#34;console&#34;&gt;$ microk8s.kubectl certificate approve &amp;lt;hostname&amp;gt;-tls
&lt;/code&gt;&lt;/pre&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;NOTE&lt;/strong&gt;: You will only need to do this approval step the first time Krustlet
starts. It will generate and save all of the needed credentials to your machine&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;step-3-test-that-things-work&#34;&gt;Step 3: Test that things work&lt;/h2&gt;
&lt;p&gt;Now you can see things work! Feel free to give any of the demos a try in another
terminal like so:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-console&#34; data-lang=&#34;console&#34;&gt;$ microk8s.kubectl apply --filename=https://raw.githubusercontent.com/deislabs/krustlet/master/demos/wasi/hello-world-rust/k8s.yaml
$ microk8s.kubectl logs pod/hello-world-wasi-rust
hello from stdout!
hello from stderr!
POD_NAME=hello-world-wasi-rust
FOO=bar
CONFIG_MAP_VAL=cool stuff
Args are: []

Bacon ipsum dolor amet chuck turducken porchetta, tri-tip spare ribs t-bone ham hock. Meatloaf
pork belly leberkas, ham beef pig corned beef boudin ground round meatball alcatra jerky.
Pancetta brisket pastrami, flank pork chop ball tip short loin burgdoggen. Tri-tip kevin
shoulder cow andouille. Prosciutto chislic cupim, short ribs venison jerky beef ribs ham hock
short loin fatback. Bresaola meatloaf capicola pancetta, prosciutto chicken landjaeger andouille
swine kielbasa drumstick cupim tenderloin chuck shank. Flank jowl leberkas turducken ham tongue
beef ribs shankle meatloaf drumstick pork t-bone frankfurter tri-tip.
&lt;/code&gt;&lt;/pre&gt;
      </description>
    </item>
    
    <item>
      <title>En: </title>
      <link>https://docs.krustlet.dev/en/howto/krustlet-on-minikube/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://docs.krustlet.dev/en/howto/krustlet-on-minikube/</guid>
      <description>
        
        
        &lt;h1 id=&#34;running-krustlet-on-minikube&#34;&gt;Running Krustlet on Minikube&lt;/h1&gt;
&lt;p&gt;This how-to guide demonstrates how to boot a Krustlet node in a Minikube
cluster.&lt;/p&gt;
&lt;h2 id=&#34;prerequisites&#34;&gt;Prerequisites&lt;/h2&gt;
&lt;p&gt;You will require a running Minikube cluster for this how-to. The steps below
assume that minikube was booted with the VirtualBox driver, though other drivers
can be used with some changes. &lt;code&gt;kubectl&lt;/code&gt; is also required.&lt;/p&gt;
&lt;p&gt;See the &lt;a href=&#34;kubernetes-on-minikube.md&#34;&gt;how-to guide for running Kubernetes on
Minikube&lt;/a&gt; for more information.&lt;/p&gt;
&lt;p&gt;This specific tutorial will be running Krustlet on your host Operating System;
however, you can follow these steps from any device that can start a web server
on an IP accessible from the Kubernetes control plane, including Minikube
itself.&lt;/p&gt;
&lt;h2 id=&#34;step-1-get-a-bootstrap-config&#34;&gt;Step 1: Get a bootstrap config&lt;/h2&gt;
&lt;p&gt;Krustlet requires a bootstrap token and config the first time it runs. Follow
the guide &lt;a href=&#34;bootstrapping.md&#34;&gt;here&lt;/a&gt; to generate a bootstrap config and then
return to this document. This will If you already have a kubeconfig available
that you generated through another process, you can proceed to the next step.
However, the credentials Krustlet uses must be part of the &lt;code&gt;system:nodes&lt;/code&gt; group
in order for things to function properly.&lt;/p&gt;
&lt;h2 id=&#34;step-2-determine-the-default-gateway&#34;&gt;Step 2: Determine the default gateway&lt;/h2&gt;
&lt;p&gt;The default gateway when you &lt;a href=&#34;kubernetes-on-minikube.md&#34;&gt;set up minikube with the VirtualBox
driver&lt;/a&gt; is generally &lt;code&gt;10.0.2.2&lt;/code&gt;. We can use this IP
address from the guest Operating System (the minikube host) to connect to the
host Operating System (where Krustlet is running). If this was changed, use
&lt;code&gt;minikube ssh&lt;/code&gt; and &lt;code&gt;ip addr show&lt;/code&gt; from the guest OS to determine the default
gateway.&lt;/p&gt;
&lt;h2 id=&#34;step-3-install-and-run-krustlet&#34;&gt;Step 3: Install and run Krustlet&lt;/h2&gt;
&lt;p&gt;First, install the latest release of Krustlet following &lt;a href=&#34;../intro/install.md&#34;&gt;the install
guide&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Once you have done that, run the following commands to run Krustlet&amp;rsquo;s WASI
provider:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-console&#34; data-lang=&#34;console&#34;&gt;# Since you are running locally, this step is important. Otherwise krustlet will pick up on your
# local config and not be able to update the node status properly
$ export KUBECONFIG=~/.krustlet/config/kubeconfig
$ krustlet-wasi --node-ip 10.0.2.2 --bootstrap-file=~/.krustlet/config/bootstrap.conf
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;step-3a-approving-the-serving-csr&#34;&gt;Step 3a: Approving the serving CSR&lt;/h3&gt;
&lt;p&gt;Once you have started Krustlet, there is one more manual step (though this could
be automated depending on your setup) to perform. The client certs Krustlet
needs are generally approved automatically by the API. However, the serving
certs require manual approval. To do this, you&amp;rsquo;ll need the hostname you
specified for the &lt;code&gt;--hostname&lt;/code&gt; flag or the output of &lt;code&gt;hostname&lt;/code&gt; if you didn&amp;rsquo;t
specify anything. From another terminal that&amp;rsquo;s configured to access the cluster,
run:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-console&#34; data-lang=&#34;console&#34;&gt;$ kubectl certificate approve &amp;lt;hostname&amp;gt;-tls
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;NOTE: You will only need to do this approval step the first time Krustlet
starts. It will generate and save all of the needed credentials to your machine&lt;/p&gt;
&lt;p&gt;In another terminal, run &lt;code&gt;kubectl get nodes -o wide&lt;/code&gt; and you should see output
that looks similar to below:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-console&#34; data-lang=&#34;console&#34;&gt;$ kubectl get nodes -o wide
NAME       STATUS   ROLES    AGE   VERSION   INTERNAL-IP      EXTERNAL-IP   OS-IMAGE               KERNEL-VERSION   CONTAINER-RUNTIME
minikube   Ready    master   18m   v1.18.0   192.168.99.165   &amp;lt;none&amp;gt;        Buildroot 2019.02.10   4.19.107         docker://19.3.8
krustlet   Ready    agent    9s    v1.17.0   10.0.2.2         &amp;lt;none&amp;gt;        &amp;lt;unknown&amp;gt;              &amp;lt;unknown&amp;gt;        mvp
&lt;/code&gt;&lt;/pre&gt;
      </description>
    </item>
    
    <item>
      <title>En: </title>
      <link>https://docs.krustlet.dev/en/howto/krustlet-on-wsl2/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://docs.krustlet.dev/en/howto/krustlet-on-wsl2/</guid>
      <description>
        
        
        &lt;h1 id=&#34;running-krustlet-on-wsl2-with-docker-desktop&#34;&gt;Running Krustlet on WSL2 with Docker Desktop&lt;/h1&gt;
&lt;p&gt;This how-to guide demonstrates how to boot a Krustlet node in Docker Desktop for
Windows with WSL2 backend.&lt;/p&gt;
&lt;h2 id=&#34;information&#34;&gt;Information&lt;/h2&gt;
&lt;p&gt;This tutorial will work on current Windows 10 Insider Slow ring and Docker
Desktop for Windows stable release.&lt;/p&gt;
&lt;p&gt;This tutorial will work on current Windows 10 Insider Slow ring and Docker
Desktop for Windows stable release.&lt;/p&gt;
&lt;p&gt;Concerning Windows, this tutorial should work on the Production ring once it
will be available.&lt;/p&gt;
&lt;p&gt;Last but not least, this will work on Windows 10 Home edition.&lt;/p&gt;
&lt;h2 id=&#34;prerequisites&#34;&gt;Prerequisites&lt;/h2&gt;
&lt;p&gt;You will require a WSL2 distro and Docker Desktop for Windows for this how-to.
The WSL2 backend and Kubernetes features will need to be also enabled. See the
&lt;a href=&#34;https://docs.docker.com/docker-for-windows/#kubernetes&#34;&gt;Docker Desktop for Windows &amp;gt; Getting started &amp;gt;
Kubernetes&lt;/a&gt; howto for
more information.&lt;/p&gt;
&lt;p&gt;This specific tutorial will be running Krustlet on your WSL2 distro and will
explain how to access it from Windows.&lt;/p&gt;
&lt;h2 id=&#34;step-1-determine-the-default-gateway&#34;&gt;Step 1: Determine the default gateway&lt;/h2&gt;
&lt;p&gt;The default gateway for most Docker containers is generally &lt;code&gt;172.17.0.1&lt;/code&gt;. This
IP is only reachable, by default, from the WSL2 distro. However, the &lt;code&gt;eth0&lt;/code&gt; host
network is accessible from Windows, so we can use this IP address to connect to
the WSL2 distro (where Krustlet is running).&lt;/p&gt;
&lt;p&gt;If this was changed, check &lt;code&gt;ifconfig eth0&lt;/code&gt; from the host OS to determine the
default gateway:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-console&#34; data-lang=&#34;console&#34;&gt;$ ifconfig eth0
eth0: flags=4163&amp;lt;UP,BROADCAST,RUNNING,MULTICAST&amp;gt;  mtu 1500
        inet 172.26.47.208  netmask 255.255.240.0  broadcast 172.26.47.255
        inet6 fe80::215:5dff:fe98:ce48  prefixlen 64  scopeid 0x20&amp;lt;link&amp;gt;
        ether 00:15:5d:98:ce:48  txqueuelen 1000  (Ethernet)
        RX packets 16818  bytes 11576089 (11.0 MiB)
        RX errors 0  dropped 0  overruns 0  frame 0
        TX packets 1093  bytes 115724 (113.0 KiB)
        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;In this example, I should use &lt;code&gt;172.26.47.208&lt;/code&gt;.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;TIP: get the IP from &lt;code&gt;eth0&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;&lt;code class=&#34;language-console&#34; data-lang=&#34;console&#34;&gt;$ export mainIP=$(ifconfig eth0 | grep &amp;quot;inet &amp;quot; | awk &#39;{ print $2 }&#39;)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The hostname being &amp;ldquo;applied&amp;rdquo; from Windows, the default hostname will not resolve
to this address, therefore you need to pass the &lt;code&gt;--node-ip&lt;/code&gt; and &lt;code&gt;--node-name&lt;/code&gt;
flag to Krustlet.&lt;/p&gt;
&lt;h2 id=&#34;step-2-get-a-bootstrap-config&#34;&gt;Step 2: Get a bootstrap config&lt;/h2&gt;
&lt;p&gt;Krustlet requires a bootstrap token and config the first time it runs. Follow
the guide &lt;a href=&#34;bootstrapping.md&#34;&gt;here&lt;/a&gt; to generate a bootstrap config and then
return to this document. This will If you already have a kubeconfig available
that you generated through another process, you can proceed to the next step.
However, the credentials Krustlet uses must be part of the &lt;code&gt;system:nodes&lt;/code&gt; group
in order for things to function properly.&lt;/p&gt;
&lt;h2 id=&#34;step-3-install-and-run-krustlet&#34;&gt;Step 3: Install and run Krustlet&lt;/h2&gt;
&lt;p&gt;First, install the latest release of Krustlet following &lt;a href=&#34;../intro/install.md&#34;&gt;the install
guide&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Second, ensure the Kubernetes context is correctly set to &lt;code&gt;docker-desktop&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-console&#34; data-lang=&#34;console&#34;&gt;$ kubectl config get-contexts
CURRENT   NAME                 CLUSTER          AUTHINFO         NAMESPACE
*         docker-desktop       docker-desktop   docker-desktop

# Optional if the context is not set correctly
$ kubectl config set-context docker-desktop
Context &amp;quot;docker-desktop&amp;quot; modified.
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Once you have done that, run the following commands to run Krustlet&amp;rsquo;s WASI
provider:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-console&#34; data-lang=&#34;console&#34;&gt;# Since you are running locally, this step is important. Otherwise krustlet will pick up on your
# local config and not be able to update the node status properly
$ export KUBECONFIG=~/.krustlet/config/kubeconfig
$ krustlet-wasi --node-ip $mainIP --node-name krustlet --bootstrap-file=~/.krustlet/config/bootstrap.conf
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;step-3a-approving-the-serving-csr&#34;&gt;Step 3a: Approving the serving CSR&lt;/h3&gt;
&lt;p&gt;Once you have started Krustlet, there is one more manual step (though this could
be automated depending on your setup) to perform. The client certs Krustlet
needs are generally approved automatically by the API. However, the serving
certs require manual approval. To do this, you&amp;rsquo;ll need the hostname you
specified for the &lt;code&gt;--hostname&lt;/code&gt; flag or the output of &lt;code&gt;hostname&lt;/code&gt; if you didn&amp;rsquo;t
specify anything. From another terminal that&amp;rsquo;s configured to access the cluster,
run:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-console&#34; data-lang=&#34;console&#34;&gt;$ kubectl certificate approve &amp;lt;hostname&amp;gt;-tls
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;NOTE: You will only need to do this approval step the first time Krustlet
starts. It will generate and save all of the needed credentials to your machine&lt;/p&gt;
&lt;p&gt;In another terminal, run &lt;code&gt;kubectl get nodes -o wide&lt;/code&gt; and you should see output
that looks similar to below:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-console&#34; data-lang=&#34;console&#34;&gt;$ kubectl get nodes -o wide
NAME             STATUS   ROLES    AGE     VERSION   INTERNAL-IP     EXTERNAL-IP   OS-IMAGE         KERNEL-VERSION                CONTAINER-RUNTIME
docker-desktop   Ready    master   3d23h   v1.15.5   192.168.65.3    &amp;lt;none&amp;gt;        Docker Desktop   4.19.104-microsoft-standard   docker://19.3.8
krustlet      Ready    agent    34s     v1.17.0   172.26.47.208   &amp;lt;none&amp;gt;        &amp;lt;unknown&amp;gt;        &amp;lt;unknown&amp;gt;                     mvp
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;optional-delete-the-krustlet-node&#34;&gt;Optional: Delete the Krustlet node&lt;/h2&gt;
&lt;p&gt;Once you will no more need the Krustlet node, you can remove it from your
cluster with the following &lt;code&gt;kubectl delete node&lt;/code&gt; command:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-console&#34; data-lang=&#34;console&#34;&gt;$ kubectl delete node krustlet
node &amp;quot;krustlet&amp;quot; deleted

$ kubectl get nodes -o wide
NAME             STATUS   ROLES    AGE   VERSION   INTERNAL-IP    EXTERNAL-IP   OS-IMAGE         KERNEL-VERSION                CONTAINER-RUNTIME
docker-desktop   Ready    master   4d    v1.15.5   192.168.65.3   &amp;lt;none&amp;gt;        Docker Desktop   4.19.104-microsoft-standard   docker://19.3.8
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;troubleshooting&#34;&gt;Troubleshooting&lt;/h2&gt;
&lt;h3 id=&#34;wasm-workloads-on-docker-desktop&#34;&gt;WASM workloads on Docker Desktop&lt;/h3&gt;
&lt;p&gt;Docker Desktop&amp;rsquo;s Kubernetes always provides a schedulable node called
&lt;code&gt;docker-desktop&lt;/code&gt;. This node uses Docker to run containers. If you want to run
WASM workloads on Krustlet, you must prevent these pods from being scheduled to
the &lt;code&gt;docker-desktop&lt;/code&gt; node. You can do this using a nodeSelector in pod specs.
See &lt;a href=&#34;../howto/wasm.md&#34;&gt;Running WASM workloads&lt;/a&gt; for details.&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>En: </title>
      <link>https://docs.krustlet.dev/en/howto/krustlet-with-inlets/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://docs.krustlet.dev/en/howto/krustlet-with-inlets/</guid>
      <description>
        
        
        &lt;h1 id=&#34;running-krustlet-on-kubernetes-with-inlets&#34;&gt;Running Krustlet on Kubernetes with inlets&lt;/h1&gt;
&lt;p&gt;These are steps for running a krustlet node on your own computer. You can run
any kind of Kubernetes cluster you like, whether that&amp;rsquo;s local on your computer
or remote in a managed Kubernetes offering.&lt;/p&gt;
&lt;p&gt;The instructions provided in this guide were contributed by &lt;a href=&#34;https://github.com/alexellis&#34;&gt;Alex
Ellis&lt;/a&gt;. For support with the instructions, see the
&lt;a href=&#34;https://slack.openfaas.io/&#34;&gt;#inlets channel of OpenFaaS Slack&lt;/a&gt; or raise a
GitHub issue and tag &lt;code&gt;@alexellis&lt;/code&gt;.&lt;/p&gt;
&lt;h2 id=&#34;prerequisites&#34;&gt;Prerequisites&lt;/h2&gt;
&lt;p&gt;There are a number of ways to give the Kubernetes API server access to the
krustlet&amp;rsquo;s API. Various methods include using a VPN, a VM within the Kubernetes
cluster&amp;rsquo;s private network, or a tunnel. &lt;a href=&#34;https://docs.inlets.dev/&#34;&gt;Inlets&lt;/a&gt; is a
popular open source service tunnel and proxy. It can be used to forward the port
of the krustlet to the Kubernetes cluster so that the Kubernetes API server can
access it as if it were deployed within the cluster directly.&lt;/p&gt;
&lt;p&gt;The tunnel has two components: A client which runs on your local machine, and a
server which is deployed as a Pod inside the Kubernetes cluster. The client
connects to the server and provides a persistent link.&lt;/p&gt;
&lt;p&gt;Download the latest release of the inlets binary from the &lt;a href=&#34;https://github.com/inlets/inlets/releases&#34;&gt;project release
page&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Move the binary to &lt;code&gt;/usr/local/bin&lt;/code&gt;, or place it somewhere on your &lt;code&gt;$PATH&lt;/code&gt;.&lt;/p&gt;
&lt;h2 id=&#34;step-1-get-a-bootstrap-config&#34;&gt;Step 1: Get a bootstrap config&lt;/h2&gt;
&lt;p&gt;Krustlet requires a bootstrap token and config the first time it runs. Follow
the guide &lt;a href=&#34;bootstrapping.md&#34;&gt;here&lt;/a&gt; to generate a bootstrap config and then
return to this document. This will If you already have a kubeconfig available
that you generated through another process, you can proceed to the next step.
However, the credentials Krustlet uses must be part of the &lt;code&gt;system:nodes&lt;/code&gt; group
in order for things to function properly.&lt;/p&gt;
&lt;h2 id=&#34;step-2-create-the-inlets-service&#34;&gt;Step 2: Create the inlets service&lt;/h2&gt;
&lt;p&gt;In order to start Krustlet with the correct node IP address, you&amp;rsquo;ll need to
create the &lt;code&gt;inlets&lt;/code&gt; service in Kubernetes like so:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-console&#34; data-lang=&#34;console&#34;&gt;cat &amp;lt;&amp;lt;EOF | kubectl apply -f -
apiVersion: v1
kind: Service
metadata:
  name: inlets
  labels:
    app: inlets
spec:
  type: ClusterIP
  ports:
    - port: 8000
      protocol: TCP
      targetPort: 8000
      name: control
    - port: 3000
      protocol: TCP
      targetPort: 3000
      name: data
  selector:
    app: inlets
EOF
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Once it has been created, run the following command to have the node IP
available for next steps. This is a stable IP and won&amp;rsquo;t change.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-console&#34; data-lang=&#34;console&#34;&gt;export NODE_IP=$(kubectl get service inlets -o jsonpath=&amp;quot;{.spec.clusterIP}&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;step-3-run-krustlet&#34;&gt;Step 3: Run &lt;code&gt;krustlet&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;You&amp;rsquo;ll need the certificates generated from the bootstrap process for our next
steps, so go ahead and start krustlet:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-console&#34; data-lang=&#34;console&#34;&gt;# Since you are running locally, this step is important. Otherwise krustlet will pick up on your
# local config and not be able to update the node status properly
export KUBECONFIG=~/.krustlet/config/kubeconfig
krustlet-wasi --node-ip $NODE_IP --bootstrap-file=~/.krustlet/config/bootstrap.conf
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Then open another terminal for the next steps.&lt;/p&gt;
&lt;h2 id=&#34;step-4-setup-inlets-server&#34;&gt;Step 4: Setup inlets server&lt;/h2&gt;
&lt;p&gt;Create a Kubernetes secret for the inlets server:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-console&#34; data-lang=&#34;console&#34;&gt;export TOKEN=$(head -c 16 /dev/urandom |shasum|cut -d- -f1)
echo $TOKEN &amp;gt; token.txt

kubectl create secret generic inlets-token --from-literal token=${TOKEN}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Then, create a Kubernetes secret for krustlet&amp;rsquo;s TLS certificates. These will be
used by the inlets server so that the kubelet can access the tunnel using the
expected TLS certificates.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-console&#34; data-lang=&#34;console&#34;&gt;kubectl create secret ghosttunnel-tls generic \
  --from-file tls.crt=~/.krustlet/config/krustlet.crt \
  --from-file tls.key=~/.krustlet/config/krustlet.key
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The inlets OSS version exposes services with HTTP within the cluster, so this
example uses &lt;code&gt;ghosttunnel&lt;/code&gt; as a tiny reverse proxy to mount the krustlet&amp;rsquo;s TLS
certificates so that the kubelet gets a valid HTTPS response. The service
created before will expose it to the cluster&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;color:#000&#34;&gt;$ cat &amp;lt;&amp;lt;EOF | kubectl apply -f -&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;apiVersion&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;apps/v1&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;kind&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;Deployment&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;metadata&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;name&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;inlets&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;spec&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;replicas&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;selector&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;matchLabels&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;      &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;app&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;inlets&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;template&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;metadata&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;      &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;labels&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;        &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;app&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;inlets&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;spec&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;      &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;volumes&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;        &lt;/span&gt;- &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;name&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;ghosttunnel-tls-volume&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;          &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;secret&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;            &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;secretName&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;ghosttunnel-tls&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;        &lt;/span&gt;- &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;name&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;inlets-token-volume&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;          &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;secret&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;            &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;secretName&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;inlets-token&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;      &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;containers&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;      &lt;/span&gt;- &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;name&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;inlets&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;        &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;image&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;inlets/inlets:2.7.0&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;        &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;imagePullPolicy&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;Always&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;        &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;command&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;inlets&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;]&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;        &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;args&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;        &lt;/span&gt;- &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;server&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;        &lt;/span&gt;- &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;--token-from=/var/inlets/token&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;        &lt;/span&gt;- &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;--control-port=8000&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;        &lt;/span&gt;- &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;--port=3001&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;        &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;volumeMounts&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;          &lt;/span&gt;- &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;name&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;inlets-token-volume&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;            &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;mountPath&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;/var/inlets/&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;      &lt;/span&gt;- &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;name&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;ghosttunnel&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;        &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;image&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;squareup/ghostunnel:v1.5.2&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;        &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;imagePullPolicy&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;Always&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;        &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;args&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;        &lt;/span&gt;- &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;server&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;        &lt;/span&gt;- &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;--target=127.0.0.1:3001&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;        &lt;/span&gt;- &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;--listen=0.0.0.0:3000&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;        &lt;/span&gt;- &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;--cert=/etc/tls/tls.crt&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;        &lt;/span&gt;- &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;--key=/etc/tls/tls.key&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;        &lt;/span&gt;- &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;--disable-authentication&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;        &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;volumeMounts&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;          &lt;/span&gt;- &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;name&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;ghosttunnel-tls-volume&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;            &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;mountPath&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;/etc/tls&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;EOF&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;step-5-run-the-inlets-client&#34;&gt;Step 5: Run the inlets client&lt;/h2&gt;
&lt;p&gt;Port-forward or expose the inlets server with:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-console&#34; data-lang=&#34;console&#34;&gt;kubectl port-forward svc/inlets 8000:8000 &amp;amp;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;You can also expose inlets via Ingress using cert-manager to give its
control-port a TLS certificate.&lt;/p&gt;
&lt;p&gt;Run the &lt;code&gt;inlets client&lt;/code&gt; on your computer:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-console&#34; data-lang=&#34;console&#34;&gt;inlets client \
  --upstream https://127.0.0.1:3000 \
  --remote ws://127.0.0.1:8000 --token $(token.txt)
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;step-6-verify-the-node-is-available&#34;&gt;Step 6: Verify the node is available&lt;/h2&gt;
&lt;p&gt;Show that the krustlet node has joined the cluster:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-console&#34; data-lang=&#34;console&#34;&gt;$ kubectl get nodes -o wide
NAME                   STATUS   ROLES    AGE    VERSION   INTERNAL-IP      EXTERNAL-IP       OS-IMAGE                       KERNEL-VERSION         CONTAINER-RUNTIME
pool-3xbltttyc-3no2p   Ready    &amp;lt;none&amp;gt;   153m   v1.16.6   10.131.25.141    206.189.19.185    Debian GNU/Linux 9 (stretch)   4.19.0-0.bpo.6-amd64   docker://18.9.2
pool-3xbltttyc-3no2s   Ready    &amp;lt;none&amp;gt;   153m   v1.16.6   10.131.28.223    206.189.123.184   Debian GNU/Linux 9 (stretch)   4.19.0-0.bpo.6-amd64   docker://18.9.2
krustlet               Ready    agent    43m    v1.17.0   10.245.157.226   &amp;lt;none&amp;gt;            &amp;lt;unknown&amp;gt;                      &amp;lt;unknown&amp;gt;              mvp
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;appendix&#34;&gt;Appendix&lt;/h2&gt;
&lt;h3 id=&#34;remove-the-port-forward-for-inlets-osshttpsdocsinletsdev&#34;&gt;Remove the port-forward for &lt;a href=&#34;https://docs.inlets.dev&#34;&gt;inlets OSS&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;We are using a port-forward to make it easier to use the tutorial. For permanent
use, you will want to expose the inlets server and its control port directly.
The OSS version can be configured with TLS, but this is not built-in.&lt;/p&gt;
&lt;p&gt;You can set up an Ingress rule for the control-port of the inlets server (port
8000), and obtain a TLS certificate from LetsEncrypt.&lt;/p&gt;
&lt;h3 id=&#34;use-inlets-pro-instead&#34;&gt;Use inlets PRO instead&lt;/h3&gt;
&lt;p&gt;Inlets OSS is an L7 proxy that requires additional work to configure for
krustlet. inlets PRO is a pure L4 TCP proxy with built-in TLS for the
control-plane.&lt;/p&gt;
&lt;p&gt;With &lt;a href=&#34;https://github.com/inlets/inlets-pro&#34;&gt;inlets PRO&lt;/a&gt; you can expose the
control port (8123) directly to the Internet as a NodePort, or LoadBalancer, or
if you wish via an Ingress definition. The control port already has TLS
configured, so won&amp;rsquo;t need additional link-layer encryption.&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>En: </title>
      <link>https://docs.krustlet.dev/en/howto/kubernetes-on-do/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://docs.krustlet.dev/en/howto/kubernetes-on-do/</guid>
      <description>
        
        
        &lt;h1 id=&#34;managed-kubernetes-on-digitalocean&#34;&gt;Managed Kubernetes on DigitalOcean&lt;/h1&gt;
&lt;p&gt;&lt;a href=&#34;https://www.digitalocean.com/products/kubernetes/&#34;&gt;Managed Kubernetes on DigitalOcean&lt;/a&gt;
is an inexpensive, professionally-managed Kubernetes service.&lt;/p&gt;
&lt;p&gt;You&amp;rsquo;ll need a DigitalOcean account and will need to have provided a payment method.
DigitalOcean offers a &lt;a href=&#34;https://try.digitalocean.com/freetrialoffer&#34;&gt;free trial&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&#34;prerequisites&#34;&gt;Prerequisites&lt;/h2&gt;
&lt;p&gt;You may provision Kubernetes clusters and Droplets (DigitalOcean VMs) using the
&lt;a href=&#34;https://cloud.digitalocean.com&#34;&gt;console&lt;/a&gt; but DigitalOcean&amp;rsquo;s CLI &lt;a href=&#34;https://github.com/digitalocean/doctl&#34;&gt;doctl&lt;/a&gt;
is comprehensive and recommended. The instructions that follow assume you&amp;rsquo;ve
installed doctl and &lt;a href=&#34;https://github.com/digitalocean/doctl#authenticating-with-digitalocean&#34;&gt;authenticated&lt;/a&gt;
to a DigitalOcean account.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;NOTE&lt;/strong&gt; If you use the doctl &lt;a href=&#34;https://github.com/digitalocean/doctl#snap-supported-os&#34;&gt;Snap&lt;/a&gt;,
consider connecting &lt;a href=&#34;https://github.com/digitalocean/doctl#use-with-kubectl&#34;&gt;kubectl&lt;/a&gt;
and &lt;a href=&#34;https://github.com/digitalocean/doctl#using-doctl-compute-ssh&#34;&gt;ssh-keys&lt;/a&gt; to
simplify the experience.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;create-managed-kubernetes-cluster&#34;&gt;Create Managed Kubernetes cluster&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;doctl kubernetes&lt;/code&gt; includes commands for provisioning clusters. In order to create
a cluster, you&amp;rsquo;ll need to provide a Kubernetes version, a node instance size, a
DigitalOcean region and the number of nodes. Values for some of the values may
be obtained using the following &lt;code&gt;doctl kubernetes&lt;/code&gt; commands:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-console&#34; data-lang=&#34;console&#34;&gt;$ doctl kubernetes options versions
$ doctl kubernetes options regions
$ doctl kubernetes options sizes
&lt;/code&gt;&lt;/pre&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;NOTE&lt;/strong&gt; DigitalOcean uses unique identifiers called &amp;ldquo;slugs&amp;rdquo;. &amp;ldquo;slugs&amp;rdquo; are the
identifiers used as values in many of &lt;code&gt;doctl&lt;/code&gt;&amp;rsquo;s commands, e.g. &lt;code&gt;1.19.3-do.3&lt;/code&gt; is
the slug for Kubernetes version &lt;code&gt;1.19.3&lt;/code&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;If you&amp;rsquo;d prefer to use some reasonable default values, you may use the following
command to create a cluster in DigitalOcean&amp;rsquo;s San Francisco region, using
Kubernetes &lt;code&gt;1.19.3&lt;/code&gt; with a single worker node (the master node is free). The
worker node has 1 vCPU and 2GB RAM (currently $10/month).&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-console&#34; data-lang=&#34;console&#34;&gt;$ CLUSTER=[[YOUR-CLUSTER-NAME]]
$ VERSION=&amp;quot;1.19.3-do.3&amp;quot;
$ SIZE=&amp;quot;s-1vcpu-2gb&amp;quot;
$ REGION=&amp;quot;sfo3&amp;quot;

$ doctl kubernetes cluster create ${CLUSTER} \
  --auto-upgrade \
  --count 1 \
  --version ${VERSION} \
  --size ${SIZE} \
  --region ${REGION}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;code&gt;doctl kubernetes cluster create&lt;/code&gt; should automatically update your default
Kubernetes config (Linux: &lt;code&gt;${HOME}/.kube/config&lt;/code&gt;). &lt;code&gt;doctl kubernetes cluster delete&lt;/code&gt;
will remove this entry when it deletes the cluster. You should be able to:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-console&#34; data-lang=&#34;console&#34;&gt;$ kubectl get nodes
NAME                            STATUS   ROLES    AGE   VERSION
${CLUSTER}-default-pool-39yh5   Ready    &amp;lt;none&amp;gt;   1m    v1.19.3
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;delete-managed-kubernetes-cluster&#34;&gt;Delete Managed Kubernetes cluster&lt;/h2&gt;
&lt;p&gt;When you are finished with the cluster, you may delete it with:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-console&#34; data-lang=&#34;console&#34;&gt;$ doctl kubernetes cluster delete ${CLUSTER}
&lt;/code&gt;&lt;/pre&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;NOTE&lt;/strong&gt; This command should (!) delete the cluster&amp;rsquo;s entries (context, user)
from the default Kubernetes config (Linux `{$HOME}/.kube/config) too.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;To confirm that the cluster has been deleted, if you try listing the clusters,
the cluster you deleted should no longer be present:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-console&#34; data-lang=&#34;console&#34;&gt;$ doctl kubernetes cluster list
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Or you may confirm that the Droplets have been deleted:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-console&#34; data-lang=&#34;console&#34;&gt;$ doctl compute droplet list
&lt;/code&gt;&lt;/pre&gt;
      </description>
    </item>
    
    <item>
      <title>En: </title>
      <link>https://docs.krustlet.dev/en/howto/kubernetes-on-gke/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://docs.krustlet.dev/en/howto/kubernetes-on-gke/</guid>
      <description>
        
        
        &lt;h1 id=&#34;running-kubernetes-on-google-kubernetes-engine-gke&#34;&gt;Running Kubernetes on Google Kubernetes Engine (GKE)&lt;/h1&gt;
&lt;p&gt;&lt;a href=&#34;https://cloud.google.com/kubernetes-engine&#34;&gt;Google Kubernetes Engine (GKE)&lt;/a&gt; is
a secured and managed Kubernetes service.&lt;/p&gt;
&lt;p&gt;If you haven&amp;rsquo;t used Google Cloud Platform, you&amp;rsquo;ll need a Google (e.g. Gmail)
account. As a new customer, you may benefit from $300 free credit. Google Cloud
Platform includes always free products. See &lt;a href=&#34;https://cloud.google.com/free&#34;&gt;Google Cloud Platform Free
Tier&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;prerequisites&#34;&gt;Prerequisites&lt;/h2&gt;
&lt;p&gt;You should be able to run &lt;a href=&#34;https://cloud.google.com/sdk&#34;&gt;Google Cloud SDK&lt;/a&gt;
command-line tool &lt;code&gt;gcloud&lt;/code&gt;. This is used to provision resources in Google Cloud
Platform including Kubernetes clusters.&lt;/p&gt;
&lt;p&gt;Either install &lt;a href=&#34;https://cloud.google.com/sdk/install&#34;&gt;Google Cloud SDK&lt;/a&gt; or open
a &lt;a href=&#34;https://console.cloud.google.com/home/dashboard?cloudshell=true&#34;&gt;Cloud
Shell&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Google Cloud SDK is available for Linux, Windows and Mac OS. The instructions
that follow document using the command-line on Linux. There may be subtle
changes for Windows and Mac OS.&lt;/p&gt;
&lt;p&gt;Google Cloud Platform provides a browser-based
&lt;a href=&#34;https://console.cloud.google.com&#34;&gt;Console&lt;/a&gt;. This is generally functionally
equivalent to the command-line tool. The instructions that follow document using
the command-line tool but you may perform these steps using the Console too.&lt;/p&gt;
&lt;p&gt;You will also need Kubernetes command-line tool &lt;code&gt;kubectl&lt;/code&gt;. &lt;code&gt;kubectl&lt;/code&gt; is used by
all Kubernetes distributions. So, if you&amp;rsquo;ve created Kubernetes clusters locally
or on other cloud platforms, you may already have this tool installed. See
&lt;a href=&#34;https://kubernetes.io/docs/tasks/tools/install-kubectl/&#34;&gt;Install and Set Up
kubectl&lt;/a&gt; for
instructions.&lt;/p&gt;
&lt;h2 id=&#34;configure-google-cloud-cli&#34;&gt;Configure Google Cloud CLI&lt;/h2&gt;
&lt;p&gt;After installing Google Cloud SDK, you will need to initialize the tool. This
also authenticates your account using a Google identity (e.g. Gmail). Do this by
typing &lt;code&gt;gcloud init&lt;/code&gt;. If for any reason, you have already run &lt;code&gt;gcloud init&lt;/code&gt;, you
may reauthenticate using &lt;code&gt;gcloud auth login&lt;/code&gt; or check authentication with
&lt;code&gt;gcloud auth list&lt;/code&gt;.&lt;/p&gt;
&lt;h2 id=&#34;create-gke-cluster&#34;&gt;Create GKE cluster&lt;/h2&gt;
&lt;p&gt;Google Cloud Platform resources are aggregated by projects. Projects are
assigned to Billing Accounts. GKE uses Compute Engine VMs as nodes and Compute
Engine VMs require that assign a Billing Account to our project so that we may
pay for the VMs.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-console&#34; data-lang=&#34;console&#34;&gt;$ PROJECT=[YOUR-PROJECT] # Perhaps $(whoami)-$(date +%y%m%d)-krustlet
$ BILLING=[YOUR-BILLING] # You may list these using `gcloud beta billing accounts list`
$ # Create Project and assing Billing Account
$ gcloud projects create ${PROJECT}
$ gcloud alpha billing projects link ${PROJECT} --billing-account=${BILLING}
$ # Enable Kubernetes Engine &amp;amp; Compute Engine
$ gcloud services enable container.googleapis.com --project=${PROJECT}
$ gcloud services enable compute.googleapis.com --project=${PROJECT}
$ REGION=&amp;quot;us-west1&amp;quot; # Use a region close to you `gcloud compute regions list --project=${PROJECT}`
$ CLUSTER=&amp;quot;cluster&amp;quot;
$ # Create GKE cluster with 3 nodes (one per zone in the region)
$ gcloud beta container clusters create ${CLUSTER} \
--project=${PROJECT} \
--region=${REGION} \
--no-enable-basic-auth \
--release-channel &amp;quot;rapid&amp;quot; \
--machine-type &amp;quot;n1-standard-1&amp;quot; \
--image-type &amp;quot;COS_CONTAINERD&amp;quot; \
--preemptible \
--num-nodes=&amp;quot;1&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;NOTE&lt;/strong&gt; This creates a cluster with nodes distributed across multiple zones
in a region. This increases the cluster&amp;rsquo;s availability. If you&amp;rsquo;d prefer a less
available (and cheaper) single zone cluster, you may use the following commands
instead:&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;&lt;code class=&#34;language-console&#34; data-lang=&#34;console&#34;&gt;$ ZONE=&amp;quot;${REGION}-a&amp;quot; # Or &amp;quot;-b&amp;quot; or &amp;quot;-c&amp;quot;
$ gcloud beta container clusters create ${CLUSTER} \
--project=${PROJECT} \
--zone=${ZONE} \
--no-enable-basic-auth \
--release-channel &amp;quot;rapid&amp;quot; \
--machine-type &amp;quot;n1-standard-1&amp;quot; \
--image-type &amp;quot;COS_CONTAINERD&amp;quot; \
--preemptible \
--num-nodes=&amp;quot;1&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;After a minute, you should see the cluster created:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-console&#34; data-lang=&#34;console&#34;&gt;NAME     LOCATION  MASTER_VERSION  MASTER_IP       MACHINE_TYPE   NODE_VERSION   NUM_NODES  STATUS
cluster  us-west1  1.17.4-gke.10   xx.xx.xx.xx     n1-standard-1  1.17.4-gke.10  3          RUNNING
&lt;/code&gt;&lt;/pre&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;NOTE&lt;/strong&gt; You may also use Cloud Console to interact with the cluster:
&lt;a href=&#34;https://console.cloud.google.com/&#34;&gt;https://console.cloud.google.com/&lt;/a&gt; &lt;strong&gt;NOTE&lt;/strong&gt; &lt;code&gt;gcloud clusters create&lt;/code&gt; also
configures &lt;code&gt;kubectl&lt;/code&gt; to be able to access the cluster.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;You may confirm access to the cluster by typing:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-console&#34; data-lang=&#34;console&#34;&gt;$ kubectl get nodes
NAME                                     STATUS   ROLES    AGE   VERSION
gke-cluster-default-pool-1a3a5b85-scds   Ready    &amp;lt;none&amp;gt;   10m   v1.17.4-gke.10
gke-cluster-default-pool-3885c0e3-6zw2   Ready    &amp;lt;none&amp;gt;   10m   v1.17.4-gke.10
gke-cluster-default-pool-6d70a85d-19r8   Ready    &amp;lt;none&amp;gt;   10m   v1.17.4-gke.10
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;You may confirm the Kubernetes configuration either by:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-console&#34; data-lang=&#34;console&#34;&gt;$ more ${HOME}/.kube/config
apiVersion: v1
clusters:
- cluster:
    certificate-authority-data: LS0tLS1C...
    server: https://xx.xx.xx.xx
  name: gke_${PROJECT}_${REGION}_${CLUSTER}
contexts:
- context:
    cluster: gke_${PROJECT}_${REGION}_${CLUSTER}
    user: gke_${PROJECT}_${REGION}_${CLUSTER}
  name: gke_${PROJECT}_${REGION}_${CLUSTER}
current-context: gke_${PROJECT}_${REGION}_${CLUSTER}
kind: Config
preferences: {}
users:
- name: gke_${PROJECT}_${REGION}_${CLUSTER}
  user:
    auth-provider:
      config:
        cmd-args: config config-helper --format=json
        cmd-path: /snap/google-cloud-sdk/130/bin/gcloud
        expiry-key: &#39;{.credential.token_expiry}&#39;
        token-key: &#39;{.credential.access_token}&#39;
      name: gcp
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Or:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-console&#34; data-lang=&#34;console&#34;&gt;$ kubectl config current-context
gke_${PROJECT}_${REGION}_${CLUSTER}
$ kubectl config get-contexts
CURRENT   NAME                                  CLUSTER                               AUTHINFO
*         gke_${PROJECT}_${REGION}_${CLUSTER}   gke_${PROJECT}_${REGION}_${CLUSTER}   gke_${PROJECT}_${REGION}_${CLUSTER}
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;delete-the-cluster&#34;&gt;Delete the Cluster&lt;/h2&gt;
&lt;p&gt;When you are finished with the cluster, you may delete it with:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-console&#34; data-lang=&#34;console&#34;&gt;$ gcloud beta container clusters delete ${CLUSTER} --project=${PROJECT} --region=${REGION} --quiet
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;If you wish to delete everything in the project, you may delete hte project
(including all its resources) with:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-console&#34; data-lang=&#34;console&#34;&gt;$ gcloud projects delete ${PROJECT} --quiet
&lt;/code&gt;&lt;/pre&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;NOTE&lt;/strong&gt; Both commands are irrevocable.&lt;/p&gt;
&lt;/blockquote&gt;

      </description>
    </item>
    
    <item>
      <title>En: </title>
      <link>https://docs.krustlet.dev/en/howto/kubernetes-on-kind/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://docs.krustlet.dev/en/howto/kubernetes-on-kind/</guid>
      <description>
        
        
        &lt;h1 id=&#34;running-kubernetes-on-kubernetes-in-docker-kind&#34;&gt;Running Kubernetes on Kubernetes in Docker (KinD)&lt;/h1&gt;
&lt;p&gt;This tutorial will focus on using a tool called &lt;a href=&#34;https://github.com/kubernetes-sigs/kind&#34;&gt;kind&lt;/a&gt;,
also known as &amp;ldquo;Kubernetes IN Docker&amp;rdquo;.&lt;/p&gt;
&lt;p&gt;If you haven&amp;rsquo;t installed them already, go ahead and &lt;a href=&#34;https://docs.docker.com/install/&#34;&gt;install
Docker&lt;/a&gt;, &lt;a href=&#34;https://github.com/kubernetes-sigs/kind#installation-and-usage&#34;&gt;install
kind&lt;/a&gt;, and &lt;a href=&#34;https://kubernetes.io/docs/tasks/tools/install-kubectl/&#34;&gt;install
kubectl&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;You&amp;rsquo;ll need &lt;code&gt;kubectl&lt;/code&gt; to interact with the cluster once it&amp;rsquo;s created.&lt;/p&gt;
&lt;h2 id=&#34;create-a-cluster&#34;&gt;Create a cluster&lt;/h2&gt;
&lt;p&gt;Once Docker, kind, and kubectl are installed, create a cluster with kind:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-console&#34; data-lang=&#34;console&#34;&gt;$ kind create cluster
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;This will create a cluster with a single node - perfect for local development.&lt;/p&gt;
&lt;p&gt;You should see output similar to the following:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-console&#34; data-lang=&#34;console&#34;&gt;Creating cluster &amp;quot;kind&amp;quot; ...
 ✓ Ensuring node image (kindest/node:v1.17.0) 🖼
 ✓ Preparing nodes 📦
 ✓ Writing configuration 📜
 ✓ Starting control-plane 🕹️
 ✓ Installing CNI 🔌
 ✓ Installing StorageClass 💾
Set kubectl context to &amp;quot;kind-kind&amp;quot;
You can now use your cluster with:

kubectl cluster-info --context kind-kind

Have a nice day! 👋
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Now we can interact with our cluster! Try that out now:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-console&#34; data-lang=&#34;console&#34;&gt;$ kubectl cluster-info
Kubernetes master is running at https://127.0.0.1:32768
KubeDNS is running at https://127.0.0.1:32768/api/v1/namespaces/kube-system/services/kube-dns:dns/proxy
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;To further debug and diagnose cluster problems, use &amp;lsquo;kubectl cluster-info dump&amp;rsquo;.&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>En: </title>
      <link>https://docs.krustlet.dev/en/howto/kubernetes-on-minikube/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://docs.krustlet.dev/en/howto/kubernetes-on-minikube/</guid>
      <description>
        
        
        &lt;h1 id=&#34;running-kubernetes-on-minikube&#34;&gt;Running Kubernetes on Minikube&lt;/h1&gt;
&lt;p&gt;This tutorial will focus on using a tool called
&lt;a href=&#34;https://github.com/kubernetes/minikube&#34;&gt;minikube&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;If you haven&amp;rsquo;t installed them already, go ahead and &lt;a href=&#34;https://www.virtualbox.org/&#34;&gt;install VirtualBox 5.2 or
higher&lt;/a&gt;, &lt;a href=&#34;https://minikube.sigs.k8s.io/docs/start/linux/&#34;&gt;install
minikube&lt;/a&gt;, and &lt;a href=&#34;https://kubernetes.io/docs/tasks/tools/install-kubectl/&#34;&gt;install
kubectl&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;You&amp;rsquo;ll need &lt;code&gt;kubectl&lt;/code&gt; to interact with the cluster once it&amp;rsquo;s created.&lt;/p&gt;
&lt;h2 id=&#34;check-virtualization-support&#34;&gt;Check virtualization support&lt;/h2&gt;
&lt;p&gt;To use VM drivers, verify that your system has virtualization support enabled:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-console&#34; data-lang=&#34;console&#34;&gt;$ egrep -q &#39;vmx|svm&#39; /proc/cpuinfo &amp;amp;&amp;amp; echo yes || echo no
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;If the above command outputs “no”:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;If you are running within a VM, your hypervisor does not allow nested
virtualization. You will need to use the &lt;em&gt;None (bare-metal)&lt;/em&gt; driver&lt;/li&gt;
&lt;li&gt;If you are running on a physical machine, ensure that your BIOS has hardware
virtualization enabled&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;create-a-cluster&#34;&gt;Create a cluster&lt;/h2&gt;
&lt;p&gt;Once VirtualBox, minikube, and kubectl are installed, create a cluster with
minikube:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-console&#34; data-lang=&#34;console&#34;&gt;$ minikube start --driver=virtualbox
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;This will create a cluster with a single node - perfect for local development.&lt;/p&gt;
&lt;p&gt;You should see output similar to the following:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-console&#34; data-lang=&#34;console&#34;&gt;😄  minikube v1.9.0 on Ubuntu 18.04
✨  Using the virtualbox driver based on user configuration
💿  Downloading VM boot image ...
💾  Downloading Kubernetes v1.18.0 preload ...
🔥  Creating virtualbox VM (CPUs=2, Memory=6000MB, Disk=20000MB) ...
🐳  Preparing Kubernetes v1.18.0 on Docker 19.03.8 ...
🌟  Enabling addons: default-storageclass, storage-provisioner
🏄  Done! kubectl is now configured to use &amp;quot;minikube&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Now we can interact with our cluster! Try that out now:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-console&#34; data-lang=&#34;console&#34;&gt;$ kubectl cluster-info
Kubernetes master is running at https://192.168.99.164:8443
KubeDNS is running at https://192.168.99.164:8443/api/v1/namespaces/kube-system/services/kube-dns:dns/proxy
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;To further debug and diagnose cluster problems, use &amp;lsquo;kubectl cluster-info dump&amp;rsquo;.&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>En: </title>
      <link>https://docs.krustlet.dev/en/howto/wasm/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://docs.krustlet.dev/en/howto/wasm/</guid>
      <description>
        
        
        &lt;h1 id=&#34;running-web-assembly-wasm-workloads-in-kubernetes&#34;&gt;Running Web Assembly (WASM) workloads in Kubernetes&lt;/h1&gt;
&lt;p&gt;The Krustlet repository contains the built-in &lt;code&gt;krustlet-wasi&lt;/code&gt; provider for
running WASM workloads in Kubernetes. There is also a &lt;code&gt;krustlet-wasmcloud&lt;/code&gt;
&lt;a href=&#34;https://github.com/wasmCloud/krustlet-wasmcloud-provider&#34;&gt;provider&lt;/a&gt; available
that also runs WASM workloads. These kubelets run workloads implemented as Web
Assembly (WASM) modules rather than as OCI containers. Each running instance
appears to Kubernetes as a node; Kubernetes schedules work to the instance as to
any other node.&lt;/p&gt;
&lt;h2 id=&#34;running-wasm-modules-on-the-right-kubelet&#34;&gt;Running WASM modules on the right kubelet&lt;/h2&gt;
&lt;p&gt;WASM modules are not interchangeable with OCI containers: &lt;code&gt;krustlet-wasi&lt;/code&gt; and
&lt;code&gt;krustlet-wasmcloud&lt;/code&gt; can&amp;rsquo;t run OCI containers, and normal OCI nodes can&amp;rsquo;t run WASM
modules. In order to run your WASM workloads on the right nodes, you should use
the Kubernetes tolerations system; in some cases you will also need to use node
affinity.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;krustlet-wasi&lt;/code&gt; and &lt;code&gt;krustlet-wasmcloud&lt;/code&gt; &amp;lsquo;virtual nodes&amp;rsquo; both have &lt;code&gt;NoExecute&lt;/code&gt;
and &lt;code&gt;NoSchedule&lt;/code&gt; taints with the key &lt;code&gt;kubernetes.io/arch&lt;/code&gt; and a provider-defined
value (&lt;code&gt;wasm32-wasi&lt;/code&gt; or &lt;code&gt;wasm32-wasmcloud&lt;/code&gt; respectively).
WASM pods must therefore specify a toleration for this taint.  For example:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;apiVersion&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;v1&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;kind&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;Pod&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;metadata&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;name&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;hello-wasm&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;spec&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;containers&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;  &lt;/span&gt;- &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;name&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;hello-wasm&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;image&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;webassembly.azurecr.io/hello-wasm:v1&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;tolerations&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;  &lt;/span&gt;- &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;effect&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;NoExecute&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;key&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;kubernetes.io/arch&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;operator&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;Equal&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;value&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;wasm32-wasi  &lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;# or wasm32-wasmcloud according to module target arch&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;  &lt;/span&gt;- &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;effect&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;NoSchedule&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;key&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;kubernetes.io/arch&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;operator&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;Equal&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;value&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;wasm32-wasi  &lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;# or wasm32-wasmcloud according to module target arch&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;In addition, if the Kubernetes cluster contains &amp;lsquo;standard&amp;rsquo; OCI nodes which do
not taint themselves, you should prevent Kubernetes from scheduling WASM
workloads to those nodes.  To do this, you can either taint the OCI nodes
(though this may require you to provide suitable tolerations on OCI pods), or
you can specify a node selector on the WASM workload to direct it to compatible
nodes:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;apiVersion&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;v1&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;kind&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;Pod&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;metadata&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;name&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;hello-wasm&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;spec&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;# other values as above&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;nodeSelector&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;kubernetes.io/arch&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;wasm32-wasi &lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;# or wasm32-wasmcloud&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;If you get intermittent image pull errors on your WASM workloads, check that
they are not inadvertently getting scheduled to OCI nodes.&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>En: </title>
      <link>https://docs.krustlet.dev/en/intro/install/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://docs.krustlet.dev/en/intro/install/</guid>
      <description>
        
        
        &lt;h1 id=&#34;install-krustlet&#34;&gt;Install Krustlet&lt;/h1&gt;
&lt;p&gt;This guide shows how to install Krustlet.&lt;/p&gt;
&lt;h2 id=&#34;from-the-binary-releases&#34;&gt;From the Binary Releases&lt;/h2&gt;
&lt;p&gt;Every release of Krustlet provides compiled releases for a variety of Operating
Systems. These compiled releases can be manually downloaded and installed.
Please note these instructions will work on Linux, MacOS, and Windows (in
PowerShell)&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Download your desired version from &lt;a href=&#34;https://github.com/deislabs/krustlet/releases&#34;&gt;the releases
page&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Unpack it (&lt;code&gt;tar -xzf krustlet-v0.6.0-linux-amd64.tar.gz&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;Find the desired Krustlet provider in the unpacked directory, and move it to
its desired destination somewhere in your &lt;code&gt;$PATH&lt;/code&gt; (e.g. &lt;code&gt;mv krustlet-wasi /usr/local/bin/&lt;/code&gt; on unix-like systems or &lt;code&gt;mv krustlet-wasi.exe C:\Windows\system32\&lt;/code&gt; on Windows)&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;From there, you should be able to run the client in your terminal emulator. If
your terminal cannot find Krustlet, check to make sure that your &lt;code&gt;$PATH&lt;/code&gt;
environment variable is set correctly.&lt;/p&gt;
&lt;h3 id=&#34;validating&#34;&gt;Validating&lt;/h3&gt;
&lt;p&gt;If you&amp;rsquo;d like to validate the download, checksums can be downloaded from
&lt;a href=&#34;https://krustlet.blob.core.windows.net/releases/checksums-v0.6.0.txt&#34;&gt;https://krustlet.blob.core.windows.net/releases/checksums-v0.6.0.txt&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;windows&#34;&gt;Windows&lt;/h3&gt;
&lt;p&gt;As of Krustlet 0.4, there are now Windows builds available. However, there are
some caveats. The underlying dependencies used to support Windows do not support
certs with IP SANs (subject alternate names). Because of this, the serving certs
requested during bootstrap will not work for local development options like
minikube or KinD as they do not have an FQDN. So these builds can only be used
in environments with an actual hostname/FQDN accessible to the Kubernetes
cluster.&lt;/p&gt;
&lt;h2 id=&#34;from-canary-builds&#34;&gt;From Canary Builds&lt;/h2&gt;
&lt;p&gt;“Canary” builds are versions of Krustlet that are built from &lt;code&gt;master&lt;/code&gt;. They are
not official releases, and may not be stable. However, they offer the
opportunity to test the cutting edge features before they are released.&lt;/p&gt;
&lt;p&gt;Here are links to the common builds:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://krustlet.blob.core.windows.net/releases/checksums-canary.txt&#34;&gt;checksum
file&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://krustlet.blob.core.windows.net/releases/krustlet-canary-linux-amd64.tar.gz&#34;&gt;64-bit Linux (AMD
architecture)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://krustlet.blob.core.windows.net/releases/krustlet-canary-linux-aarch64.tar.gz&#34;&gt;64-bit Linux (ARM
architecture)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://krustlet.blob.core.windows.net/releases/krustlet-canary-macos-amd64.tar.gz&#34;&gt;64-bit macOS (AMD
architecture)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://krustlet.blob.core.windows.net/releases/krustlet-canary-windows-amd64.tar.gz&#34;&gt;64-bit
Windows&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;compiling-from-source&#34;&gt;Compiling from Source&lt;/h2&gt;
&lt;p&gt;If you want to compile Krustlet from source, you will need to follow the
&lt;a href=&#34;../community/developers.md&#34;&gt;developer guide&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&#34;next-steps&#34;&gt;Next Steps&lt;/h2&gt;
&lt;p&gt;After installing Krustlet, if you&amp;rsquo;d like to get started and see something
running, go checkout any one of the &lt;a href=&#34;../../demos&#34;&gt;demos&lt;/a&gt;. Each of them has a
prebuilt WebAssembly module stored in a registry and a Kubernetes manifest that
you can &lt;code&gt;kubectl apply&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;If you&amp;rsquo;d like to learn how to write your own simple module in Rust and deploy
it, &lt;a href=&#34;tutorial01.md&#34;&gt;follow through the tutorial&lt;/a&gt; to deploy your first
application.&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>En: </title>
      <link>https://docs.krustlet.dev/en/intro/intro/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://docs.krustlet.dev/en/intro/intro/</guid>
      <description>
        
        
        &lt;h1 id=&#34;introduction&#34;&gt;Introduction&lt;/h1&gt;
&lt;p&gt;Krustlet is a tool to run WebAssembly workloads natively on Kubernetes. Krustlet
acts like a node in your Kubernetes cluster. When a user schedules a Pod with
certain node tolerations, the Kubernetes API will schedule that workload to a
Krustlet node, which will then fetch the module and run it.&lt;/p&gt;
&lt;p&gt;Krustlet implements the &lt;a href=&#34;../topics/glossary.md#kubelet&#34;&gt;kubelet&lt;/a&gt; API, and it
will respond to common API requests like &lt;code&gt;kubectl logs&lt;/code&gt; or &lt;code&gt;kubectl delete&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;If you&amp;rsquo;d like to learn how to deploy Krustlet on your own cluster (or if you&amp;rsquo;re
just getting started), follow the &lt;a href=&#34;quickstart.md&#34;&gt;quickstart guide&lt;/a&gt; for
instructions on deploying your first Kubernetes cluster.&lt;/p&gt;
&lt;p&gt;In order for your application to run on a Kruslet node, the application must be
compiled to WebAssembly and pushed to a container registry. If you&amp;rsquo;d like to
learn more about how to write your own WebAssembly module in Rust and deploy it,
&lt;a href=&#34;tutorial01.md&#34;&gt;follow through the tutorial&lt;/a&gt; to deploy your first application.&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>En: </title>
      <link>https://docs.krustlet.dev/en/intro/quickstart/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://docs.krustlet.dev/en/intro/quickstart/</guid>
      <description>
        
        
        &lt;h1 id=&#34;quick-start&#34;&gt;Quick Start&lt;/h1&gt;
&lt;p&gt;Get started with Krustlet in three easy steps:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Boot a Kubernetes cluster&lt;/li&gt;
&lt;li&gt;Boot a Krustlet node&lt;/li&gt;
&lt;li&gt;Deploy your first application&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;As Krustlet is under active development, this guide will help you set up a
cluster suitable for evaluation, development, and testing purposes.&lt;/p&gt;
&lt;h2 id=&#34;step-1-boot-a-kubernetes-cluster&#34;&gt;Step 1: Boot a Kubernetes Cluster&lt;/h2&gt;
&lt;p&gt;There are many ways to boot up a Kubernetes cluster. You may choose to get up
and running in cloud environments or locally on your laptop.&lt;/p&gt;
&lt;p&gt;If you have already created a Kubernetes cluster, proceed to the next step to
install Krustlet on your own Kubernetes cluster.&lt;/p&gt;
&lt;p&gt;For production use:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;../howto/krustlet-on-azure.md&#34;&gt;Azure&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;../howto/kubernetes-on-eks.md&#34;&gt;Amazon Elastic Kubernetes Service (EKS)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;For development and evaluation purposes, it may make sense to use a VM-based
Kubernetes cluster for quick and easy setup and teardown:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;../howto/kubernetes-on-kind.md&#34;&gt;Kubernetes-in-Docker (KinD)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;../howto/kubernetes-on-minikube.md&#34;&gt;Minikube&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;step-2-boot-a-krustlet-node&#34;&gt;Step 2: Boot a Krustlet Node&lt;/h2&gt;
&lt;p&gt;Depending on whatever provider you chose in step 1, you now have a few options
to boot and register Krustlet with your Kubernetes cluster.&lt;/p&gt;
&lt;p&gt;If you have your own Kubernetes cluster, you may want to follow the steps in the
cloud-based option guides to determine how to set up Krustlet for your own
infrastructure.&lt;/p&gt;
&lt;p&gt;For production use, you&amp;rsquo;ll want to boot Krustlet on a device that can start a
web server on an IP accessible from the Kubernetes control plane.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;../howto/krustlet-on-eks.md&#34;&gt;Amazon Elastic Kubernetes Service (EKS)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;For testing/development environments:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;../howto/krustlet-on-kind.md&#34;&gt;Kubernetes-in-Docker (KinD)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;../howto/krustlet-on-microk8s.md&#34;&gt;MicroK8s&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;../howto/krustlet-on-minikube.md&#34;&gt;Minikube&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;../howto/krustlet-on-wsl2.md&#34;&gt;Windows Subsystem for Linux (WSL2)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;step-3-deploy-your-first-application&#34;&gt;Step 3: Deploy your First Application&lt;/h2&gt;
&lt;p&gt;If you just want to get started and see something running, go checkout any one
of the &lt;a href=&#34;../../demos&#34;&gt;demos&lt;/a&gt;. Each of them has a prebuilt WebAssembly module
stored in a registry and a Kubernetes manifest that you can &lt;code&gt;kubectl apply&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;If you&amp;rsquo;d like to learn how to write your own simple module in Rust and deploy
it, &lt;a href=&#34;tutorial01.md&#34;&gt;follow through the tutorial&lt;/a&gt; to deploy your first
application.&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>En: </title>
      <link>https://docs.krustlet.dev/en/intro/readnext/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://docs.krustlet.dev/en/intro/readnext/</guid>
      <description>
        
        
        &lt;h1 id=&#34;what-to-read-next&#34;&gt;What to read next&lt;/h1&gt;
&lt;p&gt;So you’ve read all the introductory material and have decided you’d like to keep
using Krustlet to run your WebAssembly applications. We’ve only just scratched
the surface.&lt;/p&gt;
&lt;p&gt;So what’s next?&lt;/p&gt;
&lt;p&gt;Well, we’ve always been big fans of learning by doing. At this point you should
know enough to start a project of your own and start fooling around. As you need
to learn new tricks, come back to the documentation.&lt;/p&gt;
&lt;p&gt;We’ve put a lot of effort into making Krustlet&amp;rsquo;s documentation useful, easy to
read and as complete as possible. The rest of this document explains more about
how the documentation works so that you can get the most out of it.&lt;/p&gt;
&lt;p&gt;(Yes, this is documentation about documentation. Rest assured we have no plans
to write a document about how to read the document about documentation.)&lt;/p&gt;
&lt;h2 id=&#34;how-the-documentation-is-organized&#34;&gt;How the documentation is organized&lt;/h2&gt;
&lt;p&gt;Krustlet&amp;rsquo;s main documentation is broken up into “chunks” designed to fill
different needs:&lt;/p&gt;
&lt;p&gt;The [introductory material][intro] is designed for people new to Krustlet – or
to WebAssembly on Kubernetes in general. It doesn’t cover anything in depth, but
instead gives a high-level overview of how running apps on Kubernetes“feels”.&lt;/p&gt;
&lt;p&gt;The [topic guides][topics], on the other hand, dive deep into individual parts
of Krustlet. There are complete guides to the internals of Krustlet&amp;rsquo;s
architecture. This is probably where you’ll want to spend most of your time; if
you work your way through these guides you should come out knowing pretty much
everything there is to know about Krustlet.&lt;/p&gt;
&lt;p&gt;[intro]: README.md [topics]: ../topics/README.md&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>En: </title>
      <link>https://docs.krustlet.dev/en/intro/tutorial01/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://docs.krustlet.dev/en/intro/tutorial01/</guid>
      <description>
        
        
        &lt;h1 id=&#34;writing-your-first-app-part-1&#34;&gt;Writing your first app, part 1&lt;/h1&gt;
&lt;p&gt;Let’s learn by example.&lt;/p&gt;
&lt;p&gt;Throughout this tutorial, we’ll walk you through the creation of a basic WASI
application. Once ready, we will package that application and install it onto
the Kubernetes cluster using krustlet.&lt;/p&gt;
&lt;p&gt;The tutorial will consist of three parts:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Building the application&lt;/li&gt;
&lt;li&gt;Publishing the application to a registry&lt;/li&gt;
&lt;li&gt;Running the application with Krustlet&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;prerequisites&#34;&gt;Prerequisites&lt;/h2&gt;
&lt;p&gt;We’ll assume you have Cargo (a package management system for Rust) installed
already.&lt;/p&gt;
&lt;p&gt;If you&amp;rsquo;re compiling the application written in C, you&amp;rsquo;ll want to install the
&lt;a href=&#34;https://github.com/WebAssembly/wasi-sdk&#34;&gt;WASI SDK&lt;/a&gt;, though if you&amp;rsquo;re following
the tutorial with the Rust example, this step is optional.&lt;/p&gt;
&lt;p&gt;In part 2 of this tutorial, we will be publishing our application to a registry
hosted on Microsoft Azure. The steps assume you have an Azure account and the
&lt;code&gt;az&lt;/code&gt; CLI installed. However, there are other cloud providers available with
their own solutions, and if you&amp;rsquo;re feeling particularly brave, you can &lt;a href=&#34;https://github.com/docker/distribution&#34;&gt;run your
own registry on your own
infrastructure&lt;/a&gt;. You&amp;rsquo;ll also need
&lt;a href=&#34;https://github.com/engineerd/wasm-to-oci&#34;&gt;wasm-to-oci&lt;/a&gt; (a tool for publishing
WebAssembly modules to a registry).&lt;/p&gt;
&lt;p&gt;We’ll assume you have Krustlet installed already. See &lt;a href=&#34;quickstart.md&#34;&gt;the quickstart
guide&lt;/a&gt; for advice on how to boot a Kubernetes cluster and install
Krustlet.&lt;/p&gt;
&lt;p&gt;If you&amp;rsquo;re having trouble going through this tutorial, please post an issue to
&lt;a href=&#34;https://github.com/deislabs/krustlet&#34;&gt;deislabs/krustlet&lt;/a&gt; to chat with other
Krustlet users who might be able to help.&lt;/p&gt;
&lt;h2 id=&#34;creating-your-first-application&#34;&gt;Creating your first application&lt;/h2&gt;
&lt;p&gt;For this tutorial, we&amp;rsquo;ll be creating an example application written either in C
or in Rust.&lt;/p&gt;
&lt;p&gt;The application a very simple &amp;ldquo;hello world&amp;rdquo; application, running forever and
printing &amp;ldquo;hello world!&amp;rdquo; every 5 seconds to standard output.&lt;/p&gt;
&lt;h3 id=&#34;option-1-from-c&#34;&gt;Option 1: From C&lt;/h3&gt;
&lt;p&gt;First, let&amp;rsquo;s write the application in C. To create your app, type this command:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-console&#34; data-lang=&#34;console&#34;&gt;$ mkdir demo
$ cd demo
$ touch main.c
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The C code here uses standard POSIX APIs, and doesn&amp;rsquo;t have any knowledge of WASI
internals.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;&amp;lt;unistd.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;main&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;while&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color:#000&#34;&gt;printf&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;Hello, World!&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;);&lt;/span&gt;
        &lt;span style=&#34;color:#000&#34;&gt;sleep&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;5&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;);&lt;/span&gt;
    &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;
    &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;;&lt;/span&gt;
&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The wasi-sdk provides a clang which is configured to target WASI. We can compile
our program like so:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-console&#34; data-lang=&#34;console&#34;&gt;$ clang main.c -o demo.wasm
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;This is just regular clang, configured to use a WebAssembly target and sysroot.
The output of clang here is a standard WebAssembly module:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-console&#34; data-lang=&#34;console&#34;&gt;$ file demo.wasm
demo.wasm: WebAssembly (wasm) binary module version 0x1 (MVP)
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;option-2-from-rust&#34;&gt;Option 2: From Rust&lt;/h3&gt;
&lt;p&gt;The same application can be written in Rust. First, go ahead and start a new
project:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-console&#34; data-lang=&#34;console&#34;&gt;$ cargo new --bin demo
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Now, let&amp;rsquo;s port the C program defined earlier to Rust. In &lt;code&gt;src/main.rs&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-rust&#34; data-lang=&#34;rust&#34;&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;use&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;std&lt;/span&gt;::&lt;span style=&#34;color:#000&#34;&gt;time&lt;/span&gt;::&lt;span style=&#34;color:#000&#34;&gt;Duration&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;;&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;use&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;std&lt;/span&gt;::&lt;span style=&#34;color:#000&#34;&gt;thread&lt;/span&gt;::&lt;span style=&#34;color:#000&#34;&gt;sleep&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;;&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;fn&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;main&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;()&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;loop&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;        &lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;println&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;!&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;Hello, World!&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;);&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;        &lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;sleep&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;Duration&lt;/span&gt;::&lt;span style=&#34;color:#000&#34;&gt;from_secs&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;5&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;));&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;In order to build it, we first need to install a WASI-enabled Rust toolchain:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-console&#34; data-lang=&#34;console&#34;&gt;$ rustup target add wasm32-wasi
$ cargo build --release --target wasm32-wasi
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;We should now have the WebAssembly module created in &lt;code&gt;target/wasm32-wasi/release&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-console&#34; data-lang=&#34;console&#34;&gt;$ file target/wasm32-wasi/release/demo.wasm
demo.wasm: WebAssembly (wasm) binary module version 0x1 (MVP)
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;optional-executing-with-wasmtime&#34;&gt;Optional: executing with wasmtime&lt;/h2&gt;
&lt;p&gt;The WebAssembly module &lt;code&gt;demo.wasm&lt;/code&gt; we just compiled either from C or Rust is
simply a single file containing a self-contained WASM module.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;wasmtime&lt;/code&gt; is a standalone JIT-style runtime for WebAssembly and WASI. It runs
WebAssembly code outside of the web, and can be used both as a command-line
utility or as a library embedded in a larger application.&lt;/p&gt;
&lt;p&gt;We can execute our application with &lt;code&gt;wasmtime&lt;/code&gt; directly, like so:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-console&#34; data-lang=&#34;console&#34;&gt;$ wasmtime demo.wasm
Hello, World!
Hello, World!
Hello, World!
^C
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;To exit the program, enter CTRL+C with your keyboard.&lt;/p&gt;
&lt;p&gt;Great! Our program runs as expected!&lt;/p&gt;
&lt;p&gt;When you’re comfortable with the application, read &lt;a href=&#34;tutorial02.md&#34;&gt;part 2&lt;/a&gt; of
this tutorial to learn about publishing our application to a registry, where
Krustlet will be able to find it and run it.&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>En: </title>
      <link>https://docs.krustlet.dev/en/intro/tutorial02/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://docs.krustlet.dev/en/intro/tutorial02/</guid>
      <description>
        
        
        &lt;h1 id=&#34;writing-your-first-app-part-2&#34;&gt;Writing your first app, part 2&lt;/h1&gt;
&lt;p&gt;This tutorial begins where &lt;a href=&#34;tutorial01.md&#34;&gt;Tutorial 1&lt;/a&gt; left off. We’ll walk
through the process to set up your personal registry and publish your
application to that registry.&lt;/p&gt;
&lt;p&gt;For this tutorial, we will be creating a registry hosted on Microsoft Azure, but
there are other cloud providers that provide their own solutions, and you can
&lt;a href=&#34;https://github.com/docker/distribution&#34;&gt;run one on your own infrastructure&lt;/a&gt;,
too!&lt;/p&gt;
&lt;h2 id=&#34;what-is-a-registry-and-what-is-wasm-to-oci&#34;&gt;What is a registry, and what is wasm-to-oci?&lt;/h2&gt;
&lt;p&gt;A registry allows you to store your local WebAssembly modules in the cloud. With
a registry, you can backup your personal modules, share your projects, and
collaborate with others.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/engineerd/wasm-to-oci&#34;&gt;wasm-to-oci&lt;/a&gt; is an open source project that understands how to communicate
with a registry. It takes a module you&amp;rsquo;ve built locally on your computer and
publishes it to the registry, making it publicly available for others to access.&lt;/p&gt;
&lt;h2 id=&#34;create-a-registry&#34;&gt;Create a registry&lt;/h2&gt;
&lt;p&gt;This tutorial uses the Azure CLI to create an Azure Container Registry. We will
be using this registry to publish our modules and provide Krustlet the URL for
fetching these modules.&lt;/p&gt;
&lt;p&gt;The steps here assume you have an Azure account and the &lt;code&gt;az&lt;/code&gt; CLI installed.
However, there are other cloud providers available with their own solutions, and
if you&amp;rsquo;re feeling particularly brave, you can &lt;a href=&#34;https://github.com/docker/distribution&#34;&gt;run your own registry on your own
infrastructure&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id=&#34;create-a-resource-group&#34;&gt;Create a resource group&lt;/h3&gt;
&lt;p&gt;An Azure resource group is a logical container into which Azure resources are
deployed and managed.&lt;/p&gt;
&lt;p&gt;The following example creates a resource group named &lt;code&gt;myResourceGroup&lt;/code&gt; in the
&lt;code&gt;eastus&lt;/code&gt; region. You may want to change it to a region closer to you. You can
find out what regions are available with &lt;code&gt;az account list-locations&lt;/code&gt;, and you
can set your default region with &lt;code&gt;az configure --defaults location=&amp;lt;location&amp;gt;&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Create a resource group with the &lt;code&gt;az group create&lt;/code&gt; command.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-console&#34; data-lang=&#34;console&#34;&gt;$ az group create --name myResourceGroup --location eastus
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;create-a-container-registry&#34;&gt;Create a container registry&lt;/h3&gt;
&lt;p&gt;In this tutorial, we will be creating a basic registry, which is cost-optimized
for developers learning about Azure Container Registry. For details on available
service tiers, see &lt;a href=&#34;https://docs.microsoft.com/en-us/azure/container-registry/container-registry-skus&#34;&gt;Container registry
SKUs&lt;/a&gt;
in the Azure documentation.&lt;/p&gt;
&lt;p&gt;Create an ACR instance using the &lt;code&gt;az acr create command&lt;/code&gt;. The registry name must
be unique within Azure, and contain 5-50 alphanumeric characters.&lt;/p&gt;
&lt;p&gt;In the following example, &lt;code&gt;mycontainerregistry007&lt;/code&gt; is used as the name. Update
this to a unique value.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-console&#34; data-lang=&#34;console&#34;&gt;$ az acr create --sku Basic --resource-group myResourceGroup --name mycontainerregistry007
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;When the registry is created, the output is similar to the following:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
  &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;&amp;#34;adminUserEnabled&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;false&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt;
  &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;&amp;#34;creationDate&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;2019-01-08T22:32:13.175925+00:00&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt;
  &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;&amp;#34;id&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.ContainerRegistry/registries/mycontainerregistry007&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt;
  &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;&amp;#34;location&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;eastus&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt;
  &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;&amp;#34;loginServer&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;mycontainerregistry007.azurecr.io&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt;
  &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;&amp;#34;name&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;mycontainerregistry007&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt;
  &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;&amp;#34;provisioningState&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;Succeeded&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt;
  &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;&amp;#34;resourceGroup&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;myResourceGroup&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt;
  &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;&amp;#34;sku&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;&amp;#34;name&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;Basic&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt;
    &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;&amp;#34;tier&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;Basic&amp;#34;&lt;/span&gt;
  &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;},&lt;/span&gt;
  &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;&amp;#34;status&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;null&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt;
  &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;&amp;#34;storageAccount&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;null&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt;
  &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;&amp;#34;tags&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{},&lt;/span&gt;
  &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;&amp;#34;type&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;Microsoft.ContainerRegistry/registries&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Take note of the &lt;code&gt;loginServer&lt;/code&gt; field. That is the URL for our registry. We&amp;rsquo;ll
need to know that when we publish our application in a bit.&lt;/p&gt;
&lt;h3 id=&#34;log-in&#34;&gt;Log in&lt;/h3&gt;
&lt;p&gt;Now that our registry was created, we can go ahead and authenticate with this
registry to publish our application:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-console&#34; data-lang=&#34;console&#34;&gt;$ az acr login --name mycontainerregistry007
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;publish-your-app&#34;&gt;Publish your app&lt;/h2&gt;
&lt;p&gt;Now that we&amp;rsquo;ve created our registry and are logged in, we can publish our
application using &lt;a href=&#34;https://github.com/engineerd/wasm-to-oci&#34;&gt;wasm-to-oci&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;wasm-to-oci is a tool for publishing WebAssembly modules to a registry. It
packages the module and uploads it to the registry. Krustlet understands the
registry API and will fetch the module based on the URL you uploaded it to.&lt;/p&gt;
&lt;p&gt;To publish our application, we need to come up with a name and a version number.
Our &lt;code&gt;loginServer&lt;/code&gt; field from earlier was &lt;code&gt;mycontainerregistry007.azurecr.io&lt;/code&gt;,
and we want to name our application &lt;code&gt;krustlet-tutorial&lt;/code&gt;, version &lt;code&gt;v1.0.0&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The pattern for a registry URL is:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;&amp;lt;URL&amp;gt;/&amp;lt;NAME&amp;gt;:&amp;lt;VERSION&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;In our case, our application URL will look like
&lt;code&gt;mycontainerregistry007.azurecr.io/krustlet-tutorial:v1.0.0&lt;/code&gt;. Great!&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s publish that now:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-console&#34; data-lang=&#34;console&#34;&gt;$ wasm-to-oci push demo.wasm mycontainerregistry007.azurecr.io/krustlet-tutorial:v1.0.0
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;code&gt;demo.wasm&lt;/code&gt; is the filename of the WebAssembly module we compiled during &lt;a href=&#34;tutorial01.md&#34;&gt;part
1&lt;/a&gt; of this tutorial. If you are publishing the Rust example, use
&lt;code&gt;target/wasm32-wasi/debug/demo.wasm&lt;/code&gt; instead.&lt;/p&gt;
&lt;h2 id=&#34;create-a-container-registry-pull-secret&#34;&gt;Create a container registry pull secret&lt;/h2&gt;
&lt;p&gt;Unless your container registry is enabled with anonymous access, you need to
authenticate krustlet to pull images from it. At the moment, there is no flag
in the Azure portal to make a registry public, but you can
&lt;a href=&#34;https://docs.microsoft.com/en-us/azure/container-registry/container-registry-faq#how-do-i-enable-anonymous-pull-access&#34;&gt;create a support ticket&lt;/a&gt;
to have it enabled manually.&lt;/p&gt;
&lt;p&gt;Without public access to the container registry, you need to create a
&lt;em&gt;Kubernetes pull secret&lt;/em&gt;. The steps below for Azure are
&lt;a href=&#34;https://docs.microsoft.com/en-us/azure/container-registry/container-registry-auth-kubernetes&#34;&gt;extracted from the Azure documentation&lt;/a&gt;,
and repeated here for convenience.&lt;/p&gt;
&lt;h3 id=&#34;create-a-service-principal-and-assign-a-role-in-azure&#34;&gt;Create a service principal and assign a role in Azure&lt;/h3&gt;
&lt;p&gt;Below is a bash script that will create a service principal for pulling images
for the registry. Replace &lt;code&gt;&amp;lt;container-registry-name&amp;gt;&lt;/code&gt; with
&lt;code&gt;mycontainerregistry007&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;#!/bin/bash
&lt;/span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;# Modify for your environment.&lt;/span&gt;
&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;# ACR_NAME: The name of your Azure Container Registry&lt;/span&gt;
&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;# SERVICE_PRINCIPAL_NAME: Must be unique within your AD tenant&lt;/span&gt;
&lt;span style=&#34;color:#000&#34;&gt;ACR_NAME&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt;&amp;lt;container-registry-name&amp;gt;
&lt;span style=&#34;color:#000&#34;&gt;SERVICE_PRINCIPAL_NAME&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt;acr-service-principal

&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;# Obtain the full registry ID for subsequent command args&lt;/span&gt;
&lt;span style=&#34;color:#000&#34;&gt;ACR_REGISTRY_ID&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;$(&lt;/span&gt;az acr show --name &lt;span style=&#34;color:#000&#34;&gt;$ACR_NAME&lt;/span&gt; --query id --output tsv&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;)&lt;/span&gt;

&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;# Create the service principal with rights scoped to the registry.&lt;/span&gt;
&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;# Default permissions are for docker pull access. Modify the &amp;#39;--role&amp;#39;&lt;/span&gt;
&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;# argument value as desired:&lt;/span&gt;
&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;# acrpull:     pull only&lt;/span&gt;
&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;# acrpush:     push and pull&lt;/span&gt;
&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;# owner:       push, pull, and assign roles&lt;/span&gt;
&lt;span style=&#34;color:#000&#34;&gt;SP_PASSWD&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;$(&lt;/span&gt;az ad sp create-for-rbac --name http://&lt;span style=&#34;color:#000&#34;&gt;$SERVICE_PRINCIPAL_NAME&lt;/span&gt; --scopes &lt;span style=&#34;color:#000&#34;&gt;$ACR_REGISTRY_ID&lt;/span&gt; --role acrpull --query password --output tsv&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;)&lt;/span&gt;
&lt;span style=&#34;color:#000&#34;&gt;SP_APP_ID&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;$(&lt;/span&gt;az ad sp show --id http://&lt;span style=&#34;color:#000&#34;&gt;$SERVICE_PRINCIPAL_NAME&lt;/span&gt; --query appId --output tsv&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;)&lt;/span&gt;

&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;# Output the service principal&amp;#39;s credentials; use these in your services and&lt;/span&gt;
&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;# applications to authenticate to the container registry.&lt;/span&gt;
&lt;span style=&#34;color:#204a87&#34;&gt;echo&lt;/span&gt; &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;Service principal ID: &lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;$SP_APP_ID&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#204a87&#34;&gt;echo&lt;/span&gt; &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;Service principal password: &lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;$SP_PASSWD&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;If you do not want to create a service principal in Azure, you can also use the
registry &lt;code&gt;Admin&lt;/code&gt; username and password which gives full access to the registry
and is not generally recommended. This is not enabled by default. Go to the
Azure portal and the settings for your registry and the &lt;code&gt;Access keys&lt;/code&gt; menu.
There you can enable &lt;code&gt;Admin&lt;/code&gt; access and use the associated username instead of
the service principal ID and the password when creating the pull secret below.&lt;/p&gt;
&lt;h3 id=&#34;use-the-service-principal&#34;&gt;Use the service principal&lt;/h3&gt;
&lt;p&gt;Create an image pull secret in Kubernetes:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-console&#34; data-lang=&#34;console&#34;&gt;kubectl create secret docker-registry &amp;lt;acr-secret-name&amp;gt; \
    --namespace &amp;lt;namespace&amp;gt; \
    --docker-server=mycontainerregistry007.azurecr.io \
    --docker-username=&amp;lt;service-principal-ID&amp;gt; \
    --docker-password=&amp;lt;service-principal-password&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;where &lt;code&gt;&amp;lt;acr-secret-name&amp;gt;&lt;/code&gt; is a name you give this secret,
&lt;code&gt;&amp;lt;service-principal-ID&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;service-principal-password&amp;gt;&lt;/code&gt; are taken from the
output of the bash script above. The &lt;code&gt;--namespace&lt;/code&gt; can be omitted if you are
using the default Kubernetes namespace.&lt;/p&gt;
&lt;h2 id=&#34;next-steps&#34;&gt;Next steps&lt;/h2&gt;
&lt;p&gt;When you’re comfortable with publishing your application with wasm-to-oci, read
&lt;a href=&#34;tutorial03.md&#34;&gt;part 3 of this tutorial&lt;/a&gt; to install your application.&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>En: </title>
      <link>https://docs.krustlet.dev/en/intro/tutorial03/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://docs.krustlet.dev/en/intro/tutorial03/</guid>
      <description>
        
        
        &lt;h1 id=&#34;writing-your-first-app-part-3&#34;&gt;Writing your first app, part 3&lt;/h1&gt;
&lt;p&gt;This tutorial begins where &lt;a href=&#34;tutorial02.md&#34;&gt;Tutorial 2&lt;/a&gt; left off. We’ll walk
through the process for installing your first application written in WebAssembly
into your Kubernetes cluster, then test our application using &lt;code&gt;kubectl&lt;/code&gt;.&lt;/p&gt;
&lt;h2 id=&#34;scheduling-pods-on-the-krustlet&#34;&gt;Scheduling pods on the Krustlet&lt;/h2&gt;
&lt;p&gt;In Kubernetes, Pods are the smallest deployable units of compute that can be
created and managed in Kubernetes. In other words, your application runs inside
a Pod, and we can inspect the status of the application by inspecting the Pod.&lt;/p&gt;
&lt;p&gt;Krustlet listens for pods requesting a node with the &lt;code&gt;wasm32-wasi&lt;/code&gt; architecture.
To schedule a Pod that Krustlet understands, we need to provide Kubernetes with
a YAML file describing our Pod.&lt;/p&gt;
&lt;p&gt;Create a new file and call it &lt;code&gt;krustlet-tutorial.yaml&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;apiVersion&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;v1&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;kind&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;Pod&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;metadata&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;name&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;krustlet-tutorial&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;spec&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;containers&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;    &lt;/span&gt;- &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;name&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;krustlet-tutorial&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;      &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;image&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;mycontainerregistry007.azurecr.io/krustlet-tutorial:v1.0.0&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;imagePullSecrets&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;    &lt;/span&gt;- &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;name&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;&amp;lt;acr-secret&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;tolerations&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;    &lt;/span&gt;- &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;key&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;kubernetes.io/arch&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;      &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;operator&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;Equal&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;      &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;value&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;wasm32-wasi&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;      &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;effect&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;NoExecute&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;    &lt;/span&gt;- &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;key&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;kubernetes.io/arch&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;      &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;operator&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;Equal&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;      &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;value&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;wasm32-wasi&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;      &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;effect&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;NoSchedule&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Let&amp;rsquo;s break this file down:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;apiVersion&lt;/code&gt;: which version of the Kubernetes API are we targeting?&lt;/li&gt;
&lt;li&gt;&lt;code&gt;kind&lt;/code&gt;: what type of workload are we deploying?&lt;/li&gt;
&lt;li&gt;&lt;code&gt;metadata.name&lt;/code&gt;: what is the name of our workload?&lt;/li&gt;
&lt;li&gt;&lt;code&gt;spec.containers[0].name&lt;/code&gt;: what should I name this module?&lt;/li&gt;
&lt;li&gt;&lt;code&gt;spec.containers[0].image&lt;/code&gt;: where can I find the module?&lt;/li&gt;
&lt;li&gt;&lt;code&gt;spec.imagePullSecrets[0].name&lt;/code&gt;: which name has the  image pull secret?&lt;/li&gt;
&lt;li&gt;&lt;code&gt;spec.tolerations&lt;/code&gt;: what kind of node am I allowed to run on?&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;To deploy this workload to Kubernetes, we use &lt;code&gt;kubectl&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-console&#34; data-lang=&#34;console&#34;&gt;$ kubectl create -f krustlet-tutorial.yaml
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Now that the workload has been scheduled, Krustlet should start spewing out some
logs in its terminal window, reporting updates on the workload that was
scheduled.&lt;/p&gt;
&lt;p&gt;We can check the status of our pod:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-console&#34; data-lang=&#34;console&#34;&gt;$ kubectl get pods
NAME                READY   STATUS    RESTARTS   AGE
krustlet-tutorial   1/1     Running   0          18s
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;We can also inspect the logs, too:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-console&#34; data-lang=&#34;console&#34;&gt;$ kubectl logs krustlet-tutorial
Hello, World!
Hello, World!
Hello, World!
Hello, World!
Hello, World!
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;cleanup&#34;&gt;Cleanup&lt;/h2&gt;
&lt;p&gt;Once you&amp;rsquo;re finished with this tutorial, you can destroy the cluster and the
registry.&lt;/p&gt;
&lt;p&gt;Destroying the cluster can be accomplished with:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-console&#34; data-lang=&#34;console&#34;&gt;$ kind delete cluster
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;And destroying the registry can be accomplished by removing the resource group.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-console&#34; data-lang=&#34;console&#34;&gt;$ az group delete --name myResourceGroup
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;This concludes the basic tutorial. Congratulations!&lt;/p&gt;
&lt;p&gt;If you are familiar with Krustlet and are interested in more in-depth topics,
check out the &lt;a href=&#34;../topics/README.md&#34;&gt;Topic Guides&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;You might also be scratching your head on what to &lt;a href=&#34;readnext.md&#34;&gt;read next&lt;/a&gt;.&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>En: </title>
      <link>https://docs.krustlet.dev/en/topics/architecture/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://docs.krustlet.dev/en/topics/architecture/</guid>
      <description>
        
        
        &lt;h1 id=&#34;krustlet-architecture&#34;&gt;Krustlet architecture&lt;/h1&gt;
&lt;p&gt;This document describes the Krustlet architecture at a high level.&lt;/p&gt;
&lt;h2 id=&#34;the-purpose-of-krustlet&#34;&gt;The purpose of Krustlet&lt;/h2&gt;
&lt;p&gt;Krustlet acts as a Kubernetes Kubelet by listening on the Kubernetes API&amp;rsquo;s event
stream for new Pod requests that match a particular set of node selectors,
scheduling those workloads to run using a WASI-based runtime instead of a
container-based runtime.&lt;/p&gt;
&lt;h2 id=&#34;implementation&#34;&gt;Implementation&lt;/h2&gt;
&lt;p&gt;Krustlet is written in Rust.&lt;/p&gt;
&lt;p&gt;By acting as a Kubelet, Krustlet uses Kubernetes client libraries to communicate
with the Kubernetes API. Currently, the client libraries use HTTP(s) as the
communication protocol between Krustlet and the Kubernetes API, using JSON as
the data format for serializing and de-serializing request bodies.&lt;/p&gt;
&lt;p&gt;Krustlet sends status updates about scheduled pods to the Kubernetes API.
Therefore, it does not require its own database.&lt;/p&gt;
&lt;h3 id=&#34;providers&#34;&gt;Providers&lt;/h3&gt;
&lt;p&gt;Krustlet uses &lt;a href=&#34;./providers.md&#34;&gt;providers&lt;/a&gt; to interact with a given runtime. The
&lt;code&gt;kubelet&lt;/code&gt; crate has the common functionality for listing to a stream of pods (an
&amp;ldquo;Informer&amp;rdquo; in Kubernetes parlance), keeping a node status updated, and handling
requests from the Kubernetes API. The Kubelet expects to be given a provider
(something that implements the &lt;code&gt;Provider&lt;/code&gt; interface) which knows how to create
&amp;ldquo;containers&amp;rdquo; for the runtime it is implementing. Note that these might not
actually be Docker containers (they definitely are not if you are using one of
the providers implemented in this repository), but Kubernetes still thinks of
them as a &amp;ldquo;container.&amp;rdquo; The basic workflow is like this:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;kubelet&lt;/code&gt; receives a pod event from the stream&lt;/li&gt;
&lt;li&gt;Depending on the event type (added, modified, deleted), it calls the
corresponding &lt;code&gt;Provider&lt;/code&gt; method and creates, updates, or stops/deletes the
&amp;ldquo;container&amp;rdquo;&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;Provider&lt;/code&gt; does work and returns an error if there is a problem&lt;/li&gt;
&lt;/ol&gt;

      </description>
    </item>
    
    <item>
      <title>En: </title>
      <link>https://docs.krustlet.dev/en/topics/configuration/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://docs.krustlet.dev/en/topics/configuration/</guid>
      <description>
        
        
        &lt;h1 id=&#34;configuration&#34;&gt;Configuration&lt;/h1&gt;
&lt;p&gt;The &lt;code&gt;kubelet&lt;/code&gt; crate supports configuration via the command line, configuration
file or environment variables.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; Custom kubelets built using the &lt;code&gt;kubelet&lt;/code&gt; crate can choose which of
these methods to support, or may choose to bypass &lt;code&gt;kubelet&lt;/code&gt;&amp;rsquo;s built-in
configuration system in favour of their own. &lt;code&gt;krustlet-wasi&lt;/code&gt; uses standard
configuration and supports all configuration methods.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; Certain flags must be handled at the provider or custom kubelet level.
If you are building a custom kubelet using the &lt;code&gt;kubelet&lt;/code&gt; crate, please see the
&amp;ldquo;Notes to kubelet implementers&amp;rdquo; section below.&lt;/p&gt;
&lt;h2 id=&#34;configuration-values&#34;&gt;Configuration values&lt;/h2&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Command line&lt;/th&gt;
&lt;th&gt;Environment variable&lt;/th&gt;
&lt;th&gt;Configuration file&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;-a, &amp;ndash;addr&lt;/td&gt;
&lt;td&gt;KRUSTLET_ADDRESS&lt;/td&gt;
&lt;td&gt;listenerAddress&lt;/td&gt;
&lt;td&gt;The address on which the kubelet should listen&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&amp;ndash;data-dir&lt;/td&gt;
&lt;td&gt;KRUSTLET_DATA_DIR&lt;/td&gt;
&lt;td&gt;dataDir&lt;/td&gt;
&lt;td&gt;The path under which the kubelet should store data (e.g. logs, container images, etc.). The default is &lt;code&gt;$HOME/.krustlet&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&amp;ndash;hostname&lt;/td&gt;
&lt;td&gt;KRUSTLET_HOSTNAME&lt;/td&gt;
&lt;td&gt;hostname&lt;/td&gt;
&lt;td&gt;The name of the host where the kubelet runs. Defaults to the hostname of the machine where the kubelet is running; pass this if the name in the TLS certificate does not match the actual machine name&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&amp;ndash;max-pods&lt;/td&gt;
&lt;td&gt;MAX_PODS&lt;/td&gt;
&lt;td&gt;maxPods&lt;/td&gt;
&lt;td&gt;The maximum number of pods to schedule on the kubelet at any one time. The default is 110&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;-n, &amp;ndash;node-ip&lt;/td&gt;
&lt;td&gt;KRUSTLET_NODE_IP&lt;/td&gt;
&lt;td&gt;nodeIP&lt;/td&gt;
&lt;td&gt;The IP address of the node registered with the Kubernetes master. Defaults to the IP address of the kubelet hostname, as obtained from DNS&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&amp;ndash;node-labels&lt;/td&gt;
&lt;td&gt;NODE_LABELS&lt;/td&gt;
&lt;td&gt;nodeLabels&lt;/td&gt;
&lt;td&gt;The labels to apply to the node when it registers in the cluster. See below for format&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&amp;ndash;node-name&lt;/td&gt;
&lt;td&gt;KRUSTLET_NODE_NAME&lt;/td&gt;
&lt;td&gt;nodeName&lt;/td&gt;
&lt;td&gt;The name by which to refer to the kubelet node in Kubernetes. Defaults to the hostname&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;-p, &amp;ndash;port&lt;/td&gt;
&lt;td&gt;KRUSTLET_PORT&lt;/td&gt;
&lt;td&gt;listenerPort&lt;/td&gt;
&lt;td&gt;The port on which the kubelet should listen. The default is 3000&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&amp;ndash;cert-file&lt;/td&gt;
&lt;td&gt;KRUSTLET_CERT_FILE&lt;/td&gt;
&lt;td&gt;tlsCertificateFile&lt;/td&gt;
&lt;td&gt;The path to the TLS certificate for the kubelet. The default is &lt;code&gt;(data directory)/config/krustlet.crt&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&amp;ndash;private-key-file&lt;/td&gt;
&lt;td&gt;KRUSTLET_PRIVATE_KEY_FILE&lt;/td&gt;
&lt;td&gt;tlsPrivateKeyFile&lt;/td&gt;
&lt;td&gt;The path to the private key for the TLS certificate. The default is &lt;code&gt;(data directory)/config/krustlet.key&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&amp;ndash;insecure-registries&lt;/td&gt;
&lt;td&gt;KRUSTLET_INSECURE_REGISTRIES&lt;/td&gt;
&lt;td&gt;insecureRegistries&lt;/td&gt;
&lt;td&gt;A list of registries that should be accessed using HTTP instead of HTTPS. On the command line or environment variable, use commas to separate multiple registries&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&amp;ndash;x-allow-local-modules&lt;/td&gt;
&lt;td&gt;KRUSTLET_ALLOW_LOCAL_MODULES&lt;/td&gt;
&lt;td&gt;allowLocalModules&lt;/td&gt;
&lt;td&gt;If true, the kubelet should recognise references prefixed with &amp;lsquo;fs&amp;rsquo; as indicating a filesystem path rather than a registry location. This is an experimental flag for use in development scenarios where you don&amp;rsquo;t want to repeatedly push your local builds to a registry; it is likely to be removed in a future version when we have a more comprehensive toolchain for local development.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&#34;node-labels-format&#34;&gt;Node labels format&lt;/h2&gt;
&lt;p&gt;If you specify node labels on the command line or in an environment variable,
the format is a comma-separated list of &lt;code&gt;name=value&lt;/code&gt; pairs. For example:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;--node-labels mylabel=foo,myotherlabel=bar
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;If you specify node labels in the configuration file, the format is key-value
pairs. For example:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;&amp;#34;node_labels&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;&amp;#34;mylabel&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;foo&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt;
        &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;&amp;#34;myotherlabel&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;bar&amp;#34;&lt;/span&gt;
    &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;configuration-file-location&#34;&gt;Configuration file location&lt;/h2&gt;
&lt;p&gt;By default, the configuration file is located at
&lt;code&gt;$HOME/.krustlet/config/config.json&lt;/code&gt;. The &lt;code&gt;kubelet&lt;/code&gt; crate does not define a
common way to override this.  However, custom kubelets built on &lt;code&gt;kubelet&lt;/code&gt; may
provide such a mechanism.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;krustlet-wasi&lt;/code&gt; kubelet does not currently provide a way to override the
default location.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;TODO: should we build in a standard way of overriding the file location?&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&#34;precedence&#34;&gt;Precedence&lt;/h2&gt;
&lt;p&gt;If you specify the same setting in multiple places - for example, both in the
configuration file and on the command line - then the precedence is:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Command line flags take precedence over environment variables&lt;/li&gt;
&lt;li&gt;Environment variables take precedence over the configuration file&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This allows you to conveniently override individual settings from a
configuration file, for example by writing &lt;code&gt;MAX_PODS=200 krustlet-wasi&lt;/code&gt; or
&lt;code&gt;krustlet-wasi --max-pods 200&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;If you specify node labels in multiple places, the collections are &lt;em&gt;not&lt;/em&gt;
combined: the place with the highest precedence takes effect and all others are
ignored.&lt;/p&gt;
&lt;h2 id=&#34;notes-to-kubelet-implementers&#34;&gt;Notes to kubelet implementers&lt;/h2&gt;
&lt;p&gt;Some flags require you to support them in your provider or main code - they are
not implemented automatically by the kubelet core. These flags are as follows:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;--bootstrap-file&lt;/code&gt; - should be passed to &lt;code&gt;kubelet::bootstrap&lt;/code&gt; if you use the
bootstrapping feature&lt;/li&gt;
&lt;li&gt;&lt;code&gt;--data-dir&lt;/code&gt; - this should be used to construct the &lt;code&gt;FileStore&lt;/code&gt; if you use one&lt;/li&gt;
&lt;li&gt;&lt;code&gt;--x-allow-local-modules&lt;/code&gt; - if specified you should compose a
&lt;code&gt;FileSystemStore&lt;/code&gt; onto your normal store&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;See the &lt;code&gt;krustlet-wasi.rs&lt;/code&gt; file for examples of how to honour these flags.&lt;/p&gt;
&lt;p&gt;If you can&amp;rsquo;t honour a flag value in your particular scenario, then you should
still check for it and return an error, rather than silently ignoring it.&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>En: </title>
      <link>https://docs.krustlet.dev/en/topics/csi/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://docs.krustlet.dev/en/topics/csi/</guid>
      <description>
        
        
        &lt;h1 id=&#34;the-container-storage-interface&#34;&gt;The Container Storage Interface&lt;/h1&gt;
&lt;p&gt;The Container Storage Interface (CSI) is a standardized plugin system that
enables many different types of storage systems to&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Automatically provision storage volumes as needed&lt;/li&gt;
&lt;li&gt;Mount volumes to pods as needed&lt;/li&gt;
&lt;li&gt;Unmount volumes from deleted or removed pods, and&lt;/li&gt;
&lt;li&gt;Destroy storage volumes after they&amp;rsquo;ve been de-commissioned.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Krustlet introduced this feature in v0.6.0 and is currently in alpha status.
Many features that Kubernetes supports such as &amp;ldquo;Block&amp;rdquo; mounting or read-only
access modes are currently unavailable, but will become available as the feature
stabilizes.&lt;/p&gt;
&lt;h2 id=&#34;why-csi&#34;&gt;Why CSI?&lt;/h2&gt;
&lt;p&gt;Without CSI support, adding a new storage system to a Provider requires checking
code into the core Krustlet repository, and it requires each Provider to call
this code in order to support the new volume type. Any changes to the storage
system won&amp;rsquo;t become available until the next Krustlet release, and could be
painful for many Providers to adopt these new changes.&lt;/p&gt;
&lt;p&gt;CSI addresses these issues by enabling storage plugins to be developed
out-of-tree, deployed alongside a Krustlet Provider, and consumed through
standard Kubernetes storage primitives: PersistentVolumeClaims (PVC),
PersistentVolumes (PV), and StorageClasses (SC).&lt;/p&gt;
&lt;h2 id=&#34;how-do-i-deploy-a-csi-driver-alongside-a-krustlet-provider&#34;&gt;How do I deploy a CSI driver alongside a Krustlet Provider?&lt;/h2&gt;
&lt;p&gt;Please see the &lt;a href=&#34;../howto/csi.md&#34;&gt;HOWTO guide&lt;/a&gt; for more information.&lt;/p&gt;
&lt;h2 id=&#34;how-do-i-use-a-csi-volume&#34;&gt;How do I use a CSI Volume?&lt;/h2&gt;
&lt;p&gt;Please see the &lt;a href=&#34;../howto/csi.md&#34;&gt;HOWTO guide&lt;/a&gt; for more information.&lt;/p&gt;
&lt;h2 id=&#34;where-can-i-find-csi-drivers&#34;&gt;Where can I find CSI Drivers?&lt;/h2&gt;
&lt;p&gt;CSI drivers are maintained and distributed by the community. You can find
example CSI drivers in the &lt;a href=&#34;https://github.com/kubernetes-csi&#34;&gt;kubernetes-csi&lt;/a&gt;
organization on GitHub. These are provided purely for illustrative purposes, and
are not intended for use in production.&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>En: </title>
      <link>https://docs.krustlet.dev/en/topics/glossary/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://docs.krustlet.dev/en/topics/glossary/</guid>
      <description>
        
        
        &lt;h1 id=&#34;glossary&#34;&gt;Glossary&lt;/h1&gt;
&lt;p&gt;Here is where you will find definitions for commmon terminology used across
Krustlet.&lt;/p&gt;
&lt;h2 id=&#34;kubelet&#34;&gt;Kubelet&lt;/h2&gt;
&lt;p&gt;The kubelet is a key piece of the Kubernetes architecture. A kubelet is a &amp;ldquo;node
agent&amp;rdquo; that runs on each node in a Kubernetes cluster. It registers as a node
with the Kubernetes API, waiting for new &lt;a href=&#34;#pod&#34;&gt;pods&lt;/a&gt; provided by the API, and
ensures the workloads in those pods are running and healthy.&lt;/p&gt;
&lt;h2 id=&#34;pod&#34;&gt;Pod&lt;/h2&gt;
&lt;p&gt;A pod is the simplest execution unit in Kubernetes that you can create and
destroy using the Kubernetes API. Nearly every workload type available in
Kubernetes (Deployments, StatfulSets, DaemonSets, Jobs, etc.) uses pods as the
basic unit of work. In other words, a pod represents a single unit of work in
your cluster.&lt;/p&gt;
&lt;h2 id=&#34;provider&#34;&gt;Provider&lt;/h2&gt;
&lt;p&gt;A provider is an abstract interface within Krustlet. Providers describe the
verbs and actions a WebAssembly runtime (like wasmtime) must provide in order
for that runtime to work as a kubelet.&lt;/p&gt;
&lt;p&gt;The primary responsibility of a provider is to execute a workload (or schedule
it on an external executor), monitor that workload, and expose important details
back to Kubernetes using the Kubelet API.&lt;/p&gt;
&lt;p&gt;See also the topic guide on &lt;a href=&#34;providers.md&#34;&gt;providers&lt;/a&gt;.&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>En: </title>
      <link>https://docs.krustlet.dev/en/topics/plugin_system/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://docs.krustlet.dev/en/topics/plugin_system/</guid>
      <description>
        
        
        &lt;h1 id=&#34;plugin-system-overview&#34;&gt;Plugin System Overview&lt;/h1&gt;
&lt;p&gt;Krustlet partially implements the plugin discovery system used by the mainline
Kubelet for purposes of supporting CSI. The CSI documentation points at the
&lt;a href=&#34;https://kubernetes.io/docs/concepts/extend-kubernetes/compute-storage-net/device-plugins/#device-plugin-registration&#34;&gt;device plugin documentation&lt;/a&gt;,
but upon further investigation/reverse engineering, we determined that CSI
plugins use the auto plugin discovery method implemented
&lt;a href=&#34;https://github.com/kubernetes/kubernetes/tree/fd74333a971e2048b5fb2b692a9e043483d63fba/pkg/kubelet/pluginmanager&#34;&gt;here&lt;/a&gt;.
You can also see other evidence of this in the
&lt;a href=&#34;https://github.com/kubernetes-csi/drivers/blob/master/pkg/csi-common/nodeserver-default.go&#34;&gt;csi-common code&lt;/a&gt;
and the &lt;a href=&#34;https://github.com/kubernetes-csi/node-driver-registrar/blob/be7678e75e23b5419624ae3983b66957c0991073/README.md&#34;&gt;Node Driver Registrar
documentation&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&#34;what-is-not-supported&#34;&gt;What is not supported?&lt;/h2&gt;
&lt;p&gt;Currently we do not support the &lt;code&gt;DevicePlugin&lt;/code&gt; type or the aforementioned newer
device plugin system. Currently we do not have plans to implement it, but that
could change in the future as needs/uses evolve&lt;/p&gt;
&lt;h2 id=&#34;how-does-it-work&#34;&gt;How does it work?&lt;/h2&gt;
&lt;p&gt;The plugin registration system has an event driven loop for discovering and
registering plugins:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Kubelet using a file system watcher to watch the given directory&lt;/li&gt;
&lt;li&gt;Plugins wishing to register themselves with Kubelet must open a Unix domain
socket (henceforth referred to as just &amp;ldquo;socket&amp;rdquo;) in the watched directory&lt;/li&gt;
&lt;li&gt;When Kubelet detects a new socket, it connects to the discovered socket and
attempts to do a &lt;code&gt;GetInfo&lt;/code&gt; gRPC call.&lt;/li&gt;
&lt;li&gt;Using the info returned from the &lt;code&gt;GetInfo&lt;/code&gt; call, Kubelet performs validation
to make sure it supports the correct version of the API requested by the
plugin and that the plugin is not already registered. If it is a &lt;code&gt;CSIPlugin&lt;/code&gt;
type, the info will also contain another path to a socket where the CSI
driver is listening&lt;/li&gt;
&lt;li&gt;If validation succeeds, Kubelet makes a &lt;code&gt;NotifyRegistrationStatus&lt;/code&gt; gRPC call
on the originally discovered socket to inform the plugin that it has
successfully registered&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;additional-information&#34;&gt;Additional information&lt;/h3&gt;
&lt;p&gt;In normal Kubernetes land, most CSI plugins register themselves with the Kubelet
using the &lt;a href=&#34;https://github.com/kubernetes-csi/node-driver-registrar&#34;&gt;Node Driver
Registrar&lt;/a&gt; sidecar
container that runs with the actual CSI driver. It has the responsibilty for
creating the socket that Kubelet discovers.&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>En: </title>
      <link>https://docs.krustlet.dev/en/topics/providers/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://docs.krustlet.dev/en/topics/providers/</guid>
      <description>
        
        
        &lt;h1 id=&#34;providers&#34;&gt;Providers&lt;/h1&gt;
&lt;p&gt;The default runtime for the Krustlet project is &lt;code&gt;wasi&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;wasi&lt;/code&gt; runtime uses a project called
&lt;a href=&#34;https://github.com/bytecodealliance/wasmtime&#34;&gt;&lt;code&gt;wasmtime&lt;/code&gt;&lt;/a&gt;. wasmtime is a
standalone JIT-style host runtime for WebAssembly modules. It is focused
primarily on standards compliance with the WASM specification as it relates to
&lt;a href=&#34;https://wasi.dev/&#34;&gt;WASI&lt;/a&gt;. If your WebAssembly module complies with the
&lt;a href=&#34;https://github.com/WebAssembly/spec&#34;&gt;WebAssembly specification&lt;/a&gt;, wasmtime can
run it.&lt;/p&gt;
&lt;p&gt;It&amp;rsquo;s important to note that the WASI standard and &lt;code&gt;wasmtime&lt;/code&gt; are still under
heavy development. There are some key features (like networking) that are
currently missing, but will be made available in future updates.&lt;/p&gt;
&lt;h2 id=&#34;additional-providers&#34;&gt;Additional Providers&lt;/h2&gt;
&lt;p&gt;There are various other providers available as well.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/wasmCloud/krustlet-wasmcloud-provider&#34;&gt;&lt;code&gt;wasmcloud&lt;/code&gt;&lt;/a&gt;: The
&lt;code&gt;wasmcloud&lt;/code&gt; runtime is a secure WebAssembly host runtime, connecting &amp;ldquo;actors&amp;rdquo;
and &amp;ldquo;capability providers&amp;rdquo; together to connect your WebAssembly runtime to
cloud-native services like message brokers, databases, or other external
services normally unavailable to the WebAssembly runtime. This provider used
to be available in this repo but was moved under the wasmCloud project so it
could be maintained both by the Krustlet maintainers and the wasmCloud
maintainers.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/kflansburg/krustlet-cri&#34;&gt;&lt;code&gt;CRI&lt;/code&gt;&lt;/a&gt;: A Container Runtime
Interface provider implementation for Krustlet. This runtime allows you to run
the containers you know and love within Krustlet.&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
  </channel>
</rss>
